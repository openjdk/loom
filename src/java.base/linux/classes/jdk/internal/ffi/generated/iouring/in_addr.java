// Generated by jextract

package jdk.internal.ffi.generated.iouring;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct in_addr {
 *     in_addr_t s_addr;
 * }
 * }
 */
@SuppressWarnings("restricted") public class in_addr {

    in_addr() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        iouring_h.C_INT.withName("s_addr")
    ).withName("in_addr");

    public static final GroupLayout $LAYOUT() {
        return $LAYOUT;
    }

    private static final long s_addr$OFFSET = 0;
    private static final OfInt s_addr$LAYOUT = ((OfInt)$LAYOUT.select(groupElement("s_addr"))).withOrder(ByteOrder.BIG_ENDIAN);

    /**
     * Getter for field:
     * {@snippet lang=c :
     * in_addr_t s_addr
     * }
     */
    public static int s_addr(MemorySegment struct) {
        return struct.get(s_addr$LAYOUT, s_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * in_addr_t s_addr
     * }
     */
    public static void s_addr(MemorySegment struct, int fieldValue) {
        struct.set(s_addr$LAYOUT, s_addr$OFFSET, fieldValue);
    }

    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice($LAYOUT().byteSize() * index);
    }

    public static long sizeof() { return $LAYOUT().byteSize(); }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, $LAYOUT()));
    }

    public static MemorySegment reinterpret(MemorySegment addr, Arena scope, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, scope, cleanup);
    }

    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena scope, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret($LAYOUT().byteSize() * elementCount, scope, cleanup);
    }
}

