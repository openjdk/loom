// Generated by jextract

package jdk.internal.ffi.generated.iouring;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

@SuppressWarnings("restricted") public class iouring_h_1 {

    static final SymbolLookup SYMBOL_LOOKUP
            = SymbolLookup.loaderLookup().or(Linker.nativeLinker().defaultLookup());

    iouring_h_1() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MemoryLayout[] inferVariadicLayouts(Object[] varargs) {
        MemoryLayout[] result = new MemoryLayout[varargs.length];
        for (int i = 0; i < varargs.length; i++) {
            result[i] = variadicLayout(varargs[i].getClass());
        }
        return result;
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor baseDesc, MemoryLayout[] variadicLayouts) {
        FunctionDescriptor variadicDesc = baseDesc.appendArgumentLayouts(variadicLayouts);
        Linker.Option fva = Linker.Option.firstVariadicArg(baseDesc.argumentLayouts().size());
        return SYMBOL_LOOKUP.find(name)
                .map(addr -> Linker.nativeLinker().downcallHandle(addr, variadicDesc, fva)
                        .asSpreader(Object[].class, variadicLayouts.length))
                .orElse(null);
    }

    // Internals only below this point

    private static MemoryLayout variadicLayout(Class<?> c) {
        // apply default argument promotions per C spec
        // note that all primitives are boxed, since they are passed through an Object[]
        if (c == Boolean.class || c == Byte.class || c == Character.class || c == Short.class || c == Integer.class) {
            return JAVA_INT;
        } else if (c == Long.class) {
            return JAVA_LONG;
        } else if (c == Float.class || c == Double.class) {
            return JAVA_DOUBLE;
        } else if (MemorySegment.class.isAssignableFrom(c)) {
            return ADDRESS;
        }
        throw new IllegalArgumentException("Invalid type for ABI: " + c.getTypeName());
    }
    private static final int _TIME_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _TIME_H 1
     * }
     */
    public static int _TIME_H() {
        return _TIME_H;
    }
    private static final int _FEATURES_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;

    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;

    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;

    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;

    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)37L;

    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 37
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int _BITS_TIME_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_TIME_H 1
     * }
     */
    public static int _BITS_TIME_H() {
        return _BITS_TIME_H;
    }
    private static final int _BITS_TYPES_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int CLOCK_REALTIME = (int)0L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME 0
     * }
     */
    public static int CLOCK_REALTIME() {
        return CLOCK_REALTIME;
    }
    private static final int CLOCK_MONOTONIC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC 1
     * }
     */
    public static int CLOCK_MONOTONIC() {
        return CLOCK_MONOTONIC;
    }
    private static final int CLOCK_PROCESS_CPUTIME_ID = (int)2L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_PROCESS_CPUTIME_ID 2
     * }
     */
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return CLOCK_PROCESS_CPUTIME_ID;
    }
    private static final int CLOCK_THREAD_CPUTIME_ID = (int)3L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_THREAD_CPUTIME_ID 3
     * }
     */
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return CLOCK_THREAD_CPUTIME_ID;
    }
    private static final int CLOCK_MONOTONIC_RAW = (int)4L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC_RAW 4
     * }
     */
    public static int CLOCK_MONOTONIC_RAW() {
        return CLOCK_MONOTONIC_RAW;
    }
    private static final int CLOCK_REALTIME_COARSE = (int)5L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME_COARSE 5
     * }
     */
    public static int CLOCK_REALTIME_COARSE() {
        return CLOCK_REALTIME_COARSE;
    }
    private static final int CLOCK_MONOTONIC_COARSE = (int)6L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC_COARSE 6
     * }
     */
    public static int CLOCK_MONOTONIC_COARSE() {
        return CLOCK_MONOTONIC_COARSE;
    }
    private static final int CLOCK_BOOTTIME = (int)7L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_BOOTTIME 7
     * }
     */
    public static int CLOCK_BOOTTIME() {
        return CLOCK_BOOTTIME;
    }
    private static final int CLOCK_REALTIME_ALARM = (int)8L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME_ALARM 8
     * }
     */
    public static int CLOCK_REALTIME_ALARM() {
        return CLOCK_REALTIME_ALARM;
    }
    private static final int CLOCK_BOOTTIME_ALARM = (int)9L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_BOOTTIME_ALARM 9
     * }
     */
    public static int CLOCK_BOOTTIME_ALARM() {
        return CLOCK_BOOTTIME_ALARM;
    }
    private static final int CLOCK_TAI = (int)11L;

    /**
     * {@snippet lang=c :
     * #define CLOCK_TAI 11
     * }
     */
    public static int CLOCK_TAI() {
        return CLOCK_TAI;
    }
    private static final int TIMER_ABSTIME = (int)1L;

    /**
     * {@snippet lang=c :
     * #define TIMER_ABSTIME 1
     * }
     */
    public static int TIMER_ABSTIME() {
        return TIMER_ABSTIME;
    }
    private static final int __clock_t_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return __clock_t_defined;
    }
    private static final int __time_t_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return __time_t_defined;
    }
    private static final int __struct_tm_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __struct_tm_defined 1
     * }
     */
    public static int __struct_tm_defined() {
        return __struct_tm_defined;
    }
    private static final int _STRUCT_TIMESPEC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return _STRUCT_TIMESPEC;
    }
    private static final int _BITS_ENDIAN_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return _BITS_ENDIAN_H;
    }
    private static final int __LITTLE_ENDIAN = (int)1234L;

    /**
     * {@snippet lang=c :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return __LITTLE_ENDIAN;
    }
    private static final int __BIG_ENDIAN = (int)4321L;

    /**
     * {@snippet lang=c :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return __BIG_ENDIAN;
    }
    private static final int __PDP_ENDIAN = (int)3412L;

    /**
     * {@snippet lang=c :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return __PDP_ENDIAN;
    }
    private static final int _BITS_ENDIANNESS_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return _BITS_ENDIANNESS_H;
    }
    private static final int __clockid_t_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return __clockid_t_defined;
    }
    private static final int __timer_t_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return __timer_t_defined;
    }
    private static final int __itimerspec_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __itimerspec_defined 1
     * }
     */
    public static int __itimerspec_defined() {
        return __itimerspec_defined;
    }
    private static final int _BITS_TYPES_LOCALE_T_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES_LOCALE_T_H() {
        return _BITS_TYPES_LOCALE_T_H;
    }
    private static final int _BITS_TYPES___LOCALE_T_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES___LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES___LOCALE_T_H() {
        return _BITS_TYPES___LOCALE_T_H;
    }
    private static final int TIME_UTC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define TIME_UTC 1
     * }
     */
    public static int TIME_UTC() {
        return TIME_UTC;
    }
    private static final int HAVE_LINUX_TIME_TYPES_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define HAVE_LINUX_TIME_TYPES_H 1
     * }
     */
    public static int HAVE_LINUX_TIME_TYPES_H() {
        return HAVE_LINUX_TIME_TYPES_H;
    }
    private static final int _FCNTL_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _FCNTL_H 1
     * }
     */
    public static int _FCNTL_H() {
        return _FCNTL_H;
    }
    private static final int __O_LARGEFILE = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __O_LARGEFILE 0
     * }
     */
    public static int __O_LARGEFILE() {
        return __O_LARGEFILE;
    }
    private static final int F_GETLK64 = (int)5L;

    /**
     * {@snippet lang=c :
     * #define F_GETLK64 5
     * }
     */
    public static int F_GETLK64() {
        return F_GETLK64;
    }
    private static final int F_SETLK64 = (int)6L;

    /**
     * {@snippet lang=c :
     * #define F_SETLK64 6
     * }
     */
    public static int F_SETLK64() {
        return F_SETLK64;
    }
    private static final int F_SETLKW64 = (int)7L;

    /**
     * {@snippet lang=c :
     * #define F_SETLKW64 7
     * }
     */
    public static int F_SETLKW64() {
        return F_SETLKW64;
    }
    private static final int O_ACCMODE = (int)3L;

    /**
     * {@snippet lang=c :
     * #define O_ACCMODE 3
     * }
     */
    public static int O_ACCMODE() {
        return O_ACCMODE;
    }
    private static final int O_RDONLY = (int)0L;

    /**
     * {@snippet lang=c :
     * #define O_RDONLY 0
     * }
     */
    public static int O_RDONLY() {
        return O_RDONLY;
    }
    private static final int O_WRONLY = (int)1L;

    /**
     * {@snippet lang=c :
     * #define O_WRONLY 1
     * }
     */
    public static int O_WRONLY() {
        return O_WRONLY;
    }
    private static final int O_RDWR = (int)2L;

    /**
     * {@snippet lang=c :
     * #define O_RDWR 2
     * }
     */
    public static int O_RDWR() {
        return O_RDWR;
    }
    private static final int O_CREAT = (int)64L;

    /**
     * {@snippet lang=c :
     * #define O_CREAT 64
     * }
     */
    public static int O_CREAT() {
        return O_CREAT;
    }
    private static final int O_EXCL = (int)128L;

    /**
     * {@snippet lang=c :
     * #define O_EXCL 128
     * }
     */
    public static int O_EXCL() {
        return O_EXCL;
    }
    private static final int O_NOCTTY = (int)256L;

    /**
     * {@snippet lang=c :
     * #define O_NOCTTY 256
     * }
     */
    public static int O_NOCTTY() {
        return O_NOCTTY;
    }
    private static final int O_TRUNC = (int)512L;

    /**
     * {@snippet lang=c :
     * #define O_TRUNC 512
     * }
     */
    public static int O_TRUNC() {
        return O_TRUNC;
    }
    private static final int O_APPEND = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define O_APPEND 1024
     * }
     */
    public static int O_APPEND() {
        return O_APPEND;
    }
    private static final int O_NONBLOCK = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define O_NONBLOCK 2048
     * }
     */
    public static int O_NONBLOCK() {
        return O_NONBLOCK;
    }
    private static final int O_SYNC = (int)1052672L;

    /**
     * {@snippet lang=c :
     * #define O_SYNC 1052672
     * }
     */
    public static int O_SYNC() {
        return O_SYNC;
    }
    private static final int O_ASYNC = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define O_ASYNC 8192
     * }
     */
    public static int O_ASYNC() {
        return O_ASYNC;
    }
    private static final int __O_DIRECTORY = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define __O_DIRECTORY 65536
     * }
     */
    public static int __O_DIRECTORY() {
        return __O_DIRECTORY;
    }
    private static final int __O_NOFOLLOW = (int)131072L;

    /**
     * {@snippet lang=c :
     * #define __O_NOFOLLOW 131072
     * }
     */
    public static int __O_NOFOLLOW() {
        return __O_NOFOLLOW;
    }
    private static final int __O_CLOEXEC = (int)524288L;

    /**
     * {@snippet lang=c :
     * #define __O_CLOEXEC 524288
     * }
     */
    public static int __O_CLOEXEC() {
        return __O_CLOEXEC;
    }
    private static final int __O_DIRECT = (int)16384L;

    /**
     * {@snippet lang=c :
     * #define __O_DIRECT 16384
     * }
     */
    public static int __O_DIRECT() {
        return __O_DIRECT;
    }
    private static final int __O_NOATIME = (int)262144L;

    /**
     * {@snippet lang=c :
     * #define __O_NOATIME 262144
     * }
     */
    public static int __O_NOATIME() {
        return __O_NOATIME;
    }
    private static final int __O_PATH = (int)2097152L;

    /**
     * {@snippet lang=c :
     * #define __O_PATH 2097152
     * }
     */
    public static int __O_PATH() {
        return __O_PATH;
    }
    private static final int __O_DSYNC = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define __O_DSYNC 4096
     * }
     */
    public static int __O_DSYNC() {
        return __O_DSYNC;
    }
    private static final int F_GETLK = (int)5L;

    /**
     * {@snippet lang=c :
     * #define F_GETLK 5
     * }
     */
    public static int F_GETLK() {
        return F_GETLK;
    }
    private static final int F_SETLK = (int)6L;

    /**
     * {@snippet lang=c :
     * #define F_SETLK 6
     * }
     */
    public static int F_SETLK() {
        return F_SETLK;
    }
    private static final int F_SETLKW = (int)7L;

    /**
     * {@snippet lang=c :
     * #define F_SETLKW 7
     * }
     */
    public static int F_SETLKW() {
        return F_SETLKW;
    }
    private static final int F_DUPFD = (int)0L;

    /**
     * {@snippet lang=c :
     * #define F_DUPFD 0
     * }
     */
    public static int F_DUPFD() {
        return F_DUPFD;
    }
    private static final int F_GETFD = (int)1L;

    /**
     * {@snippet lang=c :
     * #define F_GETFD 1
     * }
     */
    public static int F_GETFD() {
        return F_GETFD;
    }
    private static final int F_SETFD = (int)2L;

    /**
     * {@snippet lang=c :
     * #define F_SETFD 2
     * }
     */
    public static int F_SETFD() {
        return F_SETFD;
    }
    private static final int F_GETFL = (int)3L;

    /**
     * {@snippet lang=c :
     * #define F_GETFL 3
     * }
     */
    public static int F_GETFL() {
        return F_GETFL;
    }
    private static final int F_SETFL = (int)4L;

    /**
     * {@snippet lang=c :
     * #define F_SETFL 4
     * }
     */
    public static int F_SETFL() {
        return F_SETFL;
    }
    private static final int __F_SETOWN = (int)8L;

    /**
     * {@snippet lang=c :
     * #define __F_SETOWN 8
     * }
     */
    public static int __F_SETOWN() {
        return __F_SETOWN;
    }
    private static final int __F_GETOWN = (int)9L;

    /**
     * {@snippet lang=c :
     * #define __F_GETOWN 9
     * }
     */
    public static int __F_GETOWN() {
        return __F_GETOWN;
    }
    private static final int __F_SETSIG = (int)10L;

    /**
     * {@snippet lang=c :
     * #define __F_SETSIG 10
     * }
     */
    public static int __F_SETSIG() {
        return __F_SETSIG;
    }
    private static final int __F_GETSIG = (int)11L;

    /**
     * {@snippet lang=c :
     * #define __F_GETSIG 11
     * }
     */
    public static int __F_GETSIG() {
        return __F_GETSIG;
    }
    private static final int __F_SETOWN_EX = (int)15L;

    /**
     * {@snippet lang=c :
     * #define __F_SETOWN_EX 15
     * }
     */
    public static int __F_SETOWN_EX() {
        return __F_SETOWN_EX;
    }
    private static final int __F_GETOWN_EX = (int)16L;

    /**
     * {@snippet lang=c :
     * #define __F_GETOWN_EX 16
     * }
     */
    public static int __F_GETOWN_EX() {
        return __F_GETOWN_EX;
    }
    private static final int F_DUPFD_CLOEXEC = (int)1030L;

    /**
     * {@snippet lang=c :
     * #define F_DUPFD_CLOEXEC 1030
     * }
     */
    public static int F_DUPFD_CLOEXEC() {
        return F_DUPFD_CLOEXEC;
    }
    private static final int FD_CLOEXEC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FD_CLOEXEC 1
     * }
     */
    public static int FD_CLOEXEC() {
        return FD_CLOEXEC;
    }
    private static final int F_RDLCK = (int)0L;

    /**
     * {@snippet lang=c :
     * #define F_RDLCK 0
     * }
     */
    public static int F_RDLCK() {
        return F_RDLCK;
    }
    private static final int F_WRLCK = (int)1L;

    /**
     * {@snippet lang=c :
     * #define F_WRLCK 1
     * }
     */
    public static int F_WRLCK() {
        return F_WRLCK;
    }
    private static final int F_UNLCK = (int)2L;

    /**
     * {@snippet lang=c :
     * #define F_UNLCK 2
     * }
     */
    public static int F_UNLCK() {
        return F_UNLCK;
    }
    private static final int F_EXLCK = (int)4L;

    /**
     * {@snippet lang=c :
     * #define F_EXLCK 4
     * }
     */
    public static int F_EXLCK() {
        return F_EXLCK;
    }
    private static final int F_SHLCK = (int)8L;

    /**
     * {@snippet lang=c :
     * #define F_SHLCK 8
     * }
     */
    public static int F_SHLCK() {
        return F_SHLCK;
    }
    private static final int LOCK_SH = (int)1L;

    /**
     * {@snippet lang=c :
     * #define LOCK_SH 1
     * }
     */
    public static int LOCK_SH() {
        return LOCK_SH;
    }
    private static final int LOCK_EX = (int)2L;

    /**
     * {@snippet lang=c :
     * #define LOCK_EX 2
     * }
     */
    public static int LOCK_EX() {
        return LOCK_EX;
    }
    private static final int LOCK_NB = (int)4L;

    /**
     * {@snippet lang=c :
     * #define LOCK_NB 4
     * }
     */
    public static int LOCK_NB() {
        return LOCK_NB;
    }
    private static final int LOCK_UN = (int)8L;

    /**
     * {@snippet lang=c :
     * #define LOCK_UN 8
     * }
     */
    public static int LOCK_UN() {
        return LOCK_UN;
    }
    private static final int __POSIX_FADV_DONTNEED = (int)4L;

    /**
     * {@snippet lang=c :
     * #define __POSIX_FADV_DONTNEED 4
     * }
     */
    public static int __POSIX_FADV_DONTNEED() {
        return __POSIX_FADV_DONTNEED;
    }
    private static final int __POSIX_FADV_NOREUSE = (int)5L;

    /**
     * {@snippet lang=c :
     * #define __POSIX_FADV_NOREUSE 5
     * }
     */
    public static int __POSIX_FADV_NOREUSE() {
        return __POSIX_FADV_NOREUSE;
    }
    private static final int POSIX_FADV_NORMAL = (int)0L;

    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_NORMAL 0
     * }
     */
    public static int POSIX_FADV_NORMAL() {
        return POSIX_FADV_NORMAL;
    }
    private static final int POSIX_FADV_RANDOM = (int)1L;

    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_RANDOM 1
     * }
     */
    public static int POSIX_FADV_RANDOM() {
        return POSIX_FADV_RANDOM;
    }
    private static final int POSIX_FADV_SEQUENTIAL = (int)2L;

    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_SEQUENTIAL 2
     * }
     */
    public static int POSIX_FADV_SEQUENTIAL() {
        return POSIX_FADV_SEQUENTIAL;
    }
    private static final int POSIX_FADV_WILLNEED = (int)3L;

    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_WILLNEED 3
     * }
     */
    public static int POSIX_FADV_WILLNEED() {
        return POSIX_FADV_WILLNEED;
    }
    private static final int AT_SYMLINK_NOFOLLOW = (int)256L;

    /**
     * {@snippet lang=c :
     * #define AT_SYMLINK_NOFOLLOW 256
     * }
     */
    public static int AT_SYMLINK_NOFOLLOW() {
        return AT_SYMLINK_NOFOLLOW;
    }
    private static final int AT_REMOVEDIR = (int)512L;

    /**
     * {@snippet lang=c :
     * #define AT_REMOVEDIR 512
     * }
     */
    public static int AT_REMOVEDIR() {
        return AT_REMOVEDIR;
    }
    private static final int AT_SYMLINK_FOLLOW = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define AT_SYMLINK_FOLLOW 1024
     * }
     */
    public static int AT_SYMLINK_FOLLOW() {
        return AT_SYMLINK_FOLLOW;
    }
    private static final int AT_EACCESS = (int)512L;

    /**
     * {@snippet lang=c :
     * #define AT_EACCESS 512
     * }
     */
    public static int AT_EACCESS() {
        return AT_EACCESS;
    }
    private static final int _BITS_STAT_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_STAT_H 1
     * }
     */
    public static int _BITS_STAT_H() {
        return _BITS_STAT_H;
    }
    private static final int _BITS_STRUCT_STAT_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_STRUCT_STAT_H 1
     * }
     */
    public static int _BITS_STRUCT_STAT_H() {
        return _BITS_STRUCT_STAT_H;
    }
    private static final int __S_IFMT = (int)61440L;

    /**
     * {@snippet lang=c :
     * #define __S_IFMT 61440
     * }
     */
    public static int __S_IFMT() {
        return __S_IFMT;
    }
    private static final int __S_IFDIR = (int)16384L;

    /**
     * {@snippet lang=c :
     * #define __S_IFDIR 16384
     * }
     */
    public static int __S_IFDIR() {
        return __S_IFDIR;
    }
    private static final int __S_IFCHR = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define __S_IFCHR 8192
     * }
     */
    public static int __S_IFCHR() {
        return __S_IFCHR;
    }
    private static final int __S_IFBLK = (int)24576L;

    /**
     * {@snippet lang=c :
     * #define __S_IFBLK 24576
     * }
     */
    public static int __S_IFBLK() {
        return __S_IFBLK;
    }
    private static final int __S_IFREG = (int)32768L;

    /**
     * {@snippet lang=c :
     * #define __S_IFREG 32768
     * }
     */
    public static int __S_IFREG() {
        return __S_IFREG;
    }
    private static final int __S_IFIFO = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define __S_IFIFO 4096
     * }
     */
    public static int __S_IFIFO() {
        return __S_IFIFO;
    }
    private static final int __S_IFLNK = (int)40960L;

    /**
     * {@snippet lang=c :
     * #define __S_IFLNK 40960
     * }
     */
    public static int __S_IFLNK() {
        return __S_IFLNK;
    }
    private static final int __S_IFSOCK = (int)49152L;

    /**
     * {@snippet lang=c :
     * #define __S_IFSOCK 49152
     * }
     */
    public static int __S_IFSOCK() {
        return __S_IFSOCK;
    }
    private static final int __S_ISUID = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define __S_ISUID 2048
     * }
     */
    public static int __S_ISUID() {
        return __S_ISUID;
    }
    private static final int __S_ISGID = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define __S_ISGID 1024
     * }
     */
    public static int __S_ISGID() {
        return __S_ISGID;
    }
    private static final int __S_ISVTX = (int)512L;

    /**
     * {@snippet lang=c :
     * #define __S_ISVTX 512
     * }
     */
    public static int __S_ISVTX() {
        return __S_ISVTX;
    }
    private static final int __S_IREAD = (int)256L;

    /**
     * {@snippet lang=c :
     * #define __S_IREAD 256
     * }
     */
    public static int __S_IREAD() {
        return __S_IREAD;
    }
    private static final int __S_IWRITE = (int)128L;

    /**
     * {@snippet lang=c :
     * #define __S_IWRITE 128
     * }
     */
    public static int __S_IWRITE() {
        return __S_IWRITE;
    }
    private static final int __S_IEXEC = (int)64L;

    /**
     * {@snippet lang=c :
     * #define __S_IEXEC 64
     * }
     */
    public static int __S_IEXEC() {
        return __S_IEXEC;
    }
    private static final int R_OK = (int)4L;

    /**
     * {@snippet lang=c :
     * #define R_OK 4
     * }
     */
    public static int R_OK() {
        return R_OK;
    }
    private static final int W_OK = (int)2L;

    /**
     * {@snippet lang=c :
     * #define W_OK 2
     * }
     */
    public static int W_OK() {
        return W_OK;
    }
    private static final int X_OK = (int)1L;

    /**
     * {@snippet lang=c :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return X_OK;
    }
    private static final int F_OK = (int)0L;

    /**
     * {@snippet lang=c :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return F_OK;
    }
    private static final int SEEK_SET = (int)0L;

    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;

    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;

    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int F_ULOCK = (int)0L;

    /**
     * {@snippet lang=c :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return F_ULOCK;
    }
    private static final int F_LOCK = (int)1L;

    /**
     * {@snippet lang=c :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return F_LOCK;
    }
    private static final int F_TLOCK = (int)2L;

    /**
     * {@snippet lang=c :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return F_TLOCK;
    }
    private static final int F_TEST = (int)3L;

    /**
     * {@snippet lang=c :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return F_TEST;
    }
    private static final int _SYS_UIO_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _SYS_UIO_H 1
     * }
     */
    public static int _SYS_UIO_H() {
        return _SYS_UIO_H;
    }
    private static final int _SYS_TYPES_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return _SYS_TYPES_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int __BIT_TYPES_DEFINED__ = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return __BIT_TYPES_DEFINED__;
    }
    private static final int _ENDIAN_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return _ENDIAN_H;
    }
    private static final int _BITS_BYTESWAP_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return _BITS_BYTESWAP_H;
    }
    private static final int _BITS_UINTN_IDENTITY_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return _BITS_UINTN_IDENTITY_H;
    }
    private static final int _SYS_SELECT_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return _SYS_SELECT_H;
    }
    private static final int __sigset_t_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return __sigset_t_defined;
    }
    private static final int __timeval_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return __timeval_defined;
    }
    private static final int _BITS_PTHREADTYPES_COMMON_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return _BITS_PTHREADTYPES_COMMON_H;
    }
    private static final int _THREAD_SHARED_TYPES_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return _THREAD_SHARED_TYPES_H;
    }
    private static final int _BITS_PTHREADTYPES_ARCH_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return _BITS_PTHREADTYPES_ARCH_H;
    }
    private static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return __SIZEOF_PTHREAD_MUTEX_T;
    }
    private static final int __SIZEOF_PTHREAD_ATTR_T = (int)56L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return __SIZEOF_PTHREAD_ATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return __SIZEOF_PTHREAD_RWLOCK_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return __SIZEOF_PTHREAD_BARRIER_T;
    }
    private static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return __SIZEOF_PTHREAD_MUTEXATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_COND_T = (int)48L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return __SIZEOF_PTHREAD_COND_T;
    }
    private static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return __SIZEOF_PTHREAD_CONDATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return __SIZEOF_PTHREAD_RWLOCKATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4L;

    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return __SIZEOF_PTHREAD_BARRIERATTR_T;
    }
    private static final int _THREAD_MUTEX_INTERNAL_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return _THREAD_MUTEX_INTERNAL_H;
    }
    private static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return __PTHREAD_MUTEX_HAVE_PREV;
    }
    private static final int __have_pthread_attr_t = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return __have_pthread_attr_t;
    }
    private static final int __iovec_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __iovec_defined 1
     * }
     */
    public static int __iovec_defined() {
        return __iovec_defined;
    }
    private static final int _BITS_UIO_LIM_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_UIO_LIM_H 1
     * }
     */
    public static int _BITS_UIO_LIM_H() {
        return _BITS_UIO_LIM_H;
    }
    private static final int __IOV_MAX = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define __IOV_MAX 1024
     * }
     */
    public static int __IOV_MAX() {
        return __IOV_MAX;
    }
    private static final int NR_OPEN = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define NR_OPEN 1024
     * }
     */
    public static int NR_OPEN() {
        return NR_OPEN;
    }
    private static final int NGROUPS_MAX = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define NGROUPS_MAX 65536
     * }
     */
    public static int NGROUPS_MAX() {
        return NGROUPS_MAX;
    }
    private static final int ARG_MAX = (int)131072L;

    /**
     * {@snippet lang=c :
     * #define ARG_MAX 131072
     * }
     */
    public static int ARG_MAX() {
        return ARG_MAX;
    }
    private static final int LINK_MAX = (int)127L;

    /**
     * {@snippet lang=c :
     * #define LINK_MAX 127
     * }
     */
    public static int LINK_MAX() {
        return LINK_MAX;
    }
    private static final int MAX_CANON = (int)255L;

    /**
     * {@snippet lang=c :
     * #define MAX_CANON 255
     * }
     */
    public static int MAX_CANON() {
        return MAX_CANON;
    }
    private static final int MAX_INPUT = (int)255L;

    /**
     * {@snippet lang=c :
     * #define MAX_INPUT 255
     * }
     */
    public static int MAX_INPUT() {
        return MAX_INPUT;
    }
    private static final int NAME_MAX = (int)255L;

    /**
     * {@snippet lang=c :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return NAME_MAX;
    }
    private static final int PATH_MAX = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return PATH_MAX;
    }
    private static final int PIPE_BUF = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define PIPE_BUF 4096
     * }
     */
    public static int PIPE_BUF() {
        return PIPE_BUF;
    }
    private static final int XATTR_NAME_MAX = (int)255L;

    /**
     * {@snippet lang=c :
     * #define XATTR_NAME_MAX 255
     * }
     */
    public static int XATTR_NAME_MAX() {
        return XATTR_NAME_MAX;
    }
    private static final int XATTR_SIZE_MAX = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define XATTR_SIZE_MAX 65536
     * }
     */
    public static int XATTR_SIZE_MAX() {
        return XATTR_SIZE_MAX;
    }
    private static final int XATTR_LIST_MAX = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define XATTR_LIST_MAX 65536
     * }
     */
    public static int XATTR_LIST_MAX() {
        return XATTR_LIST_MAX;
    }
    private static final int RTSIG_MAX = (int)32L;

    /**
     * {@snippet lang=c :
     * #define RTSIG_MAX 32
     * }
     */
    public static int RTSIG_MAX() {
        return RTSIG_MAX;
    }
    private static final int _IOC_NRBITS = (int)8L;

    /**
     * {@snippet lang=c :
     * #define _IOC_NRBITS 8
     * }
     */
    public static int _IOC_NRBITS() {
        return _IOC_NRBITS;
    }
    private static final int _IOC_TYPEBITS = (int)8L;

    /**
     * {@snippet lang=c :
     * #define _IOC_TYPEBITS 8
     * }
     */
    public static int _IOC_TYPEBITS() {
        return _IOC_TYPEBITS;
    }
    private static final int _IOC_SIZEBITS = (int)14L;

    /**
     * {@snippet lang=c :
     * #define _IOC_SIZEBITS 14
     * }
     */
    public static int _IOC_SIZEBITS() {
        return _IOC_SIZEBITS;
    }
    private static final int _IOC_DIRBITS = (int)2L;

    /**
     * {@snippet lang=c :
     * #define _IOC_DIRBITS 2
     * }
     */
    public static int _IOC_DIRBITS() {
        return _IOC_DIRBITS;
    }
    private static final int _IOC_NRSHIFT = (int)0L;

    /**
     * {@snippet lang=c :
     * #define _IOC_NRSHIFT 0
     * }
     */
    public static int _IOC_NRSHIFT() {
        return _IOC_NRSHIFT;
    }
    private static final int __BITS_PER_LONG = (int)64L;

    /**
     * {@snippet lang=c :
     * #define __BITS_PER_LONG 64
     * }
     */
    public static int __BITS_PER_LONG() {
        return __BITS_PER_LONG;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_4 = (int)0L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_4 0
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_4() {
        return FSCRYPT_POLICY_FLAGS_PAD_4;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_8 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_8 1
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_8() {
        return FSCRYPT_POLICY_FLAGS_PAD_8;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_16 = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_16 2
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_16() {
        return FSCRYPT_POLICY_FLAGS_PAD_16;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_32 = (int)3L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_32 3
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_32() {
        return FSCRYPT_POLICY_FLAGS_PAD_32;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_MASK = (int)3L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_MASK 3
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_MASK() {
        return FSCRYPT_POLICY_FLAGS_PAD_MASK;
    }
    private static final int FSCRYPT_POLICY_FLAG_DIRECT_KEY = (int)4L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAG_DIRECT_KEY 4
     * }
     */
    public static int FSCRYPT_POLICY_FLAG_DIRECT_KEY() {
        return FSCRYPT_POLICY_FLAG_DIRECT_KEY;
    }
    private static final int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 8
     * }
     */
    public static int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64() {
        return FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64;
    }
    private static final int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 = (int)16L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 16
     * }
     */
    public static int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32() {
        return FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32;
    }
    private static final int FSCRYPT_MODE_AES_256_XTS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_256_XTS 1
     * }
     */
    public static int FSCRYPT_MODE_AES_256_XTS() {
        return FSCRYPT_MODE_AES_256_XTS;
    }
    private static final int FSCRYPT_MODE_AES_256_CTS = (int)4L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_256_CTS 4
     * }
     */
    public static int FSCRYPT_MODE_AES_256_CTS() {
        return FSCRYPT_MODE_AES_256_CTS;
    }
    private static final int FSCRYPT_MODE_AES_128_CBC = (int)5L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_128_CBC 5
     * }
     */
    public static int FSCRYPT_MODE_AES_128_CBC() {
        return FSCRYPT_MODE_AES_128_CBC;
    }
    private static final int FSCRYPT_MODE_AES_128_CTS = (int)6L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_128_CTS 6
     * }
     */
    public static int FSCRYPT_MODE_AES_128_CTS() {
        return FSCRYPT_MODE_AES_128_CTS;
    }
    private static final int FSCRYPT_MODE_SM4_XTS = (int)7L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_SM4_XTS 7
     * }
     */
    public static int FSCRYPT_MODE_SM4_XTS() {
        return FSCRYPT_MODE_SM4_XTS;
    }
    private static final int FSCRYPT_MODE_SM4_CTS = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_SM4_CTS 8
     * }
     */
    public static int FSCRYPT_MODE_SM4_CTS() {
        return FSCRYPT_MODE_SM4_CTS;
    }
    private static final int FSCRYPT_MODE_ADIANTUM = (int)9L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_ADIANTUM 9
     * }
     */
    public static int FSCRYPT_MODE_ADIANTUM() {
        return FSCRYPT_MODE_ADIANTUM;
    }
    private static final int FSCRYPT_MODE_AES_256_HCTR2 = (int)10L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_256_HCTR2 10
     * }
     */
    public static int FSCRYPT_MODE_AES_256_HCTR2() {
        return FSCRYPT_MODE_AES_256_HCTR2;
    }
    private static final int FSCRYPT_POLICY_V1 = (int)0L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_V1 0
     * }
     */
    public static int FSCRYPT_POLICY_V1() {
        return FSCRYPT_POLICY_V1;
    }
    private static final int FSCRYPT_KEY_DESCRIPTOR_SIZE = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_DESCRIPTOR_SIZE 8
     * }
     */
    public static int FSCRYPT_KEY_DESCRIPTOR_SIZE() {
        return FSCRYPT_KEY_DESCRIPTOR_SIZE;
    }
    private static final int FSCRYPT_KEY_DESC_PREFIX_SIZE = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_DESC_PREFIX_SIZE 8
     * }
     */
    public static int FSCRYPT_KEY_DESC_PREFIX_SIZE() {
        return FSCRYPT_KEY_DESC_PREFIX_SIZE;
    }
    private static final int FSCRYPT_MAX_KEY_SIZE = (int)64L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MAX_KEY_SIZE 64
     * }
     */
    public static int FSCRYPT_MAX_KEY_SIZE() {
        return FSCRYPT_MAX_KEY_SIZE;
    }
    private static final int FSCRYPT_POLICY_V2 = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_V2 2
     * }
     */
    public static int FSCRYPT_POLICY_V2() {
        return FSCRYPT_POLICY_V2;
    }
    private static final int FSCRYPT_KEY_IDENTIFIER_SIZE = (int)16L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_IDENTIFIER_SIZE 16
     * }
     */
    public static int FSCRYPT_KEY_IDENTIFIER_SIZE() {
        return FSCRYPT_KEY_IDENTIFIER_SIZE;
    }
    private static final int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR 1
     * }
     */
    public static int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR() {
        return FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR;
    }
    private static final int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER 2
     * }
     */
    public static int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER() {
        return FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER;
    }
    private static final int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY 1
     * }
     */
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY() {
        return FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY;
    }
    private static final int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS 2
     * }
     */
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS() {
        return FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS;
    }
    private static final int FSCRYPT_KEY_STATUS_ABSENT = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_ABSENT 1
     * }
     */
    public static int FSCRYPT_KEY_STATUS_ABSENT() {
        return FSCRYPT_KEY_STATUS_ABSENT;
    }
    private static final int FSCRYPT_KEY_STATUS_PRESENT = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_PRESENT 2
     * }
     */
    public static int FSCRYPT_KEY_STATUS_PRESENT() {
        return FSCRYPT_KEY_STATUS_PRESENT;
    }
    private static final int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED = (int)3L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED 3
     * }
     */
    public static int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED() {
        return FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED;
    }
    private static final int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF 1
     * }
     */
    public static int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF() {
        return FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF;
    }
    private static final int FS_POLICY_FLAGS_VALID = (int)7L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_VALID 7
     * }
     */
    public static int FS_POLICY_FLAGS_VALID() {
        return FS_POLICY_FLAGS_VALID;
    }
    private static final int FS_ENCRYPTION_MODE_INVALID = (int)0L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_INVALID 0
     * }
     */
    public static int FS_ENCRYPTION_MODE_INVALID() {
        return FS_ENCRYPTION_MODE_INVALID;
    }
    private static final int FS_ENCRYPTION_MODE_AES_256_GCM = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_256_GCM 2
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_256_GCM() {
        return FS_ENCRYPTION_MODE_AES_256_GCM;
    }
    private static final int FS_ENCRYPTION_MODE_AES_256_CBC = (int)3L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_256_CBC 3
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_256_CBC() {
        return FS_ENCRYPTION_MODE_AES_256_CBC;
    }
    private static final int MS_RDONLY = (int)1L;

    /**
     * {@snippet lang=c :
     * #define MS_RDONLY 1
     * }
     */
    public static int MS_RDONLY() {
        return MS_RDONLY;
    }
    private static final int MS_NOSUID = (int)2L;

    /**
     * {@snippet lang=c :
     * #define MS_NOSUID 2
     * }
     */
    public static int MS_NOSUID() {
        return MS_NOSUID;
    }
    private static final int MS_NODEV = (int)4L;

    /**
     * {@snippet lang=c :
     * #define MS_NODEV 4
     * }
     */
    public static int MS_NODEV() {
        return MS_NODEV;
    }
    private static final int MS_NOEXEC = (int)8L;

    /**
     * {@snippet lang=c :
     * #define MS_NOEXEC 8
     * }
     */
    public static int MS_NOEXEC() {
        return MS_NOEXEC;
    }
    private static final int MS_SYNCHRONOUS = (int)16L;

    /**
     * {@snippet lang=c :
     * #define MS_SYNCHRONOUS 16
     * }
     */
    public static int MS_SYNCHRONOUS() {
        return MS_SYNCHRONOUS;
    }
    private static final int MS_REMOUNT = (int)32L;

    /**
     * {@snippet lang=c :
     * #define MS_REMOUNT 32
     * }
     */
    public static int MS_REMOUNT() {
        return MS_REMOUNT;
    }
    private static final int MS_MANDLOCK = (int)64L;

    /**
     * {@snippet lang=c :
     * #define MS_MANDLOCK 64
     * }
     */
    public static int MS_MANDLOCK() {
        return MS_MANDLOCK;
    }
    private static final int MS_DIRSYNC = (int)128L;

    /**
     * {@snippet lang=c :
     * #define MS_DIRSYNC 128
     * }
     */
    public static int MS_DIRSYNC() {
        return MS_DIRSYNC;
    }
    private static final int MS_NOSYMFOLLOW = (int)256L;

    /**
     * {@snippet lang=c :
     * #define MS_NOSYMFOLLOW 256
     * }
     */
    public static int MS_NOSYMFOLLOW() {
        return MS_NOSYMFOLLOW;
    }
    private static final int MS_NOATIME = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define MS_NOATIME 1024
     * }
     */
    public static int MS_NOATIME() {
        return MS_NOATIME;
    }
    private static final int MS_NODIRATIME = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define MS_NODIRATIME 2048
     * }
     */
    public static int MS_NODIRATIME() {
        return MS_NODIRATIME;
    }
    private static final int MS_BIND = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define MS_BIND 4096
     * }
     */
    public static int MS_BIND() {
        return MS_BIND;
    }
    private static final int MS_MOVE = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define MS_MOVE 8192
     * }
     */
    public static int MS_MOVE() {
        return MS_MOVE;
    }
    private static final int MS_REC = (int)16384L;

    /**
     * {@snippet lang=c :
     * #define MS_REC 16384
     * }
     */
    public static int MS_REC() {
        return MS_REC;
    }
    private static final int MS_VERBOSE = (int)32768L;

    /**
     * {@snippet lang=c :
     * #define MS_VERBOSE 32768
     * }
     */
    public static int MS_VERBOSE() {
        return MS_VERBOSE;
    }
    private static final int MS_SILENT = (int)32768L;

    /**
     * {@snippet lang=c :
     * #define MS_SILENT 32768
     * }
     */
    public static int MS_SILENT() {
        return MS_SILENT;
    }
    private static final int OPEN_TREE_CLONE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define OPEN_TREE_CLONE 1
     * }
     */
    public static int OPEN_TREE_CLONE() {
        return OPEN_TREE_CLONE;
    }
    private static final int MOVE_MOUNT_F_SYMLINKS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_F_SYMLINKS 1
     * }
     */
    public static int MOVE_MOUNT_F_SYMLINKS() {
        return MOVE_MOUNT_F_SYMLINKS;
    }
    private static final int MOVE_MOUNT_F_AUTOMOUNTS = (int)2L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_F_AUTOMOUNTS 2
     * }
     */
    public static int MOVE_MOUNT_F_AUTOMOUNTS() {
        return MOVE_MOUNT_F_AUTOMOUNTS;
    }
    private static final int MOVE_MOUNT_F_EMPTY_PATH = (int)4L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_F_EMPTY_PATH 4
     * }
     */
    public static int MOVE_MOUNT_F_EMPTY_PATH() {
        return MOVE_MOUNT_F_EMPTY_PATH;
    }
    private static final int MOVE_MOUNT_T_SYMLINKS = (int)16L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_T_SYMLINKS 16
     * }
     */
    public static int MOVE_MOUNT_T_SYMLINKS() {
        return MOVE_MOUNT_T_SYMLINKS;
    }
    private static final int MOVE_MOUNT_T_AUTOMOUNTS = (int)32L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_T_AUTOMOUNTS 32
     * }
     */
    public static int MOVE_MOUNT_T_AUTOMOUNTS() {
        return MOVE_MOUNT_T_AUTOMOUNTS;
    }
    private static final int MOVE_MOUNT_T_EMPTY_PATH = (int)64L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_T_EMPTY_PATH 64
     * }
     */
    public static int MOVE_MOUNT_T_EMPTY_PATH() {
        return MOVE_MOUNT_T_EMPTY_PATH;
    }
    private static final int MOVE_MOUNT_SET_GROUP = (int)256L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_SET_GROUP 256
     * }
     */
    public static int MOVE_MOUNT_SET_GROUP() {
        return MOVE_MOUNT_SET_GROUP;
    }
    private static final int MOVE_MOUNT__MASK = (int)375L;

    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT__MASK 375
     * }
     */
    public static int MOVE_MOUNT__MASK() {
        return MOVE_MOUNT__MASK;
    }
    private static final int FSOPEN_CLOEXEC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSOPEN_CLOEXEC 1
     * }
     */
    public static int FSOPEN_CLOEXEC() {
        return FSOPEN_CLOEXEC;
    }
    private static final int FSPICK_CLOEXEC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSPICK_CLOEXEC 1
     * }
     */
    public static int FSPICK_CLOEXEC() {
        return FSPICK_CLOEXEC;
    }
    private static final int FSPICK_SYMLINK_NOFOLLOW = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FSPICK_SYMLINK_NOFOLLOW 2
     * }
     */
    public static int FSPICK_SYMLINK_NOFOLLOW() {
        return FSPICK_SYMLINK_NOFOLLOW;
    }
    private static final int FSPICK_NO_AUTOMOUNT = (int)4L;

    /**
     * {@snippet lang=c :
     * #define FSPICK_NO_AUTOMOUNT 4
     * }
     */
    public static int FSPICK_NO_AUTOMOUNT() {
        return FSPICK_NO_AUTOMOUNT;
    }
    private static final int FSPICK_EMPTY_PATH = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FSPICK_EMPTY_PATH 8
     * }
     */
    public static int FSPICK_EMPTY_PATH() {
        return FSPICK_EMPTY_PATH;
    }
    private static final int FSMOUNT_CLOEXEC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FSMOUNT_CLOEXEC 1
     * }
     */
    public static int FSMOUNT_CLOEXEC() {
        return FSMOUNT_CLOEXEC;
    }
    private static final int MOUNT_ATTR_RDONLY = (int)1L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_RDONLY 1
     * }
     */
    public static int MOUNT_ATTR_RDONLY() {
        return MOUNT_ATTR_RDONLY;
    }
    private static final int MOUNT_ATTR_NOSUID = (int)2L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOSUID 2
     * }
     */
    public static int MOUNT_ATTR_NOSUID() {
        return MOUNT_ATTR_NOSUID;
    }
    private static final int MOUNT_ATTR_NODEV = (int)4L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NODEV 4
     * }
     */
    public static int MOUNT_ATTR_NODEV() {
        return MOUNT_ATTR_NODEV;
    }
    private static final int MOUNT_ATTR_NOEXEC = (int)8L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOEXEC 8
     * }
     */
    public static int MOUNT_ATTR_NOEXEC() {
        return MOUNT_ATTR_NOEXEC;
    }
    private static final int MOUNT_ATTR__ATIME = (int)112L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR__ATIME 112
     * }
     */
    public static int MOUNT_ATTR__ATIME() {
        return MOUNT_ATTR__ATIME;
    }
    private static final int MOUNT_ATTR_RELATIME = (int)0L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_RELATIME 0
     * }
     */
    public static int MOUNT_ATTR_RELATIME() {
        return MOUNT_ATTR_RELATIME;
    }
    private static final int MOUNT_ATTR_NOATIME = (int)16L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOATIME 16
     * }
     */
    public static int MOUNT_ATTR_NOATIME() {
        return MOUNT_ATTR_NOATIME;
    }
    private static final int MOUNT_ATTR_STRICTATIME = (int)32L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_STRICTATIME 32
     * }
     */
    public static int MOUNT_ATTR_STRICTATIME() {
        return MOUNT_ATTR_STRICTATIME;
    }
    private static final int MOUNT_ATTR_NODIRATIME = (int)128L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NODIRATIME 128
     * }
     */
    public static int MOUNT_ATTR_NODIRATIME() {
        return MOUNT_ATTR_NODIRATIME;
    }
    private static final int MOUNT_ATTR_IDMAP = (int)1048576L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_IDMAP 1048576
     * }
     */
    public static int MOUNT_ATTR_IDMAP() {
        return MOUNT_ATTR_IDMAP;
    }
    private static final int MOUNT_ATTR_NOSYMFOLLOW = (int)2097152L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOSYMFOLLOW 2097152
     * }
     */
    public static int MOUNT_ATTR_NOSYMFOLLOW() {
        return MOUNT_ATTR_NOSYMFOLLOW;
    }
    private static final int MOUNT_ATTR_SIZE_VER0 = (int)32L;

    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_SIZE_VER0 32
     * }
     */
    public static int MOUNT_ATTR_SIZE_VER0() {
        return MOUNT_ATTR_SIZE_VER0;
    }
    private static final int INR_OPEN_CUR = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define INR_OPEN_CUR 1024
     * }
     */
    public static int INR_OPEN_CUR() {
        return INR_OPEN_CUR;
    }
    private static final int INR_OPEN_MAX = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define INR_OPEN_MAX 4096
     * }
     */
    public static int INR_OPEN_MAX() {
        return INR_OPEN_MAX;
    }
    private static final int BLOCK_SIZE_BITS = (int)10L;

    /**
     * {@snippet lang=c :
     * #define BLOCK_SIZE_BITS 10
     * }
     */
    public static int BLOCK_SIZE_BITS() {
        return BLOCK_SIZE_BITS;
    }
    private static final int SEEK_DATA = (int)3L;

    /**
     * {@snippet lang=c :
     * #define SEEK_DATA 3
     * }
     */
    public static int SEEK_DATA() {
        return SEEK_DATA;
    }
    private static final int SEEK_HOLE = (int)4L;

    /**
     * {@snippet lang=c :
     * #define SEEK_HOLE 4
     * }
     */
    public static int SEEK_HOLE() {
        return SEEK_HOLE;
    }
    private static final int FILE_DEDUPE_RANGE_SAME = (int)0L;

    /**
     * {@snippet lang=c :
     * #define FILE_DEDUPE_RANGE_SAME 0
     * }
     */
    public static int FILE_DEDUPE_RANGE_SAME() {
        return FILE_DEDUPE_RANGE_SAME;
    }
    private static final int FILE_DEDUPE_RANGE_DIFFERS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FILE_DEDUPE_RANGE_DIFFERS 1
     * }
     */
    public static int FILE_DEDUPE_RANGE_DIFFERS() {
        return FILE_DEDUPE_RANGE_DIFFERS;
    }
    private static final int NR_FILE = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define NR_FILE 8192
     * }
     */
    public static int NR_FILE() {
        return NR_FILE;
    }
    private static final int FS_XFLAG_REALTIME = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_REALTIME 1
     * }
     */
    public static int FS_XFLAG_REALTIME() {
        return FS_XFLAG_REALTIME;
    }
    private static final int FS_XFLAG_PREALLOC = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_PREALLOC 2
     * }
     */
    public static int FS_XFLAG_PREALLOC() {
        return FS_XFLAG_PREALLOC;
    }
    private static final int FS_XFLAG_IMMUTABLE = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_IMMUTABLE 8
     * }
     */
    public static int FS_XFLAG_IMMUTABLE() {
        return FS_XFLAG_IMMUTABLE;
    }
    private static final int FS_XFLAG_APPEND = (int)16L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_APPEND 16
     * }
     */
    public static int FS_XFLAG_APPEND() {
        return FS_XFLAG_APPEND;
    }
    private static final int FS_XFLAG_SYNC = (int)32L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_SYNC 32
     * }
     */
    public static int FS_XFLAG_SYNC() {
        return FS_XFLAG_SYNC;
    }
    private static final int FS_XFLAG_NOATIME = (int)64L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NOATIME 64
     * }
     */
    public static int FS_XFLAG_NOATIME() {
        return FS_XFLAG_NOATIME;
    }
    private static final int FS_XFLAG_NODUMP = (int)128L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NODUMP 128
     * }
     */
    public static int FS_XFLAG_NODUMP() {
        return FS_XFLAG_NODUMP;
    }
    private static final int FS_XFLAG_RTINHERIT = (int)256L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_RTINHERIT 256
     * }
     */
    public static int FS_XFLAG_RTINHERIT() {
        return FS_XFLAG_RTINHERIT;
    }
    private static final int FS_XFLAG_PROJINHERIT = (int)512L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_PROJINHERIT 512
     * }
     */
    public static int FS_XFLAG_PROJINHERIT() {
        return FS_XFLAG_PROJINHERIT;
    }
    private static final int FS_XFLAG_NOSYMLINKS = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NOSYMLINKS 1024
     * }
     */
    public static int FS_XFLAG_NOSYMLINKS() {
        return FS_XFLAG_NOSYMLINKS;
    }
    private static final int FS_XFLAG_EXTSIZE = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_EXTSIZE 2048
     * }
     */
    public static int FS_XFLAG_EXTSIZE() {
        return FS_XFLAG_EXTSIZE;
    }
    private static final int FS_XFLAG_EXTSZINHERIT = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_EXTSZINHERIT 4096
     * }
     */
    public static int FS_XFLAG_EXTSZINHERIT() {
        return FS_XFLAG_EXTSZINHERIT;
    }
    private static final int FS_XFLAG_NODEFRAG = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NODEFRAG 8192
     * }
     */
    public static int FS_XFLAG_NODEFRAG() {
        return FS_XFLAG_NODEFRAG;
    }
    private static final int FS_XFLAG_FILESTREAM = (int)16384L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_FILESTREAM 16384
     * }
     */
    public static int FS_XFLAG_FILESTREAM() {
        return FS_XFLAG_FILESTREAM;
    }
    private static final int FS_XFLAG_DAX = (int)32768L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_DAX 32768
     * }
     */
    public static int FS_XFLAG_DAX() {
        return FS_XFLAG_DAX;
    }
    private static final int FS_XFLAG_COWEXTSIZE = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_COWEXTSIZE 65536
     * }
     */
    public static int FS_XFLAG_COWEXTSIZE() {
        return FS_XFLAG_COWEXTSIZE;
    }
    private static final int BMAP_IOCTL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define BMAP_IOCTL 1
     * }
     */
    public static int BMAP_IOCTL() {
        return BMAP_IOCTL;
    }
    private static final int FSLABEL_MAX = (int)256L;

    /**
     * {@snippet lang=c :
     * #define FSLABEL_MAX 256
     * }
     */
    public static int FSLABEL_MAX() {
        return FSLABEL_MAX;
    }
    private static final int FS_SECRM_FL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FS_SECRM_FL 1
     * }
     */
    public static int FS_SECRM_FL() {
        return FS_SECRM_FL;
    }
    private static final int FS_UNRM_FL = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FS_UNRM_FL 2
     * }
     */
    public static int FS_UNRM_FL() {
        return FS_UNRM_FL;
    }
    private static final int FS_COMPR_FL = (int)4L;

    /**
     * {@snippet lang=c :
     * #define FS_COMPR_FL 4
     * }
     */
    public static int FS_COMPR_FL() {
        return FS_COMPR_FL;
    }
    private static final int FS_SYNC_FL = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FS_SYNC_FL 8
     * }
     */
    public static int FS_SYNC_FL() {
        return FS_SYNC_FL;
    }
    private static final int FS_IMMUTABLE_FL = (int)16L;

    /**
     * {@snippet lang=c :
     * #define FS_IMMUTABLE_FL 16
     * }
     */
    public static int FS_IMMUTABLE_FL() {
        return FS_IMMUTABLE_FL;
    }
    private static final int FS_APPEND_FL = (int)32L;

    /**
     * {@snippet lang=c :
     * #define FS_APPEND_FL 32
     * }
     */
    public static int FS_APPEND_FL() {
        return FS_APPEND_FL;
    }
    private static final int FS_NODUMP_FL = (int)64L;

    /**
     * {@snippet lang=c :
     * #define FS_NODUMP_FL 64
     * }
     */
    public static int FS_NODUMP_FL() {
        return FS_NODUMP_FL;
    }
    private static final int FS_NOATIME_FL = (int)128L;

    /**
     * {@snippet lang=c :
     * #define FS_NOATIME_FL 128
     * }
     */
    public static int FS_NOATIME_FL() {
        return FS_NOATIME_FL;
    }
    private static final int FS_DIRTY_FL = (int)256L;

    /**
     * {@snippet lang=c :
     * #define FS_DIRTY_FL 256
     * }
     */
    public static int FS_DIRTY_FL() {
        return FS_DIRTY_FL;
    }
    private static final int FS_COMPRBLK_FL = (int)512L;

    /**
     * {@snippet lang=c :
     * #define FS_COMPRBLK_FL 512
     * }
     */
    public static int FS_COMPRBLK_FL() {
        return FS_COMPRBLK_FL;
    }
    private static final int FS_NOCOMP_FL = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define FS_NOCOMP_FL 1024
     * }
     */
    public static int FS_NOCOMP_FL() {
        return FS_NOCOMP_FL;
    }
    private static final int FS_ENCRYPT_FL = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPT_FL 2048
     * }
     */
    public static int FS_ENCRYPT_FL() {
        return FS_ENCRYPT_FL;
    }
    private static final int FS_BTREE_FL = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define FS_BTREE_FL 4096
     * }
     */
    public static int FS_BTREE_FL() {
        return FS_BTREE_FL;
    }
    private static final int FS_INDEX_FL = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define FS_INDEX_FL 4096
     * }
     */
    public static int FS_INDEX_FL() {
        return FS_INDEX_FL;
    }
    private static final int FS_IMAGIC_FL = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define FS_IMAGIC_FL 8192
     * }
     */
    public static int FS_IMAGIC_FL() {
        return FS_IMAGIC_FL;
    }
    private static final int FS_JOURNAL_DATA_FL = (int)16384L;

    /**
     * {@snippet lang=c :
     * #define FS_JOURNAL_DATA_FL 16384
     * }
     */
    public static int FS_JOURNAL_DATA_FL() {
        return FS_JOURNAL_DATA_FL;
    }
    private static final int FS_NOTAIL_FL = (int)32768L;

    /**
     * {@snippet lang=c :
     * #define FS_NOTAIL_FL 32768
     * }
     */
    public static int FS_NOTAIL_FL() {
        return FS_NOTAIL_FL;
    }
    private static final int FS_DIRSYNC_FL = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define FS_DIRSYNC_FL 65536
     * }
     */
    public static int FS_DIRSYNC_FL() {
        return FS_DIRSYNC_FL;
    }
    private static final int FS_TOPDIR_FL = (int)131072L;

    /**
     * {@snippet lang=c :
     * #define FS_TOPDIR_FL 131072
     * }
     */
    public static int FS_TOPDIR_FL() {
        return FS_TOPDIR_FL;
    }
    private static final int FS_HUGE_FILE_FL = (int)262144L;

    /**
     * {@snippet lang=c :
     * #define FS_HUGE_FILE_FL 262144
     * }
     */
    public static int FS_HUGE_FILE_FL() {
        return FS_HUGE_FILE_FL;
    }
    private static final int FS_EXTENT_FL = (int)524288L;

    /**
     * {@snippet lang=c :
     * #define FS_EXTENT_FL 524288
     * }
     */
    public static int FS_EXTENT_FL() {
        return FS_EXTENT_FL;
    }
    private static final int FS_VERITY_FL = (int)1048576L;

    /**
     * {@snippet lang=c :
     * #define FS_VERITY_FL 1048576
     * }
     */
    public static int FS_VERITY_FL() {
        return FS_VERITY_FL;
    }
    private static final int FS_EA_INODE_FL = (int)2097152L;

    /**
     * {@snippet lang=c :
     * #define FS_EA_INODE_FL 2097152
     * }
     */
    public static int FS_EA_INODE_FL() {
        return FS_EA_INODE_FL;
    }
    private static final int FS_EOFBLOCKS_FL = (int)4194304L;

    /**
     * {@snippet lang=c :
     * #define FS_EOFBLOCKS_FL 4194304
     * }
     */
    public static int FS_EOFBLOCKS_FL() {
        return FS_EOFBLOCKS_FL;
    }
    private static final int FS_NOCOW_FL = (int)8388608L;

    /**
     * {@snippet lang=c :
     * #define FS_NOCOW_FL 8388608
     * }
     */
    public static int FS_NOCOW_FL() {
        return FS_NOCOW_FL;
    }
    private static final int FS_DAX_FL = (int)33554432L;

    /**
     * {@snippet lang=c :
     * #define FS_DAX_FL 33554432
     * }
     */
    public static int FS_DAX_FL() {
        return FS_DAX_FL;
    }
    private static final int FS_INLINE_DATA_FL = (int)268435456L;

    /**
     * {@snippet lang=c :
     * #define FS_INLINE_DATA_FL 268435456
     * }
     */
    public static int FS_INLINE_DATA_FL() {
        return FS_INLINE_DATA_FL;
    }
    private static final int FS_PROJINHERIT_FL = (int)536870912L;

    /**
     * {@snippet lang=c :
     * #define FS_PROJINHERIT_FL 536870912
     * }
     */
    public static int FS_PROJINHERIT_FL() {
        return FS_PROJINHERIT_FL;
    }
    private static final int FS_CASEFOLD_FL = (int)1073741824L;

    /**
     * {@snippet lang=c :
     * #define FS_CASEFOLD_FL 1073741824
     * }
     */
    public static int FS_CASEFOLD_FL() {
        return FS_CASEFOLD_FL;
    }
    private static final int FS_FL_USER_VISIBLE = (int)253951L;

    /**
     * {@snippet lang=c :
     * #define FS_FL_USER_VISIBLE 253951
     * }
     */
    public static int FS_FL_USER_VISIBLE() {
        return FS_FL_USER_VISIBLE;
    }
    private static final int FS_FL_USER_MODIFIABLE = (int)229631L;

    /**
     * {@snippet lang=c :
     * #define FS_FL_USER_MODIFIABLE 229631
     * }
     */
    public static int FS_FL_USER_MODIFIABLE() {
        return FS_FL_USER_MODIFIABLE;
    }
    private static final int SYNC_FILE_RANGE_WAIT_BEFORE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WAIT_BEFORE 1
     * }
     */
    public static int SYNC_FILE_RANGE_WAIT_BEFORE() {
        return SYNC_FILE_RANGE_WAIT_BEFORE;
    }
    private static final int SYNC_FILE_RANGE_WRITE = (int)2L;

    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WRITE 2
     * }
     */
    public static int SYNC_FILE_RANGE_WRITE() {
        return SYNC_FILE_RANGE_WRITE;
    }
    private static final int SYNC_FILE_RANGE_WAIT_AFTER = (int)4L;

    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WAIT_AFTER 4
     * }
     */
    public static int SYNC_FILE_RANGE_WAIT_AFTER() {
        return SYNC_FILE_RANGE_WAIT_AFTER;
    }
    private static final int _SYS_SOCKET_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _SYS_SOCKET_H 1
     * }
     */
    public static int _SYS_SOCKET_H() {
        return _SYS_SOCKET_H;
    }
    private static final int PF_UNSPEC = (int)0L;

    /**
     * {@snippet lang=c :
     * #define PF_UNSPEC 0
     * }
     */
    public static int PF_UNSPEC() {
        return PF_UNSPEC;
    }
    private static final int PF_LOCAL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define PF_LOCAL 1
     * }
     */
    public static int PF_LOCAL() {
        return PF_LOCAL;
    }
    private static final int PF_INET = (int)2L;

    /**
     * {@snippet lang=c :
     * #define PF_INET 2
     * }
     */
    public static int PF_INET() {
        return PF_INET;
    }
    private static final int PF_AX25 = (int)3L;

    /**
     * {@snippet lang=c :
     * #define PF_AX25 3
     * }
     */
    public static int PF_AX25() {
        return PF_AX25;
    }
    private static final int PF_IPX = (int)4L;

    /**
     * {@snippet lang=c :
     * #define PF_IPX 4
     * }
     */
    public static int PF_IPX() {
        return PF_IPX;
    }
    private static final int PF_APPLETALK = (int)5L;

    /**
     * {@snippet lang=c :
     * #define PF_APPLETALK 5
     * }
     */
    public static int PF_APPLETALK() {
        return PF_APPLETALK;
    }
    private static final int PF_NETROM = (int)6L;

    /**
     * {@snippet lang=c :
     * #define PF_NETROM 6
     * }
     */
    public static int PF_NETROM() {
        return PF_NETROM;
    }
    private static final int PF_BRIDGE = (int)7L;

    /**
     * {@snippet lang=c :
     * #define PF_BRIDGE 7
     * }
     */
    public static int PF_BRIDGE() {
        return PF_BRIDGE;
    }
    private static final int PF_ATMPVC = (int)8L;

    /**
     * {@snippet lang=c :
     * #define PF_ATMPVC 8
     * }
     */
    public static int PF_ATMPVC() {
        return PF_ATMPVC;
    }
    private static final int PF_X25 = (int)9L;

    /**
     * {@snippet lang=c :
     * #define PF_X25 9
     * }
     */
    public static int PF_X25() {
        return PF_X25;
    }
    private static final int PF_INET6 = (int)10L;

    /**
     * {@snippet lang=c :
     * #define PF_INET6 10
     * }
     */
    public static int PF_INET6() {
        return PF_INET6;
    }
    private static final int PF_ROSE = (int)11L;

    /**
     * {@snippet lang=c :
     * #define PF_ROSE 11
     * }
     */
    public static int PF_ROSE() {
        return PF_ROSE;
    }
    private static final int PF_DECnet = (int)12L;

    /**
     * {@snippet lang=c :
     * #define PF_DECnet 12
     * }
     */
    public static int PF_DECnet() {
        return PF_DECnet;
    }
    private static final int PF_NETBEUI = (int)13L;

    /**
     * {@snippet lang=c :
     * #define PF_NETBEUI 13
     * }
     */
    public static int PF_NETBEUI() {
        return PF_NETBEUI;
    }
    private static final int PF_SECURITY = (int)14L;

    /**
     * {@snippet lang=c :
     * #define PF_SECURITY 14
     * }
     */
    public static int PF_SECURITY() {
        return PF_SECURITY;
    }
    private static final int PF_KEY = (int)15L;

    /**
     * {@snippet lang=c :
     * #define PF_KEY 15
     * }
     */
    public static int PF_KEY() {
        return PF_KEY;
    }
    private static final int PF_NETLINK = (int)16L;

    /**
     * {@snippet lang=c :
     * #define PF_NETLINK 16
     * }
     */
    public static int PF_NETLINK() {
        return PF_NETLINK;
    }
    private static final int PF_PACKET = (int)17L;

    /**
     * {@snippet lang=c :
     * #define PF_PACKET 17
     * }
     */
    public static int PF_PACKET() {
        return PF_PACKET;
    }
    private static final int PF_ASH = (int)18L;

    /**
     * {@snippet lang=c :
     * #define PF_ASH 18
     * }
     */
    public static int PF_ASH() {
        return PF_ASH;
    }
    private static final int PF_ECONET = (int)19L;

    /**
     * {@snippet lang=c :
     * #define PF_ECONET 19
     * }
     */
    public static int PF_ECONET() {
        return PF_ECONET;
    }
    private static final int PF_ATMSVC = (int)20L;

    /**
     * {@snippet lang=c :
     * #define PF_ATMSVC 20
     * }
     */
    public static int PF_ATMSVC() {
        return PF_ATMSVC;
    }
    private static final int PF_RDS = (int)21L;

    /**
     * {@snippet lang=c :
     * #define PF_RDS 21
     * }
     */
    public static int PF_RDS() {
        return PF_RDS;
    }
    private static final int PF_SNA = (int)22L;

    /**
     * {@snippet lang=c :
     * #define PF_SNA 22
     * }
     */
    public static int PF_SNA() {
        return PF_SNA;
    }
    private static final int PF_IRDA = (int)23L;

    /**
     * {@snippet lang=c :
     * #define PF_IRDA 23
     * }
     */
    public static int PF_IRDA() {
        return PF_IRDA;
    }
    private static final int PF_PPPOX = (int)24L;

    /**
     * {@snippet lang=c :
     * #define PF_PPPOX 24
     * }
     */
    public static int PF_PPPOX() {
        return PF_PPPOX;
    }
    private static final int PF_WANPIPE = (int)25L;

    /**
     * {@snippet lang=c :
     * #define PF_WANPIPE 25
     * }
     */
    public static int PF_WANPIPE() {
        return PF_WANPIPE;
    }
    private static final int PF_LLC = (int)26L;

    /**
     * {@snippet lang=c :
     * #define PF_LLC 26
     * }
     */
    public static int PF_LLC() {
        return PF_LLC;
    }
    private static final int PF_IB = (int)27L;

    /**
     * {@snippet lang=c :
     * #define PF_IB 27
     * }
     */
    public static int PF_IB() {
        return PF_IB;
    }
    private static final int PF_MPLS = (int)28L;

    /**
     * {@snippet lang=c :
     * #define PF_MPLS 28
     * }
     */
    public static int PF_MPLS() {
        return PF_MPLS;
    }
    private static final int PF_CAN = (int)29L;

    /**
     * {@snippet lang=c :
     * #define PF_CAN 29
     * }
     */
    public static int PF_CAN() {
        return PF_CAN;
    }
    private static final int PF_TIPC = (int)30L;

    /**
     * {@snippet lang=c :
     * #define PF_TIPC 30
     * }
     */
    public static int PF_TIPC() {
        return PF_TIPC;
    }
    private static final int PF_BLUETOOTH = (int)31L;

    /**
     * {@snippet lang=c :
     * #define PF_BLUETOOTH 31
     * }
     */
    public static int PF_BLUETOOTH() {
        return PF_BLUETOOTH;
    }
    private static final int PF_IUCV = (int)32L;

    /**
     * {@snippet lang=c :
     * #define PF_IUCV 32
     * }
     */
    public static int PF_IUCV() {
        return PF_IUCV;
    }
    private static final int PF_RXRPC = (int)33L;

    /**
     * {@snippet lang=c :
     * #define PF_RXRPC 33
     * }
     */
    public static int PF_RXRPC() {
        return PF_RXRPC;
    }
    private static final int PF_ISDN = (int)34L;

    /**
     * {@snippet lang=c :
     * #define PF_ISDN 34
     * }
     */
    public static int PF_ISDN() {
        return PF_ISDN;
    }
    private static final int PF_PHONET = (int)35L;

    /**
     * {@snippet lang=c :
     * #define PF_PHONET 35
     * }
     */
    public static int PF_PHONET() {
        return PF_PHONET;
    }
    private static final int PF_IEEE802154 = (int)36L;

    /**
     * {@snippet lang=c :
     * #define PF_IEEE802154 36
     * }
     */
    public static int PF_IEEE802154() {
        return PF_IEEE802154;
    }
    private static final int PF_CAIF = (int)37L;

    /**
     * {@snippet lang=c :
     * #define PF_CAIF 37
     * }
     */
    public static int PF_CAIF() {
        return PF_CAIF;
    }
    private static final int PF_ALG = (int)38L;

    /**
     * {@snippet lang=c :
     * #define PF_ALG 38
     * }
     */
    public static int PF_ALG() {
        return PF_ALG;
    }
    private static final int PF_NFC = (int)39L;

    /**
     * {@snippet lang=c :
     * #define PF_NFC 39
     * }
     */
    public static int PF_NFC() {
        return PF_NFC;
    }
    private static final int PF_VSOCK = (int)40L;

    /**
     * {@snippet lang=c :
     * #define PF_VSOCK 40
     * }
     */
    public static int PF_VSOCK() {
        return PF_VSOCK;
    }
    private static final int PF_KCM = (int)41L;

    /**
     * {@snippet lang=c :
     * #define PF_KCM 41
     * }
     */
    public static int PF_KCM() {
        return PF_KCM;
    }
    private static final int PF_QIPCRTR = (int)42L;

    /**
     * {@snippet lang=c :
     * #define PF_QIPCRTR 42
     * }
     */
    public static int PF_QIPCRTR() {
        return PF_QIPCRTR;
    }
    private static final int PF_SMC = (int)43L;

    /**
     * {@snippet lang=c :
     * #define PF_SMC 43
     * }
     */
    public static int PF_SMC() {
        return PF_SMC;
    }
    private static final int PF_XDP = (int)44L;

    /**
     * {@snippet lang=c :
     * #define PF_XDP 44
     * }
     */
    public static int PF_XDP() {
        return PF_XDP;
    }
    private static final int PF_MCTP = (int)45L;

    /**
     * {@snippet lang=c :
     * #define PF_MCTP 45
     * }
     */
    public static int PF_MCTP() {
        return PF_MCTP;
    }
    private static final int PF_MAX = (int)46L;

    /**
     * {@snippet lang=c :
     * #define PF_MAX 46
     * }
     */
    public static int PF_MAX() {
        return PF_MAX;
    }
    private static final int SOL_RAW = (int)255L;

    /**
     * {@snippet lang=c :
     * #define SOL_RAW 255
     * }
     */
    public static int SOL_RAW() {
        return SOL_RAW;
    }
    private static final int SOL_DECNET = (int)261L;

    /**
     * {@snippet lang=c :
     * #define SOL_DECNET 261
     * }
     */
    public static int SOL_DECNET() {
        return SOL_DECNET;
    }
    private static final int SOL_X25 = (int)262L;

    /**
     * {@snippet lang=c :
     * #define SOL_X25 262
     * }
     */
    public static int SOL_X25() {
        return SOL_X25;
    }
    private static final int SOL_PACKET = (int)263L;

    /**
     * {@snippet lang=c :
     * #define SOL_PACKET 263
     * }
     */
    public static int SOL_PACKET() {
        return SOL_PACKET;
    }
    private static final int SOL_ATM = (int)264L;

    /**
     * {@snippet lang=c :
     * #define SOL_ATM 264
     * }
     */
    public static int SOL_ATM() {
        return SOL_ATM;
    }
    private static final int SOL_AAL = (int)265L;

    /**
     * {@snippet lang=c :
     * #define SOL_AAL 265
     * }
     */
    public static int SOL_AAL() {
        return SOL_AAL;
    }
    private static final int SOL_IRDA = (int)266L;

    /**
     * {@snippet lang=c :
     * #define SOL_IRDA 266
     * }
     */
    public static int SOL_IRDA() {
        return SOL_IRDA;
    }
    private static final int SOL_NETBEUI = (int)267L;

    /**
     * {@snippet lang=c :
     * #define SOL_NETBEUI 267
     * }
     */
    public static int SOL_NETBEUI() {
        return SOL_NETBEUI;
    }
    private static final int SOL_LLC = (int)268L;

    /**
     * {@snippet lang=c :
     * #define SOL_LLC 268
     * }
     */
    public static int SOL_LLC() {
        return SOL_LLC;
    }
    private static final int SOL_DCCP = (int)269L;

    /**
     * {@snippet lang=c :
     * #define SOL_DCCP 269
     * }
     */
    public static int SOL_DCCP() {
        return SOL_DCCP;
    }
    private static final int SOL_NETLINK = (int)270L;

    /**
     * {@snippet lang=c :
     * #define SOL_NETLINK 270
     * }
     */
    public static int SOL_NETLINK() {
        return SOL_NETLINK;
    }
    private static final int SOL_TIPC = (int)271L;

    /**
     * {@snippet lang=c :
     * #define SOL_TIPC 271
     * }
     */
    public static int SOL_TIPC() {
        return SOL_TIPC;
    }
    private static final int SOL_RXRPC = (int)272L;

    /**
     * {@snippet lang=c :
     * #define SOL_RXRPC 272
     * }
     */
    public static int SOL_RXRPC() {
        return SOL_RXRPC;
    }
    private static final int SOL_PPPOL2TP = (int)273L;

    /**
     * {@snippet lang=c :
     * #define SOL_PPPOL2TP 273
     * }
     */
    public static int SOL_PPPOL2TP() {
        return SOL_PPPOL2TP;
    }
    private static final int SOL_BLUETOOTH = (int)274L;

    /**
     * {@snippet lang=c :
     * #define SOL_BLUETOOTH 274
     * }
     */
    public static int SOL_BLUETOOTH() {
        return SOL_BLUETOOTH;
    }
    private static final int SOL_PNPIPE = (int)275L;

    /**
     * {@snippet lang=c :
     * #define SOL_PNPIPE 275
     * }
     */
    public static int SOL_PNPIPE() {
        return SOL_PNPIPE;
    }
    private static final int SOL_RDS = (int)276L;

    /**
     * {@snippet lang=c :
     * #define SOL_RDS 276
     * }
     */
    public static int SOL_RDS() {
        return SOL_RDS;
    }
    private static final int SOL_IUCV = (int)277L;

    /**
     * {@snippet lang=c :
     * #define SOL_IUCV 277
     * }
     */
    public static int SOL_IUCV() {
        return SOL_IUCV;
    }
    private static final int SOL_CAIF = (int)278L;

    /**
     * {@snippet lang=c :
     * #define SOL_CAIF 278
     * }
     */
    public static int SOL_CAIF() {
        return SOL_CAIF;
    }
    private static final int SOL_ALG = (int)279L;

    /**
     * {@snippet lang=c :
     * #define SOL_ALG 279
     * }
     */
    public static int SOL_ALG() {
        return SOL_ALG;
    }
    private static final int SOL_NFC = (int)280L;

    /**
     * {@snippet lang=c :
     * #define SOL_NFC 280
     * }
     */
    public static int SOL_NFC() {
        return SOL_NFC;
    }
    private static final int SOL_KCM = (int)281L;

    /**
     * {@snippet lang=c :
     * #define SOL_KCM 281
     * }
     */
    public static int SOL_KCM() {
        return SOL_KCM;
    }
    private static final int SOL_TLS = (int)282L;

    /**
     * {@snippet lang=c :
     * #define SOL_TLS 282
     * }
     */
    public static int SOL_TLS() {
        return SOL_TLS;
    }
    private static final int SOL_XDP = (int)283L;

    /**
     * {@snippet lang=c :
     * #define SOL_XDP 283
     * }
     */
    public static int SOL_XDP() {
        return SOL_XDP;
    }
    private static final int SOL_MPTCP = (int)284L;

    /**
     * {@snippet lang=c :
     * #define SOL_MPTCP 284
     * }
     */
    public static int SOL_MPTCP() {
        return SOL_MPTCP;
    }
    private static final int SOL_MCTP = (int)285L;

    /**
     * {@snippet lang=c :
     * #define SOL_MCTP 285
     * }
     */
    public static int SOL_MCTP() {
        return SOL_MCTP;
    }
    private static final int SOL_SMC = (int)286L;

    /**
     * {@snippet lang=c :
     * #define SOL_SMC 286
     * }
     */
    public static int SOL_SMC() {
        return SOL_SMC;
    }
    private static final int SOMAXCONN = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define SOMAXCONN 4096
     * }
     */
    public static int SOMAXCONN() {
        return SOMAXCONN;
    }
    private static final int _BITS_SOCKADDR_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_SOCKADDR_H 1
     * }
     */
    public static int _BITS_SOCKADDR_H() {
        return _BITS_SOCKADDR_H;
    }
    private static final int _SS_SIZE = (int)128L;

    /**
     * {@snippet lang=c :
     * #define _SS_SIZE 128
     * }
     */
    public static int _SS_SIZE() {
        return _SS_SIZE;
    }
    private static final int FIOSETOWN = (int)35073L;

    /**
     * {@snippet lang=c :
     * #define FIOSETOWN 35073
     * }
     */
    public static int FIOSETOWN() {
        return FIOSETOWN;
    }
    private static final int SIOCSPGRP = (int)35074L;

    /**
     * {@snippet lang=c :
     * #define SIOCSPGRP 35074
     * }
     */
    public static int SIOCSPGRP() {
        return SIOCSPGRP;
    }
    private static final int FIOGETOWN = (int)35075L;

    /**
     * {@snippet lang=c :
     * #define FIOGETOWN 35075
     * }
     */
    public static int FIOGETOWN() {
        return FIOGETOWN;
    }
    private static final int SIOCGPGRP = (int)35076L;

    /**
     * {@snippet lang=c :
     * #define SIOCGPGRP 35076
     * }
     */
    public static int SIOCGPGRP() {
        return SIOCGPGRP;
    }
    private static final int SIOCATMARK = (int)35077L;

    /**
     * {@snippet lang=c :
     * #define SIOCATMARK 35077
     * }
     */
    public static int SIOCATMARK() {
        return SIOCATMARK;
    }
    private static final int SIOCGSTAMP_OLD = (int)35078L;

    /**
     * {@snippet lang=c :
     * #define SIOCGSTAMP_OLD 35078
     * }
     */
    public static int SIOCGSTAMP_OLD() {
        return SIOCGSTAMP_OLD;
    }
    private static final int SIOCGSTAMPNS_OLD = (int)35079L;

    /**
     * {@snippet lang=c :
     * #define SIOCGSTAMPNS_OLD 35079
     * }
     */
    public static int SIOCGSTAMPNS_OLD() {
        return SIOCGSTAMPNS_OLD;
    }
    private static final int SOL_SOCKET = (int)1L;

    /**
     * {@snippet lang=c :
     * #define SOL_SOCKET 1
     * }
     */
    public static int SOL_SOCKET() {
        return SOL_SOCKET;
    }
    private static final int SO_DEBUG = (int)1L;

    /**
     * {@snippet lang=c :
     * #define SO_DEBUG 1
     * }
     */
    public static int SO_DEBUG() {
        return SO_DEBUG;
    }
    private static final int SO_REUSEADDR = (int)2L;

    /**
     * {@snippet lang=c :
     * #define SO_REUSEADDR 2
     * }
     */
    public static int SO_REUSEADDR() {
        return SO_REUSEADDR;
    }
    private static final int SO_TYPE = (int)3L;

    /**
     * {@snippet lang=c :
     * #define SO_TYPE 3
     * }
     */
    public static int SO_TYPE() {
        return SO_TYPE;
    }
    private static final int SO_ERROR = (int)4L;

    /**
     * {@snippet lang=c :
     * #define SO_ERROR 4
     * }
     */
    public static int SO_ERROR() {
        return SO_ERROR;
    }
    private static final int SO_DONTROUTE = (int)5L;

    /**
     * {@snippet lang=c :
     * #define SO_DONTROUTE 5
     * }
     */
    public static int SO_DONTROUTE() {
        return SO_DONTROUTE;
    }
    private static final int SO_BROADCAST = (int)6L;

    /**
     * {@snippet lang=c :
     * #define SO_BROADCAST 6
     * }
     */
    public static int SO_BROADCAST() {
        return SO_BROADCAST;
    }
    private static final int SO_SNDBUF = (int)7L;

    /**
     * {@snippet lang=c :
     * #define SO_SNDBUF 7
     * }
     */
    public static int SO_SNDBUF() {
        return SO_SNDBUF;
    }
    private static final int SO_RCVBUF = (int)8L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVBUF 8
     * }
     */
    public static int SO_RCVBUF() {
        return SO_RCVBUF;
    }
    private static final int SO_SNDBUFFORCE = (int)32L;

    /**
     * {@snippet lang=c :
     * #define SO_SNDBUFFORCE 32
     * }
     */
    public static int SO_SNDBUFFORCE() {
        return SO_SNDBUFFORCE;
    }
    private static final int SO_RCVBUFFORCE = (int)33L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVBUFFORCE 33
     * }
     */
    public static int SO_RCVBUFFORCE() {
        return SO_RCVBUFFORCE;
    }
    private static final int SO_KEEPALIVE = (int)9L;

    /**
     * {@snippet lang=c :
     * #define SO_KEEPALIVE 9
     * }
     */
    public static int SO_KEEPALIVE() {
        return SO_KEEPALIVE;
    }
    private static final int SO_OOBINLINE = (int)10L;

    /**
     * {@snippet lang=c :
     * #define SO_OOBINLINE 10
     * }
     */
    public static int SO_OOBINLINE() {
        return SO_OOBINLINE;
    }
    private static final int SO_NO_CHECK = (int)11L;

    /**
     * {@snippet lang=c :
     * #define SO_NO_CHECK 11
     * }
     */
    public static int SO_NO_CHECK() {
        return SO_NO_CHECK;
    }
    private static final int SO_PRIORITY = (int)12L;

    /**
     * {@snippet lang=c :
     * #define SO_PRIORITY 12
     * }
     */
    public static int SO_PRIORITY() {
        return SO_PRIORITY;
    }
    private static final int SO_LINGER = (int)13L;

    /**
     * {@snippet lang=c :
     * #define SO_LINGER 13
     * }
     */
    public static int SO_LINGER() {
        return SO_LINGER;
    }
    private static final int SO_BSDCOMPAT = (int)14L;

    /**
     * {@snippet lang=c :
     * #define SO_BSDCOMPAT 14
     * }
     */
    public static int SO_BSDCOMPAT() {
        return SO_BSDCOMPAT;
    }
    private static final int SO_REUSEPORT = (int)15L;

    /**
     * {@snippet lang=c :
     * #define SO_REUSEPORT 15
     * }
     */
    public static int SO_REUSEPORT() {
        return SO_REUSEPORT;
    }
    private static final int SO_PASSCRED = (int)16L;

    /**
     * {@snippet lang=c :
     * #define SO_PASSCRED 16
     * }
     */
    public static int SO_PASSCRED() {
        return SO_PASSCRED;
    }
    private static final int SO_PEERCRED = (int)17L;

    /**
     * {@snippet lang=c :
     * #define SO_PEERCRED 17
     * }
     */
    public static int SO_PEERCRED() {
        return SO_PEERCRED;
    }
    private static final int SO_RCVLOWAT = (int)18L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVLOWAT 18
     * }
     */
    public static int SO_RCVLOWAT() {
        return SO_RCVLOWAT;
    }
    private static final int SO_SNDLOWAT = (int)19L;

    /**
     * {@snippet lang=c :
     * #define SO_SNDLOWAT 19
     * }
     */
    public static int SO_SNDLOWAT() {
        return SO_SNDLOWAT;
    }
    private static final int SO_RCVTIMEO_OLD = (int)20L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO_OLD 20
     * }
     */
    public static int SO_RCVTIMEO_OLD() {
        return SO_RCVTIMEO_OLD;
    }
    private static final int SO_SNDTIMEO_OLD = (int)21L;

    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO_OLD 21
     * }
     */
    public static int SO_SNDTIMEO_OLD() {
        return SO_SNDTIMEO_OLD;
    }
    private static final int SO_SECURITY_AUTHENTICATION = (int)22L;

    /**
     * {@snippet lang=c :
     * #define SO_SECURITY_AUTHENTICATION 22
     * }
     */
    public static int SO_SECURITY_AUTHENTICATION() {
        return SO_SECURITY_AUTHENTICATION;
    }
    private static final int SO_SECURITY_ENCRYPTION_TRANSPORT = (int)23L;

    /**
     * {@snippet lang=c :
     * #define SO_SECURITY_ENCRYPTION_TRANSPORT 23
     * }
     */
    public static int SO_SECURITY_ENCRYPTION_TRANSPORT() {
        return SO_SECURITY_ENCRYPTION_TRANSPORT;
    }
    private static final int SO_SECURITY_ENCRYPTION_NETWORK = (int)24L;

    /**
     * {@snippet lang=c :
     * #define SO_SECURITY_ENCRYPTION_NETWORK 24
     * }
     */
    public static int SO_SECURITY_ENCRYPTION_NETWORK() {
        return SO_SECURITY_ENCRYPTION_NETWORK;
    }
    private static final int SO_BINDTODEVICE = (int)25L;

    /**
     * {@snippet lang=c :
     * #define SO_BINDTODEVICE 25
     * }
     */
    public static int SO_BINDTODEVICE() {
        return SO_BINDTODEVICE;
    }
    private static final int SO_ATTACH_FILTER = (int)26L;

    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_FILTER 26
     * }
     */
    public static int SO_ATTACH_FILTER() {
        return SO_ATTACH_FILTER;
    }
    private static final int SO_DETACH_FILTER = (int)27L;

    /**
     * {@snippet lang=c :
     * #define SO_DETACH_FILTER 27
     * }
     */
    public static int SO_DETACH_FILTER() {
        return SO_DETACH_FILTER;
    }
    private static final int SO_PEERNAME = (int)28L;

    /**
     * {@snippet lang=c :
     * #define SO_PEERNAME 28
     * }
     */
    public static int SO_PEERNAME() {
        return SO_PEERNAME;
    }
    private static final int SO_ACCEPTCONN = (int)30L;

    /**
     * {@snippet lang=c :
     * #define SO_ACCEPTCONN 30
     * }
     */
    public static int SO_ACCEPTCONN() {
        return SO_ACCEPTCONN;
    }
    private static final int SO_PEERSEC = (int)31L;

    /**
     * {@snippet lang=c :
     * #define SO_PEERSEC 31
     * }
     */
    public static int SO_PEERSEC() {
        return SO_PEERSEC;
    }
    private static final int SO_PASSSEC = (int)34L;

    /**
     * {@snippet lang=c :
     * #define SO_PASSSEC 34
     * }
     */
    public static int SO_PASSSEC() {
        return SO_PASSSEC;
    }
    private static final int SO_MARK = (int)36L;

    /**
     * {@snippet lang=c :
     * #define SO_MARK 36
     * }
     */
    public static int SO_MARK() {
        return SO_MARK;
    }
    private static final int SO_PROTOCOL = (int)38L;

    /**
     * {@snippet lang=c :
     * #define SO_PROTOCOL 38
     * }
     */
    public static int SO_PROTOCOL() {
        return SO_PROTOCOL;
    }
    private static final int SO_DOMAIN = (int)39L;

    /**
     * {@snippet lang=c :
     * #define SO_DOMAIN 39
     * }
     */
    public static int SO_DOMAIN() {
        return SO_DOMAIN;
    }
    private static final int SO_RXQ_OVFL = (int)40L;

    /**
     * {@snippet lang=c :
     * #define SO_RXQ_OVFL 40
     * }
     */
    public static int SO_RXQ_OVFL() {
        return SO_RXQ_OVFL;
    }
    private static final int SO_WIFI_STATUS = (int)41L;

    /**
     * {@snippet lang=c :
     * #define SO_WIFI_STATUS 41
     * }
     */
    public static int SO_WIFI_STATUS() {
        return SO_WIFI_STATUS;
    }
    private static final int SO_PEEK_OFF = (int)42L;

    /**
     * {@snippet lang=c :
     * #define SO_PEEK_OFF 42
     * }
     */
    public static int SO_PEEK_OFF() {
        return SO_PEEK_OFF;
    }
    private static final int SO_NOFCS = (int)43L;

    /**
     * {@snippet lang=c :
     * #define SO_NOFCS 43
     * }
     */
    public static int SO_NOFCS() {
        return SO_NOFCS;
    }
    private static final int SO_LOCK_FILTER = (int)44L;

    /**
     * {@snippet lang=c :
     * #define SO_LOCK_FILTER 44
     * }
     */
    public static int SO_LOCK_FILTER() {
        return SO_LOCK_FILTER;
    }
    private static final int SO_SELECT_ERR_QUEUE = (int)45L;

    /**
     * {@snippet lang=c :
     * #define SO_SELECT_ERR_QUEUE 45
     * }
     */
    public static int SO_SELECT_ERR_QUEUE() {
        return SO_SELECT_ERR_QUEUE;
    }
    private static final int SO_BUSY_POLL = (int)46L;

    /**
     * {@snippet lang=c :
     * #define SO_BUSY_POLL 46
     * }
     */
    public static int SO_BUSY_POLL() {
        return SO_BUSY_POLL;
    }
    private static final int SO_MAX_PACING_RATE = (int)47L;

    /**
     * {@snippet lang=c :
     * #define SO_MAX_PACING_RATE 47
     * }
     */
    public static int SO_MAX_PACING_RATE() {
        return SO_MAX_PACING_RATE;
    }
    private static final int SO_BPF_EXTENSIONS = (int)48L;

    /**
     * {@snippet lang=c :
     * #define SO_BPF_EXTENSIONS 48
     * }
     */
    public static int SO_BPF_EXTENSIONS() {
        return SO_BPF_EXTENSIONS;
    }
    private static final int SO_INCOMING_CPU = (int)49L;

    /**
     * {@snippet lang=c :
     * #define SO_INCOMING_CPU 49
     * }
     */
    public static int SO_INCOMING_CPU() {
        return SO_INCOMING_CPU;
    }
    private static final int SO_ATTACH_BPF = (int)50L;

    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_BPF 50
     * }
     */
    public static int SO_ATTACH_BPF() {
        return SO_ATTACH_BPF;
    }
    private static final int SO_ATTACH_REUSEPORT_CBPF = (int)51L;

    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_REUSEPORT_CBPF 51
     * }
     */
    public static int SO_ATTACH_REUSEPORT_CBPF() {
        return SO_ATTACH_REUSEPORT_CBPF;
    }
    private static final int SO_ATTACH_REUSEPORT_EBPF = (int)52L;

    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_REUSEPORT_EBPF 52
     * }
     */
    public static int SO_ATTACH_REUSEPORT_EBPF() {
        return SO_ATTACH_REUSEPORT_EBPF;
    }
    private static final int SO_CNX_ADVICE = (int)53L;

    /**
     * {@snippet lang=c :
     * #define SO_CNX_ADVICE 53
     * }
     */
    public static int SO_CNX_ADVICE() {
        return SO_CNX_ADVICE;
    }
    private static final int SCM_TIMESTAMPING_OPT_STATS = (int)54L;

    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPING_OPT_STATS 54
     * }
     */
    public static int SCM_TIMESTAMPING_OPT_STATS() {
        return SCM_TIMESTAMPING_OPT_STATS;
    }
    private static final int SO_MEMINFO = (int)55L;

    /**
     * {@snippet lang=c :
     * #define SO_MEMINFO 55
     * }
     */
    public static int SO_MEMINFO() {
        return SO_MEMINFO;
    }
    private static final int SO_INCOMING_NAPI_ID = (int)56L;

    /**
     * {@snippet lang=c :
     * #define SO_INCOMING_NAPI_ID 56
     * }
     */
    public static int SO_INCOMING_NAPI_ID() {
        return SO_INCOMING_NAPI_ID;
    }
    private static final int SO_COOKIE = (int)57L;

    /**
     * {@snippet lang=c :
     * #define SO_COOKIE 57
     * }
     */
    public static int SO_COOKIE() {
        return SO_COOKIE;
    }
    private static final int SCM_TIMESTAMPING_PKTINFO = (int)58L;

    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPING_PKTINFO 58
     * }
     */
    public static int SCM_TIMESTAMPING_PKTINFO() {
        return SCM_TIMESTAMPING_PKTINFO;
    }
    private static final int SO_PEERGROUPS = (int)59L;

    /**
     * {@snippet lang=c :
     * #define SO_PEERGROUPS 59
     * }
     */
    public static int SO_PEERGROUPS() {
        return SO_PEERGROUPS;
    }
    private static final int SO_ZEROCOPY = (int)60L;

    /**
     * {@snippet lang=c :
     * #define SO_ZEROCOPY 60
     * }
     */
    public static int SO_ZEROCOPY() {
        return SO_ZEROCOPY;
    }
    private static final int SO_TXTIME = (int)61L;

    /**
     * {@snippet lang=c :
     * #define SO_TXTIME 61
     * }
     */
    public static int SO_TXTIME() {
        return SO_TXTIME;
    }
    private static final int SO_BINDTOIFINDEX = (int)62L;

    /**
     * {@snippet lang=c :
     * #define SO_BINDTOIFINDEX 62
     * }
     */
    public static int SO_BINDTOIFINDEX() {
        return SO_BINDTOIFINDEX;
    }
    private static final int SO_TIMESTAMP_OLD = (int)29L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP_OLD 29
     * }
     */
    public static int SO_TIMESTAMP_OLD() {
        return SO_TIMESTAMP_OLD;
    }
    private static final int SO_TIMESTAMPNS_OLD = (int)35L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPNS_OLD 35
     * }
     */
    public static int SO_TIMESTAMPNS_OLD() {
        return SO_TIMESTAMPNS_OLD;
    }
    private static final int SO_TIMESTAMPING_OLD = (int)37L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPING_OLD 37
     * }
     */
    public static int SO_TIMESTAMPING_OLD() {
        return SO_TIMESTAMPING_OLD;
    }
    private static final int SO_TIMESTAMP_NEW = (int)63L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP_NEW 63
     * }
     */
    public static int SO_TIMESTAMP_NEW() {
        return SO_TIMESTAMP_NEW;
    }
    private static final int SO_TIMESTAMPNS_NEW = (int)64L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPNS_NEW 64
     * }
     */
    public static int SO_TIMESTAMPNS_NEW() {
        return SO_TIMESTAMPNS_NEW;
    }
    private static final int SO_TIMESTAMPING_NEW = (int)65L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPING_NEW 65
     * }
     */
    public static int SO_TIMESTAMPING_NEW() {
        return SO_TIMESTAMPING_NEW;
    }
    private static final int SO_RCVTIMEO_NEW = (int)66L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO_NEW 66
     * }
     */
    public static int SO_RCVTIMEO_NEW() {
        return SO_RCVTIMEO_NEW;
    }
    private static final int SO_SNDTIMEO_NEW = (int)67L;

    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO_NEW 67
     * }
     */
    public static int SO_SNDTIMEO_NEW() {
        return SO_SNDTIMEO_NEW;
    }
    private static final int SO_DETACH_REUSEPORT_BPF = (int)68L;

    /**
     * {@snippet lang=c :
     * #define SO_DETACH_REUSEPORT_BPF 68
     * }
     */
    public static int SO_DETACH_REUSEPORT_BPF() {
        return SO_DETACH_REUSEPORT_BPF;
    }
    private static final int SO_PREFER_BUSY_POLL = (int)69L;

    /**
     * {@snippet lang=c :
     * #define SO_PREFER_BUSY_POLL 69
     * }
     */
    public static int SO_PREFER_BUSY_POLL() {
        return SO_PREFER_BUSY_POLL;
    }
    private static final int SO_BUSY_POLL_BUDGET = (int)70L;

    /**
     * {@snippet lang=c :
     * #define SO_BUSY_POLL_BUDGET 70
     * }
     */
    public static int SO_BUSY_POLL_BUDGET() {
        return SO_BUSY_POLL_BUDGET;
    }
    private static final int SO_NETNS_COOKIE = (int)71L;

    /**
     * {@snippet lang=c :
     * #define SO_NETNS_COOKIE 71
     * }
     */
    public static int SO_NETNS_COOKIE() {
        return SO_NETNS_COOKIE;
    }
    private static final int SO_BUF_LOCK = (int)72L;

    /**
     * {@snippet lang=c :
     * #define SO_BUF_LOCK 72
     * }
     */
    public static int SO_BUF_LOCK() {
        return SO_BUF_LOCK;
    }
    private static final int SO_RESERVE_MEM = (int)73L;

    /**
     * {@snippet lang=c :
     * #define SO_RESERVE_MEM 73
     * }
     */
    public static int SO_RESERVE_MEM() {
        return SO_RESERVE_MEM;
    }
    private static final int SO_TXREHASH = (int)74L;

    /**
     * {@snippet lang=c :
     * #define SO_TXREHASH 74
     * }
     */
    public static int SO_TXREHASH() {
        return SO_TXREHASH;
    }
    private static final int SO_RCVMARK = (int)75L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVMARK 75
     * }
     */
    public static int SO_RCVMARK() {
        return SO_RCVMARK;
    }
    private static final int __osockaddr_defined = (int)1L;

    /**
     * {@snippet lang=c :
     * #define __osockaddr_defined 1
     * }
     */
    public static int __osockaddr_defined() {
        return __osockaddr_defined;
    }
    private static final int _SYS_EPOLL_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _SYS_EPOLL_H 1
     * }
     */
    public static int _SYS_EPOLL_H() {
        return _SYS_EPOLL_H;
    }
    private static final int EPOLL_CTL_ADD = (int)1L;

    /**
     * {@snippet lang=c :
     * #define EPOLL_CTL_ADD 1
     * }
     */
    public static int EPOLL_CTL_ADD() {
        return EPOLL_CTL_ADD;
    }
    private static final int EPOLL_CTL_DEL = (int)2L;

    /**
     * {@snippet lang=c :
     * #define EPOLL_CTL_DEL 2
     * }
     */
    public static int EPOLL_CTL_DEL() {
        return EPOLL_CTL_DEL;
    }
    private static final int EPOLL_CTL_MOD = (int)3L;

    /**
     * {@snippet lang=c :
     * #define EPOLL_CTL_MOD 3
     * }
     */
    public static int EPOLL_CTL_MOD() {
        return EPOLL_CTL_MOD;
    }
    private static final int _NETINET_IN_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _NETINET_IN_H 1
     * }
     */
    public static int _NETINET_IN_H() {
        return _NETINET_IN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int __USE_KERNEL_IPV6_DEFS = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __USE_KERNEL_IPV6_DEFS 0
     * }
     */
    public static int __USE_KERNEL_IPV6_DEFS() {
        return __USE_KERNEL_IPV6_DEFS;
    }
    private static final int IP_OPTIONS = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IP_OPTIONS 4
     * }
     */
    public static int IP_OPTIONS() {
        return IP_OPTIONS;
    }
    private static final int IP_HDRINCL = (int)3L;

    /**
     * {@snippet lang=c :
     * #define IP_HDRINCL 3
     * }
     */
    public static int IP_HDRINCL() {
        return IP_HDRINCL;
    }
    private static final int IP_TOS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IP_TOS 1
     * }
     */
    public static int IP_TOS() {
        return IP_TOS;
    }
    private static final int IP_TTL = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IP_TTL 2
     * }
     */
    public static int IP_TTL() {
        return IP_TTL;
    }
    private static final int IP_RECVOPTS = (int)6L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVOPTS 6
     * }
     */
    public static int IP_RECVOPTS() {
        return IP_RECVOPTS;
    }
    private static final int IP_RETOPTS = (int)7L;

    /**
     * {@snippet lang=c :
     * #define IP_RETOPTS 7
     * }
     */
    public static int IP_RETOPTS() {
        return IP_RETOPTS;
    }
    private static final int IP_MULTICAST_IF = (int)32L;

    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_IF 32
     * }
     */
    public static int IP_MULTICAST_IF() {
        return IP_MULTICAST_IF;
    }
    private static final int IP_MULTICAST_TTL = (int)33L;

    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_TTL 33
     * }
     */
    public static int IP_MULTICAST_TTL() {
        return IP_MULTICAST_TTL;
    }
    private static final int IP_MULTICAST_LOOP = (int)34L;

    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_LOOP 34
     * }
     */
    public static int IP_MULTICAST_LOOP() {
        return IP_MULTICAST_LOOP;
    }
    private static final int IP_ADD_MEMBERSHIP = (int)35L;

    /**
     * {@snippet lang=c :
     * #define IP_ADD_MEMBERSHIP 35
     * }
     */
    public static int IP_ADD_MEMBERSHIP() {
        return IP_ADD_MEMBERSHIP;
    }
    private static final int IP_DROP_MEMBERSHIP = (int)36L;

    /**
     * {@snippet lang=c :
     * #define IP_DROP_MEMBERSHIP 36
     * }
     */
    public static int IP_DROP_MEMBERSHIP() {
        return IP_DROP_MEMBERSHIP;
    }
    private static final int IP_UNBLOCK_SOURCE = (int)37L;

    /**
     * {@snippet lang=c :
     * #define IP_UNBLOCK_SOURCE 37
     * }
     */
    public static int IP_UNBLOCK_SOURCE() {
        return IP_UNBLOCK_SOURCE;
    }
    private static final int IP_BLOCK_SOURCE = (int)38L;

    /**
     * {@snippet lang=c :
     * #define IP_BLOCK_SOURCE 38
     * }
     */
    public static int IP_BLOCK_SOURCE() {
        return IP_BLOCK_SOURCE;
    }
    private static final int IP_ADD_SOURCE_MEMBERSHIP = (int)39L;

    /**
     * {@snippet lang=c :
     * #define IP_ADD_SOURCE_MEMBERSHIP 39
     * }
     */
    public static int IP_ADD_SOURCE_MEMBERSHIP() {
        return IP_ADD_SOURCE_MEMBERSHIP;
    }
    private static final int IP_DROP_SOURCE_MEMBERSHIP = (int)40L;

    /**
     * {@snippet lang=c :
     * #define IP_DROP_SOURCE_MEMBERSHIP 40
     * }
     */
    public static int IP_DROP_SOURCE_MEMBERSHIP() {
        return IP_DROP_SOURCE_MEMBERSHIP;
    }
    private static final int IP_MSFILTER = (int)41L;

    /**
     * {@snippet lang=c :
     * #define IP_MSFILTER 41
     * }
     */
    public static int IP_MSFILTER() {
        return IP_MSFILTER;
    }
    private static final int MCAST_JOIN_GROUP = (int)42L;

    /**
     * {@snippet lang=c :
     * #define MCAST_JOIN_GROUP 42
     * }
     */
    public static int MCAST_JOIN_GROUP() {
        return MCAST_JOIN_GROUP;
    }
    private static final int MCAST_BLOCK_SOURCE = (int)43L;

    /**
     * {@snippet lang=c :
     * #define MCAST_BLOCK_SOURCE 43
     * }
     */
    public static int MCAST_BLOCK_SOURCE() {
        return MCAST_BLOCK_SOURCE;
    }
    private static final int MCAST_UNBLOCK_SOURCE = (int)44L;

    /**
     * {@snippet lang=c :
     * #define MCAST_UNBLOCK_SOURCE 44
     * }
     */
    public static int MCAST_UNBLOCK_SOURCE() {
        return MCAST_UNBLOCK_SOURCE;
    }
    private static final int MCAST_LEAVE_GROUP = (int)45L;

    /**
     * {@snippet lang=c :
     * #define MCAST_LEAVE_GROUP 45
     * }
     */
    public static int MCAST_LEAVE_GROUP() {
        return MCAST_LEAVE_GROUP;
    }
    private static final int MCAST_JOIN_SOURCE_GROUP = (int)46L;

    /**
     * {@snippet lang=c :
     * #define MCAST_JOIN_SOURCE_GROUP 46
     * }
     */
    public static int MCAST_JOIN_SOURCE_GROUP() {
        return MCAST_JOIN_SOURCE_GROUP;
    }
    private static final int MCAST_LEAVE_SOURCE_GROUP = (int)47L;

    /**
     * {@snippet lang=c :
     * #define MCAST_LEAVE_SOURCE_GROUP 47
     * }
     */
    public static int MCAST_LEAVE_SOURCE_GROUP() {
        return MCAST_LEAVE_SOURCE_GROUP;
    }
    private static final int MCAST_MSFILTER = (int)48L;

    /**
     * {@snippet lang=c :
     * #define MCAST_MSFILTER 48
     * }
     */
    public static int MCAST_MSFILTER() {
        return MCAST_MSFILTER;
    }
    private static final int IP_MULTICAST_ALL = (int)49L;

    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_ALL 49
     * }
     */
    public static int IP_MULTICAST_ALL() {
        return IP_MULTICAST_ALL;
    }
    private static final int IP_UNICAST_IF = (int)50L;

    /**
     * {@snippet lang=c :
     * #define IP_UNICAST_IF 50
     * }
     */
    public static int IP_UNICAST_IF() {
        return IP_UNICAST_IF;
    }
    private static final int MCAST_EXCLUDE = (int)0L;

    /**
     * {@snippet lang=c :
     * #define MCAST_EXCLUDE 0
     * }
     */
    public static int MCAST_EXCLUDE() {
        return MCAST_EXCLUDE;
    }
    private static final int MCAST_INCLUDE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define MCAST_INCLUDE 1
     * }
     */
    public static int MCAST_INCLUDE() {
        return MCAST_INCLUDE;
    }
    private static final int IP_ROUTER_ALERT = (int)5L;

    /**
     * {@snippet lang=c :
     * #define IP_ROUTER_ALERT 5
     * }
     */
    public static int IP_ROUTER_ALERT() {
        return IP_ROUTER_ALERT;
    }
    private static final int IP_PKTINFO = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IP_PKTINFO 8
     * }
     */
    public static int IP_PKTINFO() {
        return IP_PKTINFO;
    }
    private static final int IP_PKTOPTIONS = (int)9L;

    /**
     * {@snippet lang=c :
     * #define IP_PKTOPTIONS 9
     * }
     */
    public static int IP_PKTOPTIONS() {
        return IP_PKTOPTIONS;
    }
    private static final int IP_PMTUDISC = (int)10L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC 10
     * }
     */
    public static int IP_PMTUDISC() {
        return IP_PMTUDISC;
    }
    private static final int IP_MTU_DISCOVER = (int)10L;

    /**
     * {@snippet lang=c :
     * #define IP_MTU_DISCOVER 10
     * }
     */
    public static int IP_MTU_DISCOVER() {
        return IP_MTU_DISCOVER;
    }
    private static final int IP_RECVERR = (int)11L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVERR 11
     * }
     */
    public static int IP_RECVERR() {
        return IP_RECVERR;
    }
    private static final int IP_RECVTTL = (int)12L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVTTL 12
     * }
     */
    public static int IP_RECVTTL() {
        return IP_RECVTTL;
    }
    private static final int IP_RECVTOS = (int)13L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVTOS 13
     * }
     */
    public static int IP_RECVTOS() {
        return IP_RECVTOS;
    }
    private static final int IP_MTU = (int)14L;

    /**
     * {@snippet lang=c :
     * #define IP_MTU 14
     * }
     */
    public static int IP_MTU() {
        return IP_MTU;
    }
    private static final int IP_FREEBIND = (int)15L;

    /**
     * {@snippet lang=c :
     * #define IP_FREEBIND 15
     * }
     */
    public static int IP_FREEBIND() {
        return IP_FREEBIND;
    }
    private static final int IP_IPSEC_POLICY = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IP_IPSEC_POLICY 16
     * }
     */
    public static int IP_IPSEC_POLICY() {
        return IP_IPSEC_POLICY;
    }
    private static final int IP_XFRM_POLICY = (int)17L;

    /**
     * {@snippet lang=c :
     * #define IP_XFRM_POLICY 17
     * }
     */
    public static int IP_XFRM_POLICY() {
        return IP_XFRM_POLICY;
    }
    private static final int IP_PASSSEC = (int)18L;

    /**
     * {@snippet lang=c :
     * #define IP_PASSSEC 18
     * }
     */
    public static int IP_PASSSEC() {
        return IP_PASSSEC;
    }
    private static final int IP_TRANSPARENT = (int)19L;

    /**
     * {@snippet lang=c :
     * #define IP_TRANSPARENT 19
     * }
     */
    public static int IP_TRANSPARENT() {
        return IP_TRANSPARENT;
    }
    private static final int IP_ORIGDSTADDR = (int)20L;

    /**
     * {@snippet lang=c :
     * #define IP_ORIGDSTADDR 20
     * }
     */
    public static int IP_ORIGDSTADDR() {
        return IP_ORIGDSTADDR;
    }
    private static final int IP_MINTTL = (int)21L;

    /**
     * {@snippet lang=c :
     * #define IP_MINTTL 21
     * }
     */
    public static int IP_MINTTL() {
        return IP_MINTTL;
    }
    private static final int IP_NODEFRAG = (int)22L;

    /**
     * {@snippet lang=c :
     * #define IP_NODEFRAG 22
     * }
     */
    public static int IP_NODEFRAG() {
        return IP_NODEFRAG;
    }
    private static final int IP_CHECKSUM = (int)23L;

    /**
     * {@snippet lang=c :
     * #define IP_CHECKSUM 23
     * }
     */
    public static int IP_CHECKSUM() {
        return IP_CHECKSUM;
    }
    private static final int IP_BIND_ADDRESS_NO_PORT = (int)24L;

    /**
     * {@snippet lang=c :
     * #define IP_BIND_ADDRESS_NO_PORT 24
     * }
     */
    public static int IP_BIND_ADDRESS_NO_PORT() {
        return IP_BIND_ADDRESS_NO_PORT;
    }
    private static final int IP_RECVFRAGSIZE = (int)25L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVFRAGSIZE 25
     * }
     */
    public static int IP_RECVFRAGSIZE() {
        return IP_RECVFRAGSIZE;
    }
    private static final int IP_RECVERR_RFC4884 = (int)26L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVERR_RFC4884 26
     * }
     */
    public static int IP_RECVERR_RFC4884() {
        return IP_RECVERR_RFC4884;
    }
    private static final int IP_PMTUDISC_DONT = (int)0L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC_DONT 0
     * }
     */
    public static int IP_PMTUDISC_DONT() {
        return IP_PMTUDISC_DONT;
    }
    private static final int IP_PMTUDISC_WANT = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC_WANT 1
     * }
     */
    public static int IP_PMTUDISC_WANT() {
        return IP_PMTUDISC_WANT;
    }
    private static final int IP_PMTUDISC_DO = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC_DO 2
     * }
     */
    public static int IP_PMTUDISC_DO() {
        return IP_PMTUDISC_DO;
    }
    private static final int IP_PMTUDISC_PROBE = (int)3L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC_PROBE 3
     * }
     */
    public static int IP_PMTUDISC_PROBE() {
        return IP_PMTUDISC_PROBE;
    }
    private static final int IP_PMTUDISC_INTERFACE = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC_INTERFACE 4
     * }
     */
    public static int IP_PMTUDISC_INTERFACE() {
        return IP_PMTUDISC_INTERFACE;
    }
    private static final int IP_PMTUDISC_OMIT = (int)5L;

    /**
     * {@snippet lang=c :
     * #define IP_PMTUDISC_OMIT 5
     * }
     */
    public static int IP_PMTUDISC_OMIT() {
        return IP_PMTUDISC_OMIT;
    }
    private static final int SOL_IP = (int)0L;

    /**
     * {@snippet lang=c :
     * #define SOL_IP 0
     * }
     */
    public static int SOL_IP() {
        return SOL_IP;
    }
    private static final int IP_DEFAULT_MULTICAST_TTL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IP_DEFAULT_MULTICAST_TTL 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_TTL() {
        return IP_DEFAULT_MULTICAST_TTL;
    }
    private static final int IP_DEFAULT_MULTICAST_LOOP = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IP_DEFAULT_MULTICAST_LOOP 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_LOOP() {
        return IP_DEFAULT_MULTICAST_LOOP;
    }
    private static final int IP_MAX_MEMBERSHIPS = (int)20L;

    /**
     * {@snippet lang=c :
     * #define IP_MAX_MEMBERSHIPS 20
     * }
     */
    public static int IP_MAX_MEMBERSHIPS() {
        return IP_MAX_MEMBERSHIPS;
    }
    private static final int IPV6_ADDRFORM = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IPV6_ADDRFORM 1
     * }
     */
    public static int IPV6_ADDRFORM() {
        return IPV6_ADDRFORM;
    }
    private static final int IPV6_2292PKTINFO = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IPV6_2292PKTINFO 2
     * }
     */
    public static int IPV6_2292PKTINFO() {
        return IPV6_2292PKTINFO;
    }
    private static final int IPV6_2292HOPOPTS = (int)3L;

    /**
     * {@snippet lang=c :
     * #define IPV6_2292HOPOPTS 3
     * }
     */
    public static int IPV6_2292HOPOPTS() {
        return IPV6_2292HOPOPTS;
    }
    private static final int IPV6_2292DSTOPTS = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IPV6_2292DSTOPTS 4
     * }
     */
    public static int IPV6_2292DSTOPTS() {
        return IPV6_2292DSTOPTS;
    }
    private static final int IPV6_2292RTHDR = (int)5L;

    /**
     * {@snippet lang=c :
     * #define IPV6_2292RTHDR 5
     * }
     */
    public static int IPV6_2292RTHDR() {
        return IPV6_2292RTHDR;
    }
    private static final int IPV6_2292PKTOPTIONS = (int)6L;

    /**
     * {@snippet lang=c :
     * #define IPV6_2292PKTOPTIONS 6
     * }
     */
    public static int IPV6_2292PKTOPTIONS() {
        return IPV6_2292PKTOPTIONS;
    }
    private static final int IPV6_CHECKSUM = (int)7L;

    /**
     * {@snippet lang=c :
     * #define IPV6_CHECKSUM 7
     * }
     */
    public static int IPV6_CHECKSUM() {
        return IPV6_CHECKSUM;
    }
    private static final int IPV6_2292HOPLIMIT = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IPV6_2292HOPLIMIT 8
     * }
     */
    public static int IPV6_2292HOPLIMIT() {
        return IPV6_2292HOPLIMIT;
    }
    private static final int IPV6_NEXTHOP = (int)9L;

    /**
     * {@snippet lang=c :
     * #define IPV6_NEXTHOP 9
     * }
     */
    public static int IPV6_NEXTHOP() {
        return IPV6_NEXTHOP;
    }
    private static final int IPV6_AUTHHDR = (int)10L;

    /**
     * {@snippet lang=c :
     * #define IPV6_AUTHHDR 10
     * }
     */
    public static int IPV6_AUTHHDR() {
        return IPV6_AUTHHDR;
    }
    private static final int IPV6_UNICAST_HOPS = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IPV6_UNICAST_HOPS 16
     * }
     */
    public static int IPV6_UNICAST_HOPS() {
        return IPV6_UNICAST_HOPS;
    }
    private static final int IPV6_MULTICAST_IF = (int)17L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_IF 17
     * }
     */
    public static int IPV6_MULTICAST_IF() {
        return IPV6_MULTICAST_IF;
    }
    private static final int IPV6_MULTICAST_HOPS = (int)18L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_HOPS 18
     * }
     */
    public static int IPV6_MULTICAST_HOPS() {
        return IPV6_MULTICAST_HOPS;
    }
    private static final int IPV6_MULTICAST_LOOP = (int)19L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_LOOP 19
     * }
     */
    public static int IPV6_MULTICAST_LOOP() {
        return IPV6_MULTICAST_LOOP;
    }
    private static final int IPV6_JOIN_GROUP = (int)20L;

    /**
     * {@snippet lang=c :
     * #define IPV6_JOIN_GROUP 20
     * }
     */
    public static int IPV6_JOIN_GROUP() {
        return IPV6_JOIN_GROUP;
    }
    private static final int IPV6_LEAVE_GROUP = (int)21L;

    /**
     * {@snippet lang=c :
     * #define IPV6_LEAVE_GROUP 21
     * }
     */
    public static int IPV6_LEAVE_GROUP() {
        return IPV6_LEAVE_GROUP;
    }
    private static final int IPV6_ROUTER_ALERT = (int)22L;

    /**
     * {@snippet lang=c :
     * #define IPV6_ROUTER_ALERT 22
     * }
     */
    public static int IPV6_ROUTER_ALERT() {
        return IPV6_ROUTER_ALERT;
    }
    private static final int IPV6_MTU_DISCOVER = (int)23L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MTU_DISCOVER 23
     * }
     */
    public static int IPV6_MTU_DISCOVER() {
        return IPV6_MTU_DISCOVER;
    }
    private static final int IPV6_MTU = (int)24L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MTU 24
     * }
     */
    public static int IPV6_MTU() {
        return IPV6_MTU;
    }
    private static final int IPV6_RECVERR = (int)25L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVERR 25
     * }
     */
    public static int IPV6_RECVERR() {
        return IPV6_RECVERR;
    }
    private static final int IPV6_V6ONLY = (int)26L;

    /**
     * {@snippet lang=c :
     * #define IPV6_V6ONLY 26
     * }
     */
    public static int IPV6_V6ONLY() {
        return IPV6_V6ONLY;
    }
    private static final int IPV6_JOIN_ANYCAST = (int)27L;

    /**
     * {@snippet lang=c :
     * #define IPV6_JOIN_ANYCAST 27
     * }
     */
    public static int IPV6_JOIN_ANYCAST() {
        return IPV6_JOIN_ANYCAST;
    }
    private static final int IPV6_LEAVE_ANYCAST = (int)28L;

    /**
     * {@snippet lang=c :
     * #define IPV6_LEAVE_ANYCAST 28
     * }
     */
    public static int IPV6_LEAVE_ANYCAST() {
        return IPV6_LEAVE_ANYCAST;
    }
    private static final int IPV6_MULTICAST_ALL = (int)29L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MULTICAST_ALL 29
     * }
     */
    public static int IPV6_MULTICAST_ALL() {
        return IPV6_MULTICAST_ALL;
    }
    private static final int IPV6_ROUTER_ALERT_ISOLATE = (int)30L;

    /**
     * {@snippet lang=c :
     * #define IPV6_ROUTER_ALERT_ISOLATE 30
     * }
     */
    public static int IPV6_ROUTER_ALERT_ISOLATE() {
        return IPV6_ROUTER_ALERT_ISOLATE;
    }
    private static final int IPV6_RECVERR_RFC4884 = (int)31L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVERR_RFC4884 31
     * }
     */
    public static int IPV6_RECVERR_RFC4884() {
        return IPV6_RECVERR_RFC4884;
    }
    private static final int IPV6_IPSEC_POLICY = (int)34L;

    /**
     * {@snippet lang=c :
     * #define IPV6_IPSEC_POLICY 34
     * }
     */
    public static int IPV6_IPSEC_POLICY() {
        return IPV6_IPSEC_POLICY;
    }
    private static final int IPV6_XFRM_POLICY = (int)35L;

    /**
     * {@snippet lang=c :
     * #define IPV6_XFRM_POLICY 35
     * }
     */
    public static int IPV6_XFRM_POLICY() {
        return IPV6_XFRM_POLICY;
    }
    private static final int IPV6_HDRINCL = (int)36L;

    /**
     * {@snippet lang=c :
     * #define IPV6_HDRINCL 36
     * }
     */
    public static int IPV6_HDRINCL() {
        return IPV6_HDRINCL;
    }
    private static final int IPV6_RECVPKTINFO = (int)49L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVPKTINFO 49
     * }
     */
    public static int IPV6_RECVPKTINFO() {
        return IPV6_RECVPKTINFO;
    }
    private static final int IPV6_PKTINFO = (int)50L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PKTINFO 50
     * }
     */
    public static int IPV6_PKTINFO() {
        return IPV6_PKTINFO;
    }
    private static final int IPV6_RECVHOPLIMIT = (int)51L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVHOPLIMIT 51
     * }
     */
    public static int IPV6_RECVHOPLIMIT() {
        return IPV6_RECVHOPLIMIT;
    }
    private static final int IPV6_HOPLIMIT = (int)52L;

    /**
     * {@snippet lang=c :
     * #define IPV6_HOPLIMIT 52
     * }
     */
    public static int IPV6_HOPLIMIT() {
        return IPV6_HOPLIMIT;
    }
    private static final int IPV6_RECVHOPOPTS = (int)53L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVHOPOPTS 53
     * }
     */
    public static int IPV6_RECVHOPOPTS() {
        return IPV6_RECVHOPOPTS;
    }
    private static final int IPV6_HOPOPTS = (int)54L;

    /**
     * {@snippet lang=c :
     * #define IPV6_HOPOPTS 54
     * }
     */
    public static int IPV6_HOPOPTS() {
        return IPV6_HOPOPTS;
    }
    private static final int IPV6_RTHDRDSTOPTS = (int)55L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDRDSTOPTS 55
     * }
     */
    public static int IPV6_RTHDRDSTOPTS() {
        return IPV6_RTHDRDSTOPTS;
    }
    private static final int IPV6_RECVRTHDR = (int)56L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVRTHDR 56
     * }
     */
    public static int IPV6_RECVRTHDR() {
        return IPV6_RECVRTHDR;
    }
    private static final int IPV6_RTHDR = (int)57L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR 57
     * }
     */
    public static int IPV6_RTHDR() {
        return IPV6_RTHDR;
    }
    private static final int IPV6_RECVDSTOPTS = (int)58L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVDSTOPTS 58
     * }
     */
    public static int IPV6_RECVDSTOPTS() {
        return IPV6_RECVDSTOPTS;
    }
    private static final int IPV6_DSTOPTS = (int)59L;

    /**
     * {@snippet lang=c :
     * #define IPV6_DSTOPTS 59
     * }
     */
    public static int IPV6_DSTOPTS() {
        return IPV6_DSTOPTS;
    }
    private static final int IPV6_RECVPATHMTU = (int)60L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVPATHMTU 60
     * }
     */
    public static int IPV6_RECVPATHMTU() {
        return IPV6_RECVPATHMTU;
    }
    private static final int IPV6_PATHMTU = (int)61L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PATHMTU 61
     * }
     */
    public static int IPV6_PATHMTU() {
        return IPV6_PATHMTU;
    }
    private static final int IPV6_DONTFRAG = (int)62L;

    /**
     * {@snippet lang=c :
     * #define IPV6_DONTFRAG 62
     * }
     */
    public static int IPV6_DONTFRAG() {
        return IPV6_DONTFRAG;
    }
    private static final int IPV6_RECVTCLASS = (int)66L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVTCLASS 66
     * }
     */
    public static int IPV6_RECVTCLASS() {
        return IPV6_RECVTCLASS;
    }
    private static final int IPV6_TCLASS = (int)67L;

    /**
     * {@snippet lang=c :
     * #define IPV6_TCLASS 67
     * }
     */
    public static int IPV6_TCLASS() {
        return IPV6_TCLASS;
    }
    private static final int IPV6_AUTOFLOWLABEL = (int)70L;

    /**
     * {@snippet lang=c :
     * #define IPV6_AUTOFLOWLABEL 70
     * }
     */
    public static int IPV6_AUTOFLOWLABEL() {
        return IPV6_AUTOFLOWLABEL;
    }
    private static final int IPV6_ADDR_PREFERENCES = (int)72L;

    /**
     * {@snippet lang=c :
     * #define IPV6_ADDR_PREFERENCES 72
     * }
     */
    public static int IPV6_ADDR_PREFERENCES() {
        return IPV6_ADDR_PREFERENCES;
    }
    private static final int IPV6_MINHOPCOUNT = (int)73L;

    /**
     * {@snippet lang=c :
     * #define IPV6_MINHOPCOUNT 73
     * }
     */
    public static int IPV6_MINHOPCOUNT() {
        return IPV6_MINHOPCOUNT;
    }
    private static final int IPV6_ORIGDSTADDR = (int)74L;

    /**
     * {@snippet lang=c :
     * #define IPV6_ORIGDSTADDR 74
     * }
     */
    public static int IPV6_ORIGDSTADDR() {
        return IPV6_ORIGDSTADDR;
    }
    private static final int IPV6_TRANSPARENT = (int)75L;

    /**
     * {@snippet lang=c :
     * #define IPV6_TRANSPARENT 75
     * }
     */
    public static int IPV6_TRANSPARENT() {
        return IPV6_TRANSPARENT;
    }
    private static final int IPV6_UNICAST_IF = (int)76L;

    /**
     * {@snippet lang=c :
     * #define IPV6_UNICAST_IF 76
     * }
     */
    public static int IPV6_UNICAST_IF() {
        return IPV6_UNICAST_IF;
    }
    private static final int IPV6_RECVFRAGSIZE = (int)77L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVFRAGSIZE 77
     * }
     */
    public static int IPV6_RECVFRAGSIZE() {
        return IPV6_RECVFRAGSIZE;
    }
    private static final int IPV6_FREEBIND = (int)78L;

    /**
     * {@snippet lang=c :
     * #define IPV6_FREEBIND 78
     * }
     */
    public static int IPV6_FREEBIND() {
        return IPV6_FREEBIND;
    }
    private static final int IPV6_PMTUDISC_DONT = (int)0L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PMTUDISC_DONT 0
     * }
     */
    public static int IPV6_PMTUDISC_DONT() {
        return IPV6_PMTUDISC_DONT;
    }
    private static final int IPV6_PMTUDISC_WANT = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PMTUDISC_WANT 1
     * }
     */
    public static int IPV6_PMTUDISC_WANT() {
        return IPV6_PMTUDISC_WANT;
    }
    private static final int IPV6_PMTUDISC_DO = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PMTUDISC_DO 2
     * }
     */
    public static int IPV6_PMTUDISC_DO() {
        return IPV6_PMTUDISC_DO;
    }
    private static final int IPV6_PMTUDISC_PROBE = (int)3L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PMTUDISC_PROBE 3
     * }
     */
    public static int IPV6_PMTUDISC_PROBE() {
        return IPV6_PMTUDISC_PROBE;
    }
    private static final int IPV6_PMTUDISC_INTERFACE = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PMTUDISC_INTERFACE 4
     * }
     */
    public static int IPV6_PMTUDISC_INTERFACE() {
        return IPV6_PMTUDISC_INTERFACE;
    }
    private static final int IPV6_PMTUDISC_OMIT = (int)5L;

    /**
     * {@snippet lang=c :
     * #define IPV6_PMTUDISC_OMIT 5
     * }
     */
    public static int IPV6_PMTUDISC_OMIT() {
        return IPV6_PMTUDISC_OMIT;
    }
    private static final int SOL_IPV6 = (int)41L;

    /**
     * {@snippet lang=c :
     * #define SOL_IPV6 41
     * }
     */
    public static int SOL_IPV6() {
        return SOL_IPV6;
    }
    private static final int SOL_ICMPV6 = (int)58L;

    /**
     * {@snippet lang=c :
     * #define SOL_ICMPV6 58
     * }
     */
    public static int SOL_ICMPV6() {
        return SOL_ICMPV6;
    }
    private static final int IPV6_RTHDR_LOOSE = (int)0L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR_LOOSE 0
     * }
     */
    public static int IPV6_RTHDR_LOOSE() {
        return IPV6_RTHDR_LOOSE;
    }
    private static final int IPV6_RTHDR_STRICT = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR_STRICT 1
     * }
     */
    public static int IPV6_RTHDR_STRICT() {
        return IPV6_RTHDR_STRICT;
    }
    private static final int IPV6_RTHDR_TYPE_0 = (int)0L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RTHDR_TYPE_0 0
     * }
     */
    public static int IPV6_RTHDR_TYPE_0() {
        return IPV6_RTHDR_TYPE_0;
    }
    private static final int IN_CLASSA_NSHIFT = (int)24L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_NSHIFT 24
     * }
     */
    public static int IN_CLASSA_NSHIFT() {
        return IN_CLASSA_NSHIFT;
    }
    private static final int IN_CLASSA_MAX = (int)128L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_MAX 128
     * }
     */
    public static int IN_CLASSA_MAX() {
        return IN_CLASSA_MAX;
    }
    private static final int IN_CLASSB_NSHIFT = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_NSHIFT 16
     * }
     */
    public static int IN_CLASSB_NSHIFT() {
        return IN_CLASSB_NSHIFT;
    }
    private static final int IN_CLASSB_MAX = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_MAX 65536
     * }
     */
    public static int IN_CLASSB_MAX() {
        return IN_CLASSB_MAX;
    }
    private static final int IN_CLASSC_NSHIFT = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_NSHIFT 8
     * }
     */
    public static int IN_CLASSC_NSHIFT() {
        return IN_CLASSC_NSHIFT;
    }
    private static final int IN_LOOPBACKNET = (int)127L;

    /**
     * {@snippet lang=c :
     * #define IN_LOOPBACKNET 127
     * }
     */
    public static int IN_LOOPBACKNET() {
        return IN_LOOPBACKNET;
    }
    private static final int INET_ADDRSTRLEN = (int)16L;

    /**
     * {@snippet lang=c :
     * #define INET_ADDRSTRLEN 16
     * }
     */
    public static int INET_ADDRSTRLEN() {
        return INET_ADDRSTRLEN;
    }
    private static final int INET6_ADDRSTRLEN = (int)46L;

    /**
     * {@snippet lang=c :
     * #define INET6_ADDRSTRLEN 46
     * }
     */
    public static int INET6_ADDRSTRLEN() {
        return INET6_ADDRSTRLEN;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __clock_t clock_t
     * }
     */
    public static final OfLong clock_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __clockid_t clockid_t
     * }
     */
    public static final OfInt clockid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __timer_t timer_t
     * }
     */
    public static final AddressLayout timer_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef struct __locale_struct {
     *     struct __locale_data *__locales[13];
     *     const unsigned short *__ctype_b;
     *     const int *__ctype_tolower;
     *     const int *__ctype_toupper;
     *     const char *__names[13];
     * } *__locale_t
     * }
     */
    public static final AddressLayout __locale_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __locale_t locale_t
     * }
     */
    public static final AddressLayout locale_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * extern clock_t clock(void)
     * }
     */
    public static MethodHandle clock$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG        );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("clock"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long clock() {
        var mh$ = clock$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clock");
            }
            return (long) mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern time_t time(time_t *__timer)
     * }
     */
    public static MethodHandle time$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("time"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long time(MemorySegment __timer) {
        var mh$ = time$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("time", __timer);
            }
            return (long) mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern double difftime(time_t __time1, time_t __time0)
     * }
     */
    public static MethodHandle difftime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_DOUBLE,
                iouring_h.C_LONG,
                iouring_h.C_LONG
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("difftime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static double difftime(long __time1, long __time0) {
        var mh$ = difftime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("difftime", __time1, __time0);
            }
            return (double) mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern time_t mktime(struct tm *__tp)
     * }
     */
    public static MethodHandle mktime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("mktime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long mktime(MemorySegment __tp) {
        var mh$ = mktime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mktime", __tp);
            }
            return (long) mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern size_t strftime(char *restrict __s, size_t __maxsize, const char *restrict __format, const struct tm *restrict __tp)
     * }
     */
    public static MethodHandle strftime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_POINTER,
                iouring_h.C_LONG,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("strftime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long strftime(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp) {
        var mh$ = strftime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strftime", __s, __maxsize, __format, __tp);
            }
            return (long) mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern size_t strftime_l(char *restrict __s, size_t __maxsize, const char *restrict __format, const struct tm *restrict __tp, locale_t __loc)
     * }
     */
    public static MethodHandle strftime_l$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_POINTER,
                iouring_h.C_LONG,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("strftime_l"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long strftime_l(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp, MemorySegment __loc) {
        var mh$ = strftime_l$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strftime_l", __s, __maxsize, __format, __tp, __loc);
            }
            return (long) mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern struct tm *gmtime(const time_t *__timer)
     * }
     */
    public static MethodHandle gmtime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("gmtime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment gmtime(MemorySegment __timer) {
        var mh$ = gmtime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gmtime", __timer);
            }
            return (MemorySegment) mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern struct tm *localtime(const time_t *__timer)
     * }
     */
    public static MethodHandle localtime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("localtime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment localtime(MemorySegment __timer) {
        var mh$ = localtime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("localtime", __timer);
            }
            return (MemorySegment) mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern struct tm *gmtime_r(const time_t *restrict __timer, struct tm *restrict __tp)
     * }
     */
    public static MethodHandle gmtime_r$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("gmtime_r"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment gmtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = gmtime_r$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gmtime_r", __timer, __tp);
            }
            return (MemorySegment) mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern struct tm *localtime_r(const time_t *restrict __timer, struct tm *restrict __tp)
     * }
     */
    public static MethodHandle localtime_r$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("localtime_r"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment localtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = localtime_r$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("localtime_r", __timer, __tp);
            }
            return (MemorySegment) mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern char *asctime(const struct tm *__tp)
     * }
     */
    public static MethodHandle asctime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("asctime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment asctime(MemorySegment __tp) {
        var mh$ = asctime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asctime", __tp);
            }
            return (MemorySegment) mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern char *ctime(const time_t *__timer)
     * }
     */
    public static MethodHandle ctime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("ctime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment ctime(MemorySegment __timer) {
        var mh$ = ctime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctime", __timer);
            }
            return (MemorySegment) mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern char *asctime_r(const struct tm *restrict __tp, char *restrict __buf)
     * }
     */
    public static MethodHandle asctime_r$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("asctime_r"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment asctime_r(MemorySegment __tp, MemorySegment __buf) {
        var mh$ = asctime_r$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("asctime_r", __tp, __buf);
            }
            return (MemorySegment) mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern char *ctime_r(const time_t *restrict __timer, char *restrict __buf)
     * }
     */
    public static MethodHandle ctime_r$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("ctime_r"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment ctime_r(MemorySegment __timer, MemorySegment __buf) {
        var mh$ = ctime_r$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctime_r", __timer, __buf);
            }
            return (MemorySegment) mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    public static SequenceLayout __tzname$LAYOUT() {
        class Holder {
            static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, iouring_h.C_POINTER);
        }
        return Holder.LAYOUT;
    }
    /**
     * {@snippet lang=c :
     * extern char *__tzname[2]
     * }
     */
    public static MemorySegment __tzname$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("__tzname")
                .reinterpret(__tzname$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    public static OfInt __daylight$LAYOUT() {
        class Holder {
            static final OfInt LAYOUT = iouring_h.C_INT;
        }
        return Holder.LAYOUT;
    }
    public static MemorySegment __daylight$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("__daylight")
                .reinterpret(__daylight$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int __daylight
     * }
     */
    public static int __daylight() {
        return __daylight$SEGMENT().get(__daylight$LAYOUT(), 0L);
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int __daylight
     * }
     */
    public static void __daylight(int x) {
        __daylight$SEGMENT().set(__daylight$LAYOUT(), 0L, x);
    }
    public static OfLong __timezone$LAYOUT() {
        class Holder {
            static final OfLong LAYOUT = iouring_h.C_LONG;
        }
        return Holder.LAYOUT;
    }
    public static MemorySegment __timezone$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("__timezone")
                .reinterpret(__timezone$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern long __timezone
     * }
     */
    public static long __timezone() {
        return __timezone$SEGMENT().get(__timezone$LAYOUT(), 0L);
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern long __timezone
     * }
     */
    public static void __timezone(long x) {
        __timezone$SEGMENT().set(__timezone$LAYOUT(), 0L, x);
    }
    public static SequenceLayout tzname$LAYOUT() {
        class Holder {
            static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, iouring_h.C_POINTER);
        }
        return Holder.LAYOUT;
    }
    /**
     * {@snippet lang=c :
     * extern char *tzname[2]
     * }
     */
    public static MemorySegment tzname$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("tzname")
                .reinterpret(tzname$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    /**
     * {@snippet lang=c :
     * extern void tzset(void)
     * }
     */
    public static MethodHandle tzset$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(        );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("tzset"),
                    DESC);
        }
        return Holder.MH;
    }

    public static void tzset() {
        var mh$ = tzset$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tzset");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt daylight$LAYOUT() {
        class Holder {
            static final OfInt LAYOUT = iouring_h.C_INT;
        }
        return Holder.LAYOUT;
    }
    public static MemorySegment daylight$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("daylight")
                .reinterpret(daylight$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int daylight
     * }
     */
    public static int daylight() {
        return daylight$SEGMENT().get(daylight$LAYOUT(), 0L);
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int daylight
     * }
     */
    public static void daylight(int x) {
        daylight$SEGMENT().set(daylight$LAYOUT(), 0L, x);
    }
    public static OfLong timezone$LAYOUT() {
        class Holder {
            static final OfLong LAYOUT = iouring_h.C_LONG;
        }
        return Holder.LAYOUT;
    }
    public static MemorySegment timezone$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("timezone")
                .reinterpret(timezone$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern long timezone
     * }
     */
    public static long timezone() {
        return timezone$SEGMENT().get(timezone$LAYOUT(), 0L);
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern long timezone
     * }
     */
    public static void timezone(long x) {
        timezone$SEGMENT().set(timezone$LAYOUT(), 0L, x);
    }
    /**
     * {@snippet lang=c :
     * extern time_t timegm(struct tm *__tp)
     * }
     */
    public static MethodHandle timegm$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timegm"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long timegm(MemorySegment __tp) {
        var mh$ = timegm$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timegm", __tp);
            }
            return (long) mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern time_t timelocal(struct tm *__tp)
     * }
     */
    public static MethodHandle timelocal$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timelocal"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long timelocal(MemorySegment __tp) {
        var mh$ = timelocal$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timelocal", __tp);
            }
            return (long) mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int dysize(int __year)
     * }
     */
    public static MethodHandle dysize$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("dysize"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int dysize(int __year) {
        var mh$ = dysize$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dysize", __year);
            }
            return (int) mh$.invokeExact(__year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining)
     * }
     */
    public static MethodHandle nanosleep$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("nanosleep"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int nanosleep(MemorySegment __requested_time, MemorySegment __remaining) {
        var mh$ = nanosleep$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nanosleep", __requested_time, __remaining);
            }
            return (int) mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int clock_getres(clockid_t __clock_id, struct timespec *__res)
     * }
     */
    public static MethodHandle clock_getres$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("clock_getres"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int clock_getres(int __clock_id, MemorySegment __res) {
        var mh$ = clock_getres$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clock_getres", __clock_id, __res);
            }
            return (int) mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int clock_gettime(clockid_t __clock_id, struct timespec *__tp)
     * }
     */
    public static MethodHandle clock_gettime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("clock_gettime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int clock_gettime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_gettime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clock_gettime", __clock_id, __tp);
            }
            return (int) mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int clock_settime(clockid_t __clock_id, const struct timespec *__tp)
     * }
     */
    public static MethodHandle clock_settime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("clock_settime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int clock_settime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_settime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clock_settime", __clock_id, __tp);
            }
            return (int) mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem)
     * }
     */
    public static MethodHandle clock_nanosleep$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("clock_nanosleep"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int clock_nanosleep(int __clock_id, int __flags, MemorySegment __req, MemorySegment __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clock_nanosleep", __clock_id, __flags, __req, __rem);
            }
            return (int) mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id)
     * }
     */
    public static MethodHandle clock_getcpuclockid$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("clock_getcpuclockid"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int clock_getcpuclockid(int __pid, MemorySegment __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clock_getcpuclockid", __pid, __clock_id);
            }
            return (int) mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int timer_create(clockid_t __clock_id, struct sigevent *restrict __evp, timer_t *restrict __timerid)
     * }
     */
    public static MethodHandle timer_create$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timer_create"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int timer_create(int __clock_id, MemorySegment __evp, MemorySegment __timerid) {
        var mh$ = timer_create$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timer_create", __clock_id, __evp, __timerid);
            }
            return (int) mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int timer_delete(timer_t __timerid)
     * }
     */
    public static MethodHandle timer_delete$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timer_delete"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int timer_delete(MemorySegment __timerid) {
        var mh$ = timer_delete$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timer_delete", __timerid);
            }
            return (int) mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *restrict __value, struct itimerspec *restrict __ovalue)
     * }
     */
    public static MethodHandle timer_settime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timer_settime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int timer_settime(MemorySegment __timerid, int __flags, MemorySegment __value, MemorySegment __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timer_settime", __timerid, __flags, __value, __ovalue);
            }
            return (int) mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int timer_gettime(timer_t __timerid, struct itimerspec *__value)
     * }
     */
    public static MethodHandle timer_gettime$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timer_gettime"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int timer_gettime(MemorySegment __timerid, MemorySegment __value) {
        var mh$ = timer_gettime$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timer_gettime", __timerid, __value);
            }
            return (int) mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int timer_getoverrun(timer_t __timerid)
     * }
     */
    public static MethodHandle timer_getoverrun$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timer_getoverrun"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int timer_getoverrun(MemorySegment __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timer_getoverrun", __timerid);
            }
            return (int) mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int timespec_get(struct timespec *__ts, int __base)
     * }
     */
    public static MethodHandle timespec_get$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("timespec_get"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int timespec_get(MemorySegment __ts, int __base) {
        var mh$ = timespec_get$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timespec_get", __ts, __base);
            }
            return (int) mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = iouring_h.C_LONG;
    public interface fcntl$invoker {
        int fcntl(int __fd, int __cmd, Object... x2);
    }

    /**
     * {@snippet lang=c :
     * extern int fcntl(int __fd, int __cmd, ...)
     * }
     */
    public static fcntl$invoker fcntl$makeInvoker(MemoryLayout... layouts) {
        FunctionDescriptor baseDesc$ = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT
            );
        var mh$ = iouring_h.downcallHandleVariadic("fcntl", baseDesc$, layouts);
        return (int __fd, int __cmd, Object... x2) -> {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fcntl", __fd, __cmd, x2);
                }
                return (int) mh$.invokeExact(__fd, __cmd, x2);
            } catch(IllegalArgumentException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        };
    }

    /**
     * {@snippet lang=c :
     * extern int fcntl(int __fd, int __cmd, ...)
     * }
     */
    public static int fcntl(int __fd, int __cmd, Object... x2) {
        MemoryLayout[] inferredLayouts$ = iouring_h.inferVariadicLayouts(x2);
        return fcntl$makeInvoker(inferredLayouts$).fcntl(__fd, __cmd, x2);
    }
    public interface open$invoker {
        int open(MemorySegment __file, int __oflag, Object... x2);
    }

    /**
     * {@snippet lang=c :
     * extern int open(const char *__file, int __oflag, ...)
     * }
     */
    public static open$invoker open$makeInvoker(MemoryLayout... layouts) {
        FunctionDescriptor baseDesc$ = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );
        var mh$ = iouring_h.downcallHandleVariadic("open", baseDesc$, layouts);
        return (MemorySegment __file, int __oflag, Object... x2) -> {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("open", __file, __oflag, x2);
                }
                return (int) mh$.invokeExact(__file, __oflag, x2);
            } catch(IllegalArgumentException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        };
    }

    /**
     * {@snippet lang=c :
     * extern int open(const char *__file, int __oflag, ...)
     * }
     */
    public static int open(MemorySegment __file, int __oflag, Object... x2) {
        MemoryLayout[] inferredLayouts$ = iouring_h.inferVariadicLayouts(x2);
        return open$makeInvoker(inferredLayouts$).open(__file, __oflag, x2);
    }
    public interface openat$invoker {
        int openat(int __fd, MemorySegment __file, int __oflag, Object... x3);
    }

    /**
     * {@snippet lang=c :
     * extern int openat(int __fd, const char *__file, int __oflag, ...)
     * }
     */
    public static openat$invoker openat$makeInvoker(MemoryLayout... layouts) {
        FunctionDescriptor baseDesc$ = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );
        var mh$ = iouring_h.downcallHandleVariadic("openat", baseDesc$, layouts);
        return (int __fd, MemorySegment __file, int __oflag, Object... x3) -> {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("openat", __fd, __file, __oflag, x3);
                }
                return (int) mh$.invokeExact(__fd, __file, __oflag, x3);
            } catch(IllegalArgumentException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        };
    }

    /**
     * {@snippet lang=c :
     * extern int openat(int __fd, const char *__file, int __oflag, ...)
     * }
     */
    public static int openat(int __fd, MemorySegment __file, int __oflag, Object... x3) {
        MemoryLayout[] inferredLayouts$ = iouring_h.inferVariadicLayouts(x3);
        return openat$makeInvoker(inferredLayouts$).openat(__fd, __file, __oflag, x3);
    }
    /**
     * {@snippet lang=c :
     * extern int creat(const char *__file, mode_t __mode)
     * }
     */
    public static MethodHandle creat$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("creat"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int creat(MemorySegment __file, int __mode) {
        var mh$ = creat$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("creat", __file, __mode);
            }
            return (int) mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, off_t __len)
     * }
     */
    public static MethodHandle lockf$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_LONG
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("lockf"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int lockf(int __fd, int __cmd, long __len) {
        var mh$ = lockf$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lockf", __fd, __cmd, __len);
            }
            return (int) mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise)
     * }
     */
    public static MethodHandle posix_fadvise$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_LONG,
                iouring_h.C_LONG,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("posix_fadvise"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int posix_fadvise(int __fd, long __offset, long __len, int __advise) {
        var mh$ = posix_fadvise$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("posix_fadvise", __fd, __offset, __len, __advise);
            }
            return (int) mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int posix_fallocate(int __fd, off_t __offset, off_t __len)
     * }
     */
    public static MethodHandle posix_fallocate$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_LONG,
                iouring_h.C_LONG
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("posix_fallocate"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int posix_fallocate(int __fd, long __offset, long __len) {
        var mh$ = posix_fallocate$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("posix_fallocate", __fd, __offset, __len);
            }
            return (int) mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfLong nlink_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("select"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int) mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("pselect"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int) mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfLong blksize_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __tss_t
     * }
     */
    public static final OfInt __tss_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __thrd_t
     * }
     */
    public static final OfLong __thrd_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static MethodHandle readv$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("readv"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long readv(int __fd, MemorySegment __iovec, int __count) {
        var mh$ = readv$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readv", __fd, __iovec, __count);
            }
            return (long) mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static MethodHandle writev$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("writev"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long writev(int __fd, MemorySegment __iovec, int __count) {
        var mh$ = writev$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("writev", __fd, __iovec, __count);
            }
            return (long) mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static MethodHandle preadv$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT,
                iouring_h.C_LONG
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("preadv"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long preadv(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = preadv$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("preadv", __fd, __iovec, __count, __offset);
            }
            return (long) mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static MethodHandle pwritev$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT,
                iouring_h.C_LONG
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("pwritev"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long pwritev(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = pwritev$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pwritev", __fd, __iovec, __count, __offset);
            }
            return (long) mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef signed char __s8
     * }
     */
    public static final OfByte __s8 = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u8
     * }
     */
    public static final OfByte __u8 = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __s16
     * }
     */
    public static final OfShort __s16 = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u16
     * }
     */
    public static final OfShort __u16 = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __s32
     * }
     */
    public static final OfInt __s32 = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u32
     * }
     */
    public static final OfInt __u32 = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __s64
     * }
     */
    public static final OfLong __s64 = iouring_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __u64
     * }
     */
    public static final OfLong __u64 = iouring_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_key_t
     * }
     */
    public static final OfInt __kernel_key_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_mqd_t
     * }
     */
    public static final OfInt __kernel_mqd_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_uid_t
     * }
     */
    public static final OfShort __kernel_old_uid_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_gid_t
     * }
     */
    public static final OfShort __kernel_old_gid_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __kernel_old_dev_t
     * }
     */
    public static final OfLong __kernel_old_dev_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __kernel_long_t
     * }
     */
    public static final OfLong __kernel_long_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __kernel_ulong_t
     * }
     */
    public static final OfLong __kernel_ulong_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_ino_t
     * }
     */
    public static final OfLong __kernel_ino_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_mode_t
     * }
     */
    public static final OfInt __kernel_mode_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_pid_t
     * }
     */
    public static final OfInt __kernel_pid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_ipc_pid_t
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid_t
     * }
     */
    public static final OfInt __kernel_uid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid_t
     * }
     */
    public static final OfInt __kernel_gid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_suseconds_t
     * }
     */
    public static final OfLong __kernel_suseconds_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_daddr_t
     * }
     */
    public static final OfInt __kernel_daddr_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid32_t
     * }
     */
    public static final OfInt __kernel_uid32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid32_t
     * }
     */
    public static final OfInt __kernel_gid32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_size_t
     * }
     */
    public static final OfLong __kernel_size_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ssize_t
     * }
     */
    public static final OfLong __kernel_ssize_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ptrdiff_t
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_off_t
     * }
     */
    public static final OfLong __kernel_off_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_loff_t
     * }
     */
    public static final OfLong __kernel_loff_t = iouring_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_old_time_t
     * }
     */
    public static final OfLong __kernel_old_time_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_time_t
     * }
     */
    public static final OfLong __kernel_time_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_time64_t
     * }
     */
    public static final OfLong __kernel_time64_t = iouring_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_clock_t
     * }
     */
    public static final OfLong __kernel_clock_t = iouring_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_timer_t
     * }
     */
    public static final OfInt __kernel_timer_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_clockid_t
     * }
     */
    public static final OfInt __kernel_clockid_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef char *__kernel_caddr_t
     * }
     */
    public static final AddressLayout __kernel_caddr_t = iouring_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_uid16_t
     * }
     */
    public static final OfShort __kernel_uid16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_gid16_t
     * }
     */
    public static final OfShort __kernel_gid16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u16 __le16
     * }
     */
    public static final OfShort __le16 = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u16 __be16
     * }
     */
    public static final OfShort __be16 = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __le32
     * }
     */
    public static final OfInt __le32 = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __be32
     * }
     */
    public static final OfInt __be32 = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u64 __le64
     * }
     */
    public static final OfLong __le64 = iouring_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u64 __be64
     * }
     */
    public static final OfLong __be64 = iouring_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u16 __sum16
     * }
     */
    public static final OfShort __sum16 = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __wsum
     * }
     */
    public static final OfInt __wsum = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __poll_t
     * }
     */
    public static final OfInt __poll_t = iouring_h.C_INT;
    private static final int FSCONFIG_SET_FLAG = (int)0L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_SET_FLAG = 0
     * }
     */
    public static int FSCONFIG_SET_FLAG() {
        return FSCONFIG_SET_FLAG;
    }
    private static final int FSCONFIG_SET_STRING = (int)1L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_SET_STRING = 1
     * }
     */
    public static int FSCONFIG_SET_STRING() {
        return FSCONFIG_SET_STRING;
    }
    private static final int FSCONFIG_SET_BINARY = (int)2L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_SET_BINARY = 2
     * }
     */
    public static int FSCONFIG_SET_BINARY() {
        return FSCONFIG_SET_BINARY;
    }
    private static final int FSCONFIG_SET_PATH = (int)3L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_SET_PATH = 3
     * }
     */
    public static int FSCONFIG_SET_PATH() {
        return FSCONFIG_SET_PATH;
    }
    private static final int FSCONFIG_SET_PATH_EMPTY = (int)4L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_SET_PATH_EMPTY = 4
     * }
     */
    public static int FSCONFIG_SET_PATH_EMPTY() {
        return FSCONFIG_SET_PATH_EMPTY;
    }
    private static final int FSCONFIG_SET_FD = (int)5L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_SET_FD = 5
     * }
     */
    public static int FSCONFIG_SET_FD() {
        return FSCONFIG_SET_FD;
    }
    private static final int FSCONFIG_CMD_CREATE = (int)6L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_CMD_CREATE = 6
     * }
     */
    public static int FSCONFIG_CMD_CREATE() {
        return FSCONFIG_CMD_CREATE;
    }
    private static final int FSCONFIG_CMD_RECONFIGURE = (int)7L;

    /**
     * {@snippet lang=c :
     * enum fsconfig_command.FSCONFIG_CMD_RECONFIGURE = 7
     * }
     */
    public static int FSCONFIG_CMD_RECONFIGURE() {
        return FSCONFIG_CMD_RECONFIGURE;
    }
    /**
     * {@snippet lang=c :
     * typedef int __kernel_rwf_t
     * }
     */
    public static final OfInt __kernel_rwf_t = iouring_h.C_INT;
    private static final int IOSQE_FIXED_FILE_BIT = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_FIXED_FILE_BIT = 0
     * }
     */
    public static int IOSQE_FIXED_FILE_BIT() {
        return IOSQE_FIXED_FILE_BIT;
    }
    private static final int IOSQE_IO_DRAIN_BIT = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_IO_DRAIN_BIT = 1
     * }
     */
    public static int IOSQE_IO_DRAIN_BIT() {
        return IOSQE_IO_DRAIN_BIT;
    }
    private static final int IOSQE_IO_LINK_BIT = (int)2L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_IO_LINK_BIT = 2
     * }
     */
    public static int IOSQE_IO_LINK_BIT() {
        return IOSQE_IO_LINK_BIT;
    }
    private static final int IOSQE_IO_HARDLINK_BIT = (int)3L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_IO_HARDLINK_BIT = 3
     * }
     */
    public static int IOSQE_IO_HARDLINK_BIT() {
        return IOSQE_IO_HARDLINK_BIT;
    }
    private static final int IOSQE_ASYNC_BIT = (int)4L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_ASYNC_BIT = 4
     * }
     */
    public static int IOSQE_ASYNC_BIT() {
        return IOSQE_ASYNC_BIT;
    }
    private static final int IOSQE_BUFFER_SELECT_BIT = (int)5L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_BUFFER_SELECT_BIT = 5
     * }
     */
    public static int IOSQE_BUFFER_SELECT_BIT() {
        return IOSQE_BUFFER_SELECT_BIT;
    }
    private static final int IOSQE_CQE_SKIP_SUCCESS_BIT = (int)6L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IOSQE_CQE_SKIP_SUCCESS_BIT = 6
     * }
     */
    public static int IOSQE_CQE_SKIP_SUCCESS_BIT() {
        return IOSQE_CQE_SKIP_SUCCESS_BIT;
    }
    private static final int IORING_OP_NOP = (int)0L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_NOP = 0
     * }
     */
    public static int IORING_OP_NOP() {
        return IORING_OP_NOP;
    }
    private static final int IORING_OP_READV = (int)1L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_READV = 1
     * }
     */
    public static int IORING_OP_READV() {
        return IORING_OP_READV;
    }
    private static final int IORING_OP_WRITEV = (int)2L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_WRITEV = 2
     * }
     */
    public static int IORING_OP_WRITEV() {
        return IORING_OP_WRITEV;
    }
    private static final int IORING_OP_FSYNC = (int)3L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_FSYNC = 3
     * }
     */
    public static int IORING_OP_FSYNC() {
        return IORING_OP_FSYNC;
    }
    private static final int IORING_OP_READ_FIXED = (int)4L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_READ_FIXED = 4
     * }
     */
    public static int IORING_OP_READ_FIXED() {
        return IORING_OP_READ_FIXED;
    }
    private static final int IORING_OP_WRITE_FIXED = (int)5L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_WRITE_FIXED = 5
     * }
     */
    public static int IORING_OP_WRITE_FIXED() {
        return IORING_OP_WRITE_FIXED;
    }
    private static final int IORING_OP_POLL_ADD = (int)6L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_POLL_ADD = 6
     * }
     */
    public static int IORING_OP_POLL_ADD() {
        return IORING_OP_POLL_ADD;
    }
    private static final int IORING_OP_POLL_REMOVE = (int)7L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_POLL_REMOVE = 7
     * }
     */
    public static int IORING_OP_POLL_REMOVE() {
        return IORING_OP_POLL_REMOVE;
    }
    private static final int IORING_OP_SYNC_FILE_RANGE = (int)8L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SYNC_FILE_RANGE = 8
     * }
     */
    public static int IORING_OP_SYNC_FILE_RANGE() {
        return IORING_OP_SYNC_FILE_RANGE;
    }
    private static final int IORING_OP_SENDMSG = (int)9L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SENDMSG = 9
     * }
     */
    public static int IORING_OP_SENDMSG() {
        return IORING_OP_SENDMSG;
    }
    private static final int IORING_OP_RECVMSG = (int)10L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_RECVMSG = 10
     * }
     */
    public static int IORING_OP_RECVMSG() {
        return IORING_OP_RECVMSG;
    }
    private static final int IORING_OP_TIMEOUT = (int)11L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_TIMEOUT = 11
     * }
     */
    public static int IORING_OP_TIMEOUT() {
        return IORING_OP_TIMEOUT;
    }
    private static final int IORING_OP_TIMEOUT_REMOVE = (int)12L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_TIMEOUT_REMOVE = 12
     * }
     */
    public static int IORING_OP_TIMEOUT_REMOVE() {
        return IORING_OP_TIMEOUT_REMOVE;
    }
    private static final int IORING_OP_ACCEPT = (int)13L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_ACCEPT = 13
     * }
     */
    public static int IORING_OP_ACCEPT() {
        return IORING_OP_ACCEPT;
    }
    private static final int IORING_OP_ASYNC_CANCEL = (int)14L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_ASYNC_CANCEL = 14
     * }
     */
    public static int IORING_OP_ASYNC_CANCEL() {
        return IORING_OP_ASYNC_CANCEL;
    }
    private static final int IORING_OP_LINK_TIMEOUT = (int)15L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_LINK_TIMEOUT = 15
     * }
     */
    public static int IORING_OP_LINK_TIMEOUT() {
        return IORING_OP_LINK_TIMEOUT;
    }
    private static final int IORING_OP_CONNECT = (int)16L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_CONNECT = 16
     * }
     */
    public static int IORING_OP_CONNECT() {
        return IORING_OP_CONNECT;
    }
    private static final int IORING_OP_FALLOCATE = (int)17L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_FALLOCATE = 17
     * }
     */
    public static int IORING_OP_FALLOCATE() {
        return IORING_OP_FALLOCATE;
    }
    private static final int IORING_OP_OPENAT = (int)18L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_OPENAT = 18
     * }
     */
    public static int IORING_OP_OPENAT() {
        return IORING_OP_OPENAT;
    }
    private static final int IORING_OP_CLOSE = (int)19L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_CLOSE = 19
     * }
     */
    public static int IORING_OP_CLOSE() {
        return IORING_OP_CLOSE;
    }
    private static final int IORING_OP_FILES_UPDATE = (int)20L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_FILES_UPDATE = 20
     * }
     */
    public static int IORING_OP_FILES_UPDATE() {
        return IORING_OP_FILES_UPDATE;
    }
    private static final int IORING_OP_STATX = (int)21L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_STATX = 21
     * }
     */
    public static int IORING_OP_STATX() {
        return IORING_OP_STATX;
    }
    private static final int IORING_OP_READ = (int)22L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_READ = 22
     * }
     */
    public static int IORING_OP_READ() {
        return IORING_OP_READ;
    }
    private static final int IORING_OP_WRITE = (int)23L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_WRITE = 23
     * }
     */
    public static int IORING_OP_WRITE() {
        return IORING_OP_WRITE;
    }
    private static final int IORING_OP_FADVISE = (int)24L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_FADVISE = 24
     * }
     */
    public static int IORING_OP_FADVISE() {
        return IORING_OP_FADVISE;
    }
    private static final int IORING_OP_MADVISE = (int)25L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_MADVISE = 25
     * }
     */
    public static int IORING_OP_MADVISE() {
        return IORING_OP_MADVISE;
    }
    private static final int IORING_OP_SEND = (int)26L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SEND = 26
     * }
     */
    public static int IORING_OP_SEND() {
        return IORING_OP_SEND;
    }
    private static final int IORING_OP_RECV = (int)27L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_RECV = 27
     * }
     */
    public static int IORING_OP_RECV() {
        return IORING_OP_RECV;
    }
    private static final int IORING_OP_OPENAT2 = (int)28L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_OPENAT2 = 28
     * }
     */
    public static int IORING_OP_OPENAT2() {
        return IORING_OP_OPENAT2;
    }
    private static final int IORING_OP_EPOLL_CTL = (int)29L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_EPOLL_CTL = 29
     * }
     */
    public static int IORING_OP_EPOLL_CTL() {
        return IORING_OP_EPOLL_CTL;
    }
    private static final int IORING_OP_SPLICE = (int)30L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SPLICE = 30
     * }
     */
    public static int IORING_OP_SPLICE() {
        return IORING_OP_SPLICE;
    }
    private static final int IORING_OP_PROVIDE_BUFFERS = (int)31L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_PROVIDE_BUFFERS = 31
     * }
     */
    public static int IORING_OP_PROVIDE_BUFFERS() {
        return IORING_OP_PROVIDE_BUFFERS;
    }
    private static final int IORING_OP_REMOVE_BUFFERS = (int)32L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_REMOVE_BUFFERS = 32
     * }
     */
    public static int IORING_OP_REMOVE_BUFFERS() {
        return IORING_OP_REMOVE_BUFFERS;
    }
    private static final int IORING_OP_TEE = (int)33L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_TEE = 33
     * }
     */
    public static int IORING_OP_TEE() {
        return IORING_OP_TEE;
    }
    private static final int IORING_OP_SHUTDOWN = (int)34L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SHUTDOWN = 34
     * }
     */
    public static int IORING_OP_SHUTDOWN() {
        return IORING_OP_SHUTDOWN;
    }
    private static final int IORING_OP_RENAMEAT = (int)35L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_RENAMEAT = 35
     * }
     */
    public static int IORING_OP_RENAMEAT() {
        return IORING_OP_RENAMEAT;
    }
    private static final int IORING_OP_UNLINKAT = (int)36L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_UNLINKAT = 36
     * }
     */
    public static int IORING_OP_UNLINKAT() {
        return IORING_OP_UNLINKAT;
    }
    private static final int IORING_OP_MKDIRAT = (int)37L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_MKDIRAT = 37
     * }
     */
    public static int IORING_OP_MKDIRAT() {
        return IORING_OP_MKDIRAT;
    }
    private static final int IORING_OP_SYMLINKAT = (int)38L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SYMLINKAT = 38
     * }
     */
    public static int IORING_OP_SYMLINKAT() {
        return IORING_OP_SYMLINKAT;
    }
    private static final int IORING_OP_LINKAT = (int)39L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_LINKAT = 39
     * }
     */
    public static int IORING_OP_LINKAT() {
        return IORING_OP_LINKAT;
    }
    private static final int IORING_OP_MSG_RING = (int)40L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_MSG_RING = 40
     * }
     */
    public static int IORING_OP_MSG_RING() {
        return IORING_OP_MSG_RING;
    }
    private static final int IORING_OP_FSETXATTR = (int)41L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_FSETXATTR = 41
     * }
     */
    public static int IORING_OP_FSETXATTR() {
        return IORING_OP_FSETXATTR;
    }
    private static final int IORING_OP_SETXATTR = (int)42L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SETXATTR = 42
     * }
     */
    public static int IORING_OP_SETXATTR() {
        return IORING_OP_SETXATTR;
    }
    private static final int IORING_OP_FGETXATTR = (int)43L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_FGETXATTR = 43
     * }
     */
    public static int IORING_OP_FGETXATTR() {
        return IORING_OP_FGETXATTR;
    }
    private static final int IORING_OP_GETXATTR = (int)44L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_GETXATTR = 44
     * }
     */
    public static int IORING_OP_GETXATTR() {
        return IORING_OP_GETXATTR;
    }
    private static final int IORING_OP_SOCKET = (int)45L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SOCKET = 45
     * }
     */
    public static int IORING_OP_SOCKET() {
        return IORING_OP_SOCKET;
    }
    private static final int IORING_OP_URING_CMD = (int)46L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_URING_CMD = 46
     * }
     */
    public static int IORING_OP_URING_CMD() {
        return IORING_OP_URING_CMD;
    }
    private static final int IORING_OP_SEND_ZC = (int)47L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SEND_ZC = 47
     * }
     */
    public static int IORING_OP_SEND_ZC() {
        return IORING_OP_SEND_ZC;
    }
    private static final int IORING_OP_SENDMSG_ZC = (int)48L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_SENDMSG_ZC = 48
     * }
     */
    public static int IORING_OP_SENDMSG_ZC() {
        return IORING_OP_SENDMSG_ZC;
    }
    private static final int IORING_OP_LAST = (int)49L;

    /**
     * {@snippet lang=c :
     * enum io_uring_op.IORING_OP_LAST = 49
     * }
     */
    public static int IORING_OP_LAST() {
        return IORING_OP_LAST;
    }
    private static final int IORING_MSG_DATA = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_MSG_DATA = 0
     * }
     */
    public static int IORING_MSG_DATA() {
        return IORING_MSG_DATA;
    }
    private static final int IORING_MSG_SEND_FD = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_MSG_SEND_FD = 1
     * }
     */
    public static int IORING_MSG_SEND_FD() {
        return IORING_MSG_SEND_FD;
    }
    private static final int IORING_CQE_BUFFER_SHIFT = (int)16L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_CQE_BUFFER_SHIFT = 16
     * }
     */
    public static int IORING_CQE_BUFFER_SHIFT() {
        return IORING_CQE_BUFFER_SHIFT;
    }
    private static final int IORING_REGISTER_BUFFERS = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_BUFFERS = 0
     * }
     */
    public static int IORING_REGISTER_BUFFERS() {
        return IORING_REGISTER_BUFFERS;
    }
    private static final int IORING_UNREGISTER_BUFFERS = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_BUFFERS = 1
     * }
     */
    public static int IORING_UNREGISTER_BUFFERS() {
        return IORING_UNREGISTER_BUFFERS;
    }
    private static final int IORING_REGISTER_FILES = (int)2L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_FILES = 2
     * }
     */
    public static int IORING_REGISTER_FILES() {
        return IORING_REGISTER_FILES;
    }
    private static final int IORING_UNREGISTER_FILES = (int)3L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_FILES = 3
     * }
     */
    public static int IORING_UNREGISTER_FILES() {
        return IORING_UNREGISTER_FILES;
    }
    private static final int IORING_REGISTER_EVENTFD = (int)4L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_EVENTFD = 4
     * }
     */
    public static int IORING_REGISTER_EVENTFD() {
        return IORING_REGISTER_EVENTFD;
    }
    private static final int IORING_UNREGISTER_EVENTFD = (int)5L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_EVENTFD = 5
     * }
     */
    public static int IORING_UNREGISTER_EVENTFD() {
        return IORING_UNREGISTER_EVENTFD;
    }
    private static final int IORING_REGISTER_FILES_UPDATE = (int)6L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_FILES_UPDATE = 6
     * }
     */
    public static int IORING_REGISTER_FILES_UPDATE() {
        return IORING_REGISTER_FILES_UPDATE;
    }
    private static final int IORING_REGISTER_EVENTFD_ASYNC = (int)7L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_EVENTFD_ASYNC = 7
     * }
     */
    public static int IORING_REGISTER_EVENTFD_ASYNC() {
        return IORING_REGISTER_EVENTFD_ASYNC;
    }
    private static final int IORING_REGISTER_PROBE = (int)8L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_PROBE = 8
     * }
     */
    public static int IORING_REGISTER_PROBE() {
        return IORING_REGISTER_PROBE;
    }
    private static final int IORING_REGISTER_PERSONALITY = (int)9L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_PERSONALITY = 9
     * }
     */
    public static int IORING_REGISTER_PERSONALITY() {
        return IORING_REGISTER_PERSONALITY;
    }
    private static final int IORING_UNREGISTER_PERSONALITY = (int)10L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_PERSONALITY = 10
     * }
     */
    public static int IORING_UNREGISTER_PERSONALITY() {
        return IORING_UNREGISTER_PERSONALITY;
    }
    private static final int IORING_REGISTER_RESTRICTIONS = (int)11L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_RESTRICTIONS = 11
     * }
     */
    public static int IORING_REGISTER_RESTRICTIONS() {
        return IORING_REGISTER_RESTRICTIONS;
    }
    private static final int IORING_REGISTER_ENABLE_RINGS = (int)12L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_ENABLE_RINGS = 12
     * }
     */
    public static int IORING_REGISTER_ENABLE_RINGS() {
        return IORING_REGISTER_ENABLE_RINGS;
    }
    private static final int IORING_REGISTER_FILES2 = (int)13L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_FILES2 = 13
     * }
     */
    public static int IORING_REGISTER_FILES2() {
        return IORING_REGISTER_FILES2;
    }
    private static final int IORING_REGISTER_FILES_UPDATE2 = (int)14L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_FILES_UPDATE2 = 14
     * }
     */
    public static int IORING_REGISTER_FILES_UPDATE2() {
        return IORING_REGISTER_FILES_UPDATE2;
    }
    private static final int IORING_REGISTER_BUFFERS2 = (int)15L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_BUFFERS2 = 15
     * }
     */
    public static int IORING_REGISTER_BUFFERS2() {
        return IORING_REGISTER_BUFFERS2;
    }
    private static final int IORING_REGISTER_BUFFERS_UPDATE = (int)16L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_BUFFERS_UPDATE = 16
     * }
     */
    public static int IORING_REGISTER_BUFFERS_UPDATE() {
        return IORING_REGISTER_BUFFERS_UPDATE;
    }
    private static final int IORING_REGISTER_IOWQ_AFF = (int)17L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_IOWQ_AFF = 17
     * }
     */
    public static int IORING_REGISTER_IOWQ_AFF() {
        return IORING_REGISTER_IOWQ_AFF;
    }
    private static final int IORING_UNREGISTER_IOWQ_AFF = (int)18L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_IOWQ_AFF = 18
     * }
     */
    public static int IORING_UNREGISTER_IOWQ_AFF() {
        return IORING_UNREGISTER_IOWQ_AFF;
    }
    private static final int IORING_REGISTER_IOWQ_MAX_WORKERS = (int)19L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_IOWQ_MAX_WORKERS = 19
     * }
     */
    public static int IORING_REGISTER_IOWQ_MAX_WORKERS() {
        return IORING_REGISTER_IOWQ_MAX_WORKERS;
    }
    private static final int IORING_REGISTER_RING_FDS = (int)20L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_RING_FDS = 20
     * }
     */
    public static int IORING_REGISTER_RING_FDS() {
        return IORING_REGISTER_RING_FDS;
    }
    private static final int IORING_UNREGISTER_RING_FDS = (int)21L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_RING_FDS = 21
     * }
     */
    public static int IORING_UNREGISTER_RING_FDS() {
        return IORING_UNREGISTER_RING_FDS;
    }
    private static final int IORING_REGISTER_PBUF_RING = (int)22L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_PBUF_RING = 22
     * }
     */
    public static int IORING_REGISTER_PBUF_RING() {
        return IORING_REGISTER_PBUF_RING;
    }
    private static final int IORING_UNREGISTER_PBUF_RING = (int)23L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_UNREGISTER_PBUF_RING = 23
     * }
     */
    public static int IORING_UNREGISTER_PBUF_RING() {
        return IORING_UNREGISTER_PBUF_RING;
    }
    private static final int IORING_REGISTER_SYNC_CANCEL = (int)24L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_SYNC_CANCEL = 24
     * }
     */
    public static int IORING_REGISTER_SYNC_CANCEL() {
        return IORING_REGISTER_SYNC_CANCEL;
    }
    private static final int IORING_REGISTER_FILE_ALLOC_RANGE = (int)25L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_FILE_ALLOC_RANGE = 25
     * }
     */
    public static int IORING_REGISTER_FILE_ALLOC_RANGE() {
        return IORING_REGISTER_FILE_ALLOC_RANGE;
    }
    private static final int IORING_REGISTER_LAST = (int)26L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_REGISTER_LAST = 26
     * }
     */
    public static int IORING_REGISTER_LAST() {
        return IORING_REGISTER_LAST;
    }
    private static final int IO_WQ_BOUND = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IO_WQ_BOUND = 0
     * }
     */
    public static int IO_WQ_BOUND() {
        return IO_WQ_BOUND;
    }
    private static final int IO_WQ_UNBOUND = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IO_WQ_UNBOUND = 1
     * }
     */
    public static int IO_WQ_UNBOUND() {
        return IO_WQ_UNBOUND;
    }
    private static final int IORING_RESTRICTION_REGISTER_OP = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_RESTRICTION_REGISTER_OP = 0
     * }
     */
    public static int IORING_RESTRICTION_REGISTER_OP() {
        return IORING_RESTRICTION_REGISTER_OP;
    }
    private static final int IORING_RESTRICTION_SQE_OP = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_RESTRICTION_SQE_OP = 1
     * }
     */
    public static int IORING_RESTRICTION_SQE_OP() {
        return IORING_RESTRICTION_SQE_OP;
    }
    private static final int IORING_RESTRICTION_SQE_FLAGS_ALLOWED = (int)2L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_RESTRICTION_SQE_FLAGS_ALLOWED = 2
     * }
     */
    public static int IORING_RESTRICTION_SQE_FLAGS_ALLOWED() {
        return IORING_RESTRICTION_SQE_FLAGS_ALLOWED;
    }
    private static final int IORING_RESTRICTION_SQE_FLAGS_REQUIRED = (int)3L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_RESTRICTION_SQE_FLAGS_REQUIRED = 3
     * }
     */
    public static int IORING_RESTRICTION_SQE_FLAGS_REQUIRED() {
        return IORING_RESTRICTION_SQE_FLAGS_REQUIRED;
    }
    private static final int IORING_RESTRICTION_LAST = (int)4L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IORING_RESTRICTION_LAST = 4
     * }
     */
    public static int IORING_RESTRICTION_LAST() {
        return IORING_RESTRICTION_LAST;
    }
    /**
     * {@snippet lang=c :
     * typedef __socklen_t socklen_t
     * }
     */
    public static final OfInt socklen_t = iouring_h.C_INT;
    private static final int SOCK_STREAM = (int)1L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_STREAM = 1
     * }
     */
    public static int SOCK_STREAM() {
        return SOCK_STREAM;
    }
    private static final int SOCK_DGRAM = (int)2L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_DGRAM = 2
     * }
     */
    public static int SOCK_DGRAM() {
        return SOCK_DGRAM;
    }
    private static final int SOCK_RAW = (int)3L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_RAW = 3
     * }
     */
    public static int SOCK_RAW() {
        return SOCK_RAW;
    }
    private static final int SOCK_RDM = (int)4L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_RDM = 4
     * }
     */
    public static int SOCK_RDM() {
        return SOCK_RDM;
    }
    private static final int SOCK_SEQPACKET = (int)5L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_SEQPACKET = 5
     * }
     */
    public static int SOCK_SEQPACKET() {
        return SOCK_SEQPACKET;
    }
    private static final int SOCK_DCCP = (int)6L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_DCCP = 6
     * }
     */
    public static int SOCK_DCCP() {
        return SOCK_DCCP;
    }
    private static final int SOCK_PACKET = (int)10L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_PACKET = 10
     * }
     */
    public static int SOCK_PACKET() {
        return SOCK_PACKET;
    }
    private static final int SOCK_CLOEXEC = (int)524288L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_CLOEXEC = 524288
     * }
     */
    public static int SOCK_CLOEXEC() {
        return SOCK_CLOEXEC;
    }
    private static final int SOCK_NONBLOCK = (int)2048L;

    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_NONBLOCK = 2048
     * }
     */
    public static int SOCK_NONBLOCK() {
        return SOCK_NONBLOCK;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned short sa_family_t
     * }
     */
    public static final OfShort sa_family_t = iouring_h.C_SHORT;
    private static final int MSG_OOB = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_OOB = 1
     * }
     */
    public static int MSG_OOB() {
        return MSG_OOB;
    }
    private static final int MSG_PEEK = (int)2L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_PEEK = 2
     * }
     */
    public static int MSG_PEEK() {
        return MSG_PEEK;
    }
    private static final int MSG_DONTROUTE = (int)4L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_DONTROUTE = 4
     * }
     */
    public static int MSG_DONTROUTE() {
        return MSG_DONTROUTE;
    }
    private static final int MSG_CTRUNC = (int)8L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_CTRUNC = 8
     * }
     */
    public static int MSG_CTRUNC() {
        return MSG_CTRUNC;
    }
    private static final int MSG_PROXY = (int)16L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_PROXY = 16
     * }
     */
    public static int MSG_PROXY() {
        return MSG_PROXY;
    }
    private static final int MSG_TRUNC = (int)32L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_TRUNC = 32
     * }
     */
    public static int MSG_TRUNC() {
        return MSG_TRUNC;
    }
    private static final int MSG_DONTWAIT = (int)64L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_DONTWAIT = 64
     * }
     */
    public static int MSG_DONTWAIT() {
        return MSG_DONTWAIT;
    }
    private static final int MSG_EOR = (int)128L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_EOR = 128
     * }
     */
    public static int MSG_EOR() {
        return MSG_EOR;
    }
    private static final int MSG_WAITALL = (int)256L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_WAITALL = 256
     * }
     */
    public static int MSG_WAITALL() {
        return MSG_WAITALL;
    }
    private static final int MSG_FIN = (int)512L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_FIN = 512
     * }
     */
    public static int MSG_FIN() {
        return MSG_FIN;
    }
    private static final int MSG_SYN = (int)1024L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_SYN = 1024
     * }
     */
    public static int MSG_SYN() {
        return MSG_SYN;
    }
    private static final int MSG_CONFIRM = (int)2048L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_CONFIRM = 2048
     * }
     */
    public static int MSG_CONFIRM() {
        return MSG_CONFIRM;
    }
    private static final int MSG_RST = (int)4096L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_RST = 4096
     * }
     */
    public static int MSG_RST() {
        return MSG_RST;
    }
    private static final int MSG_ERRQUEUE = (int)8192L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_ERRQUEUE = 8192
     * }
     */
    public static int MSG_ERRQUEUE() {
        return MSG_ERRQUEUE;
    }
    private static final int MSG_NOSIGNAL = (int)16384L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_NOSIGNAL = 16384
     * }
     */
    public static int MSG_NOSIGNAL() {
        return MSG_NOSIGNAL;
    }
    private static final int MSG_MORE = (int)32768L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_MORE = 32768
     * }
     */
    public static int MSG_MORE() {
        return MSG_MORE;
    }
    private static final int MSG_WAITFORONE = (int)65536L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_WAITFORONE = 65536
     * }
     */
    public static int MSG_WAITFORONE() {
        return MSG_WAITFORONE;
    }
    private static final int MSG_BATCH = (int)262144L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_BATCH = 262144
     * }
     */
    public static int MSG_BATCH() {
        return MSG_BATCH;
    }
    private static final int MSG_ZEROCOPY = (int)67108864L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_ZEROCOPY = 67108864
     * }
     */
    public static int MSG_ZEROCOPY() {
        return MSG_ZEROCOPY;
    }
    private static final int MSG_FASTOPEN = (int)536870912L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_FASTOPEN = 536870912
     * }
     */
    public static int MSG_FASTOPEN() {
        return MSG_FASTOPEN;
    }
    private static final int MSG_CMSG_CLOEXEC = (int)1073741824L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_CMSG_CLOEXEC = 1073741824
     * }
     */
    public static int MSG_CMSG_CLOEXEC() {
        return MSG_CMSG_CLOEXEC;
    }
    /**
     * {@snippet lang=c :
     * extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg)
     * }
     */
    public static MethodHandle __cmsg_nxthdr$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_POINTER,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("__cmsg_nxthdr"),
                    DESC);
        }
        return Holder.MH;
    }

    public static MemorySegment __cmsg_nxthdr(MemorySegment __mhdr, MemorySegment __cmsg) {
        var mh$ = __cmsg_nxthdr$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cmsg_nxthdr", __mhdr, __cmsg);
            }
            return (MemorySegment) mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SCM_RIGHTS = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.SCM_RIGHTS = 1
     * }
     */
    public static int SCM_RIGHTS() {
        return SCM_RIGHTS;
    }
    private static final int SHUT_RD = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.SHUT_RD = 0
     * }
     */
    public static int SHUT_RD() {
        return SHUT_RD;
    }
    private static final int SHUT_WR = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.SHUT_WR = 1
     * }
     */
    public static int SHUT_WR() {
        return SHUT_WR;
    }
    private static final int SHUT_RDWR = (int)2L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.SHUT_RDWR = 2
     * }
     */
    public static int SHUT_RDWR() {
        return SHUT_RDWR;
    }
    /**
     * {@snippet lang=c :
     * extern int socket(int __domain, int __type, int __protocol)
     * }
     */
    public static MethodHandle socket$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("socket"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int socket(int __domain, int __type, int __protocol) {
        var mh$ = socket$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("socket", __domain, __type, __protocol);
            }
            return (int) mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int socketpair(int __domain, int __type, int __protocol, int __fds[2])
     * }
     */
    public static MethodHandle socketpair$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("socketpair"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int socketpair(int __domain, int __type, int __protocol, MemorySegment __fds) {
        var mh$ = socketpair$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("socketpair", __domain, __type, __protocol, __fds);
            }
            return (int) mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int bind(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static MethodHandle bind$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("bind"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int bind(int __fd, MemorySegment __addr, int __len) {
        var mh$ = bind$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bind", __fd, __addr, __len);
            }
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int getsockname(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static MethodHandle getsockname$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("getsockname"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int getsockname(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getsockname$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsockname", __fd, __addr, __len);
            }
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int connect(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static MethodHandle connect$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("connect"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int connect(int __fd, MemorySegment __addr, int __len) {
        var mh$ = connect$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("connect", __fd, __addr, __len);
            }
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int getpeername(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static MethodHandle getpeername$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("getpeername"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int getpeername(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getpeername$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpeername", __fd, __addr, __len);
            }
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags)
     * }
     */
    public static MethodHandle send$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_LONG,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("send"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long send(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = send$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("send", __fd, __buf, __n, __flags);
            }
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags)
     * }
     */
    public static MethodHandle recv$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_LONG,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("recv"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long recv(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = recv$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recv", __fd, __buf, __n, __flags);
            }
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

