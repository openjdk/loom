// Generated by jextract

package jdk.internal.ffi.generated.iouring;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sockaddr {
 *     sa_family_t sa_family;
 *     char sa_data[14];
 * }
 * }
 */
@SuppressWarnings("restricted") public class sockaddr {

    sockaddr() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        iouring_h.C_SHORT.withName("sa_family"),
        MemoryLayout.sequenceLayout(14, iouring_h.C_CHAR).withName("sa_data")
    ).withName("sockaddr");

    public static final GroupLayout $LAYOUT() {
        return $LAYOUT;
    }

    private static final long sa_family$OFFSET = 0;
    private static final OfShort sa_family$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sa_family"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sa_family_t sa_family
     * }
     */
    public static short sa_family(MemorySegment struct) {
        return struct.get(sa_family$LAYOUT, sa_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sa_family_t sa_family
     * }
     */
    public static void sa_family(MemorySegment struct, short fieldValue) {
        struct.set(sa_family$LAYOUT, sa_family$OFFSET, fieldValue);
    }

    private static final long sa_data$OFFSET = 2;
    private static final long sa_data$SIZE = 14;

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char sa_data[14]
     * }
     */
    public static MemorySegment sa_data(MemorySegment struct) {
        return struct.asSlice(sa_data$OFFSET, sa_data$SIZE);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char sa_data[14]
     * }
     */
    public static void sa_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sa_data$OFFSET, sa_data$SIZE);
    }

    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice($LAYOUT().byteSize() * index);
    }

    public static long sizeof() { return $LAYOUT().byteSize(); }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, $LAYOUT()));
    }

    public static MemorySegment reinterpret(MemorySegment addr, Arena scope, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, scope, cleanup);
    }

    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena scope, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret($LAYOUT().byteSize() * elementCount, scope, cleanup);
    }
}

