// Generated by jextract

package jdk.internal.ffi.generated.iouring;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct io_uring_rsrc_register {
 *     __u32 nr;
 *     __u32 flags;
 *     __u64 resv2;
 *     __u64 data;
 *     __u64 tags;
 * }
 * }
 */
@SuppressWarnings("restricted") public class io_uring_rsrc_register {

    io_uring_rsrc_register() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        iouring_h.C_INT.withName("nr"),
        iouring_h.C_INT.withName("flags"),
        iouring_h.C_LONG_LONG.withName("resv2"),
        iouring_h.C_LONG_LONG.withName("data"),
        iouring_h.C_LONG_LONG.withName("tags")
    ).withName("io_uring_rsrc_register");

    public static final GroupLayout $LAYOUT() {
        return $LAYOUT;
    }

    private static final long nr$OFFSET = 0;
    private static final OfInt nr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nr"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 nr
     * }
     */
    public static int nr(MemorySegment struct) {
        return struct.get(nr$LAYOUT, nr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 nr
     * }
     */
    public static void nr(MemorySegment struct, int fieldValue) {
        struct.set(nr$LAYOUT, nr$OFFSET, fieldValue);
    }

    private static final long flags$OFFSET = 4;
    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final long resv2$OFFSET = 8;
    private static final OfLong resv2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("resv2"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 resv2
     * }
     */
    public static long resv2(MemorySegment struct) {
        return struct.get(resv2$LAYOUT, resv2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 resv2
     * }
     */
    public static void resv2(MemorySegment struct, long fieldValue) {
        struct.set(resv2$LAYOUT, resv2$OFFSET, fieldValue);
    }

    private static final long data$OFFSET = 16;
    private static final OfLong data$LAYOUT = (OfLong)$LAYOUT.select(groupElement("data"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 data
     * }
     */
    public static long data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 data
     * }
     */
    public static void data(MemorySegment struct, long fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final long tags$OFFSET = 24;
    private static final OfLong tags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 tags
     * }
     */
    public static long tags(MemorySegment struct) {
        return struct.get(tags$LAYOUT, tags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 tags
     * }
     */
    public static void tags(MemorySegment struct, long fieldValue) {
        struct.set(tags$LAYOUT, tags$OFFSET, fieldValue);
    }

    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice($LAYOUT().byteSize() * index);
    }

    public static long sizeof() { return $LAYOUT().byteSize(); }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, $LAYOUT()));
    }

    public static MemorySegment reinterpret(MemorySegment addr, Arena scope, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, scope, cleanup);
    }

    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena scope, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret($LAYOUT().byteSize() * elementCount, scope, cleanup);
    }
}

