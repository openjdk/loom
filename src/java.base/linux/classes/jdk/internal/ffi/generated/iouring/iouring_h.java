// Generated by jextract

package jdk.internal.ffi.generated.iouring;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

@SuppressWarnings("restricted") public class iouring_h extends iouring_h_1 {

    iouring_h() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len)
     * }
     */
    public static MethodHandle sendto$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("sendto"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long sendto(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, int __addr_len) {
        var mh$ = sendto$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendto", __fd, __buf, __n, __flags, __addr, __addr_len);
            }
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t recvfrom(int __fd, void *restrict __buf, size_t __n, int __flags, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static MethodHandle recvfrom$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("recvfrom"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long recvfrom(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = recvfrom$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recvfrom", __fd, __buf, __n, __flags, __addr, __addr_len);
            }
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags)
     * }
     */
    public static MethodHandle sendmsg$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("sendmsg"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long sendmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = sendmsg$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendmsg", __fd, __message, __flags);
            }
            return (long) mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags)
     * }
     */
    public static MethodHandle recvmsg$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_LONG,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("recvmsg"),
                    DESC);
        }
        return Holder.MH;
    }

    public static long recvmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = recvmsg$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recvmsg", __fd, __message, __flags);
            }
            return (long) mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int getsockopt(int __fd, int __level, int __optname, void *restrict __optval, socklen_t *restrict __optlen)
     * }
     */
    public static MethodHandle getsockopt$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("getsockopt"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int getsockopt(int __fd, int __level, int __optname, MemorySegment __optval, MemorySegment __optlen) {
        var mh$ = getsockopt$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsockopt", __fd, __level, __optname, __optval, __optlen);
            }
            return (int) mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen)
     * }
     */
    public static MethodHandle setsockopt$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("setsockopt"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int setsockopt(int __fd, int __level, int __optname, MemorySegment __optval, int __optlen) {
        var mh$ = setsockopt$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setsockopt", __fd, __level, __optname, __optval, __optlen);
            }
            return (int) mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int listen(int __fd, int __n)
     * }
     */
    public static MethodHandle listen$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("listen"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int listen(int __fd, int __n) {
        var mh$ = listen$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("listen", __fd, __n);
            }
            return (int) mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int accept(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static MethodHandle accept$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("accept"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int accept(int __fd, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = accept$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("accept", __fd, __addr, __addr_len);
            }
            return (int) mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int shutdown(int __fd, int __how)
     * }
     */
    public static MethodHandle shutdown$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("shutdown"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int shutdown(int __fd, int __how) {
        var mh$ = shutdown$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shutdown", __fd, __how);
            }
            return (int) mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int sockatmark(int __fd)
     * }
     */
    public static MethodHandle sockatmark$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("sockatmark"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int sockatmark(int __fd) {
        var mh$ = sockatmark$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sockatmark", __fd);
            }
            return (int) mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int isfdtype(int __fd, int __fdtype)
     * }
     */
    public static MethodHandle isfdtype$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("isfdtype"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int isfdtype(int __fd, int __fdtype) {
        var mh$ = isfdtype$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isfdtype", __fd, __fdtype);
            }
            return (int) mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = iouring_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint64_t
     * }
     */
    public static final OfLong uint64_t = iouring_h.C_LONG;
    private static final int EPOLL_CLOEXEC = (int)524288L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.EPOLL_CLOEXEC = 524288
     * }
     */
    public static int EPOLL_CLOEXEC() {
        return EPOLL_CLOEXEC;
    }
    private static final int EPOLLIN = (int)1L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLIN = 1
     * }
     */
    public static int EPOLLIN() {
        return EPOLLIN;
    }
    private static final int EPOLLPRI = (int)2L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLPRI = 2
     * }
     */
    public static int EPOLLPRI() {
        return EPOLLPRI;
    }
    private static final int EPOLLOUT = (int)4L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLOUT = 4
     * }
     */
    public static int EPOLLOUT() {
        return EPOLLOUT;
    }
    private static final int EPOLLRDNORM = (int)64L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLRDNORM = 64
     * }
     */
    public static int EPOLLRDNORM() {
        return EPOLLRDNORM;
    }
    private static final int EPOLLRDBAND = (int)128L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLRDBAND = 128
     * }
     */
    public static int EPOLLRDBAND() {
        return EPOLLRDBAND;
    }
    private static final int EPOLLWRNORM = (int)256L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLWRNORM = 256
     * }
     */
    public static int EPOLLWRNORM() {
        return EPOLLWRNORM;
    }
    private static final int EPOLLWRBAND = (int)512L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLWRBAND = 512
     * }
     */
    public static int EPOLLWRBAND() {
        return EPOLLWRBAND;
    }
    private static final int EPOLLMSG = (int)1024L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLMSG = 1024
     * }
     */
    public static int EPOLLMSG() {
        return EPOLLMSG;
    }
    private static final int EPOLLERR = (int)8L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLERR = 8
     * }
     */
    public static int EPOLLERR() {
        return EPOLLERR;
    }
    private static final int EPOLLHUP = (int)16L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLHUP = 16
     * }
     */
    public static int EPOLLHUP() {
        return EPOLLHUP;
    }
    private static final int EPOLLRDHUP = (int)8192L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLRDHUP = 8192
     * }
     */
    public static int EPOLLRDHUP() {
        return EPOLLRDHUP;
    }
    private static final int EPOLLEXCLUSIVE = (int)268435456L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLEXCLUSIVE = 268435456
     * }
     */
    public static int EPOLLEXCLUSIVE() {
        return EPOLLEXCLUSIVE;
    }
    private static final int EPOLLWAKEUP = (int)536870912L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLWAKEUP = 536870912
     * }
     */
    public static int EPOLLWAKEUP() {
        return EPOLLWAKEUP;
    }
    private static final int EPOLLONESHOT = (int)1073741824L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLONESHOT = 1073741824
     * }
     */
    public static int EPOLLONESHOT() {
        return EPOLLONESHOT;
    }
    private static final int EPOLLET = (int)-2147483648L;

    /**
     * {@snippet lang=c :
     * enum EPOLL_EVENTS.EPOLLET = -2147483648
     * }
     */
    public static int EPOLLET() {
        return EPOLLET;
    }
    /**
     * {@snippet lang=c :
     * extern int epoll_create(int __size)
     * }
     */
    public static MethodHandle epoll_create$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("epoll_create"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int epoll_create(int __size) {
        var mh$ = epoll_create$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("epoll_create", __size);
            }
            return (int) mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int epoll_create1(int __flags)
     * }
     */
    public static MethodHandle epoll_create1$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("epoll_create1"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int epoll_create1(int __flags) {
        var mh$ = epoll_create1$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("epoll_create1", __flags);
            }
            return (int) mh$.invokeExact(__flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int epoll_ctl(int __epfd, int __op, int __fd, struct epoll_event *__event)
     * }
     */
    public static MethodHandle epoll_ctl$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("epoll_ctl"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int epoll_ctl(int __epfd, int __op, int __fd, MemorySegment __event) {
        var mh$ = epoll_ctl$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("epoll_ctl", __epfd, __op, __fd, __event);
            }
            return (int) mh$.invokeExact(__epfd, __op, __fd, __event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int epoll_wait(int __epfd, struct epoll_event *__events, int __maxevents, int __timeout)
     * }
     */
    public static MethodHandle epoll_wait$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("epoll_wait"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int epoll_wait(int __epfd, MemorySegment __events, int __maxevents, int __timeout) {
        var mh$ = epoll_wait$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("epoll_wait", __epfd, __events, __maxevents, __timeout);
            }
            return (int) mh$.invokeExact(__epfd, __events, __maxevents, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int epoll_pwait(int __epfd, struct epoll_event *__events, int __maxevents, int __timeout, const __sigset_t *__ss)
     * }
     */
    public static MethodHandle epoll_pwait$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("epoll_pwait"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int epoll_pwait(int __epfd, MemorySegment __events, int __maxevents, int __timeout, MemorySegment __ss) {
        var mh$ = epoll_pwait$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("epoll_pwait", __epfd, __events, __maxevents, __timeout, __ss);
            }
            return (int) mh$.invokeExact(__epfd, __events, __maxevents, __timeout, __ss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int epoll_pwait2(int __epfd, struct epoll_event *__events, int __maxevents, const struct timespec *__timeout, const __sigset_t *__ss)
     * }
     */
    public static MethodHandle epoll_pwait2$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_INT,
                iouring_h.C_POINTER,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("epoll_pwait2"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int epoll_pwait2(int __epfd, MemorySegment __events, int __maxevents, MemorySegment __timeout, MemorySegment __ss) {
        var mh$ = epoll_pwait2$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("epoll_pwait2", __epfd, __events, __maxevents, __timeout, __ss);
            }
            return (int) mh$.invokeExact(__epfd, __events, __maxevents, __timeout, __ss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = iouring_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = iouring_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t in_addr_t
     * }
     */
    public static final OfInt in_addr_t = iouring_h.C_INT;
    private static final int IPPROTO_IP = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_IP = 0
     * }
     */
    public static int IPPROTO_IP() {
        return IPPROTO_IP;
    }
    private static final int IPPROTO_ICMP = (int)1L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_ICMP = 1
     * }
     */
    public static int IPPROTO_ICMP() {
        return IPPROTO_ICMP;
    }
    private static final int IPPROTO_IGMP = (int)2L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_IGMP = 2
     * }
     */
    public static int IPPROTO_IGMP() {
        return IPPROTO_IGMP;
    }
    private static final int IPPROTO_IPIP = (int)4L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_IPIP = 4
     * }
     */
    public static int IPPROTO_IPIP() {
        return IPPROTO_IPIP;
    }
    private static final int IPPROTO_TCP = (int)6L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_TCP = 6
     * }
     */
    public static int IPPROTO_TCP() {
        return IPPROTO_TCP;
    }
    private static final int IPPROTO_EGP = (int)8L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_EGP = 8
     * }
     */
    public static int IPPROTO_EGP() {
        return IPPROTO_EGP;
    }
    private static final int IPPROTO_PUP = (int)12L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_PUP = 12
     * }
     */
    public static int IPPROTO_PUP() {
        return IPPROTO_PUP;
    }
    private static final int IPPROTO_UDP = (int)17L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_UDP = 17
     * }
     */
    public static int IPPROTO_UDP() {
        return IPPROTO_UDP;
    }
    private static final int IPPROTO_IDP = (int)22L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_IDP = 22
     * }
     */
    public static int IPPROTO_IDP() {
        return IPPROTO_IDP;
    }
    private static final int IPPROTO_TP = (int)29L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_TP = 29
     * }
     */
    public static int IPPROTO_TP() {
        return IPPROTO_TP;
    }
    private static final int IPPROTO_DCCP = (int)33L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_DCCP = 33
     * }
     */
    public static int IPPROTO_DCCP() {
        return IPPROTO_DCCP;
    }
    private static final int IPPROTO_IPV6 = (int)41L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_IPV6 = 41
     * }
     */
    public static int IPPROTO_IPV6() {
        return IPPROTO_IPV6;
    }
    private static final int IPPROTO_RSVP = (int)46L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_RSVP = 46
     * }
     */
    public static int IPPROTO_RSVP() {
        return IPPROTO_RSVP;
    }
    private static final int IPPROTO_GRE = (int)47L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_GRE = 47
     * }
     */
    public static int IPPROTO_GRE() {
        return IPPROTO_GRE;
    }
    private static final int IPPROTO_ESP = (int)50L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_ESP = 50
     * }
     */
    public static int IPPROTO_ESP() {
        return IPPROTO_ESP;
    }
    private static final int IPPROTO_AH = (int)51L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_AH = 51
     * }
     */
    public static int IPPROTO_AH() {
        return IPPROTO_AH;
    }
    private static final int IPPROTO_MTP = (int)92L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_MTP = 92
     * }
     */
    public static int IPPROTO_MTP() {
        return IPPROTO_MTP;
    }
    private static final int IPPROTO_BEETPH = (int)94L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_BEETPH = 94
     * }
     */
    public static int IPPROTO_BEETPH() {
        return IPPROTO_BEETPH;
    }
    private static final int IPPROTO_ENCAP = (int)98L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_ENCAP = 98
     * }
     */
    public static int IPPROTO_ENCAP() {
        return IPPROTO_ENCAP;
    }
    private static final int IPPROTO_PIM = (int)103L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_PIM = 103
     * }
     */
    public static int IPPROTO_PIM() {
        return IPPROTO_PIM;
    }
    private static final int IPPROTO_COMP = (int)108L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_COMP = 108
     * }
     */
    public static int IPPROTO_COMP() {
        return IPPROTO_COMP;
    }
    private static final int IPPROTO_L2TP = (int)115L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_L2TP = 115
     * }
     */
    public static int IPPROTO_L2TP() {
        return IPPROTO_L2TP;
    }
    private static final int IPPROTO_SCTP = (int)132L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_SCTP = 132
     * }
     */
    public static int IPPROTO_SCTP() {
        return IPPROTO_SCTP;
    }
    private static final int IPPROTO_UDPLITE = (int)136L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_UDPLITE = 136
     * }
     */
    public static int IPPROTO_UDPLITE() {
        return IPPROTO_UDPLITE;
    }
    private static final int IPPROTO_MPLS = (int)137L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_MPLS = 137
     * }
     */
    public static int IPPROTO_MPLS() {
        return IPPROTO_MPLS;
    }
    private static final int IPPROTO_ETHERNET = (int)143L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_ETHERNET = 143
     * }
     */
    public static int IPPROTO_ETHERNET() {
        return IPPROTO_ETHERNET;
    }
    private static final int IPPROTO_RAW = (int)255L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_RAW = 255
     * }
     */
    public static int IPPROTO_RAW() {
        return IPPROTO_RAW;
    }
    private static final int IPPROTO_MPTCP = (int)262L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_MPTCP = 262
     * }
     */
    public static int IPPROTO_MPTCP() {
        return IPPROTO_MPTCP;
    }
    private static final int IPPROTO_MAX = (int)263L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_MAX = 263
     * }
     */
    public static int IPPROTO_MAX() {
        return IPPROTO_MAX;
    }
    private static final int IPPROTO_HOPOPTS = (int)0L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_HOPOPTS = 0
     * }
     */
    public static int IPPROTO_HOPOPTS() {
        return IPPROTO_HOPOPTS;
    }
    private static final int IPPROTO_ROUTING = (int)43L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_ROUTING = 43
     * }
     */
    public static int IPPROTO_ROUTING() {
        return IPPROTO_ROUTING;
    }
    private static final int IPPROTO_FRAGMENT = (int)44L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_FRAGMENT = 44
     * }
     */
    public static int IPPROTO_FRAGMENT() {
        return IPPROTO_FRAGMENT;
    }
    private static final int IPPROTO_ICMPV6 = (int)58L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_ICMPV6 = 58
     * }
     */
    public static int IPPROTO_ICMPV6() {
        return IPPROTO_ICMPV6;
    }
    private static final int IPPROTO_NONE = (int)59L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_NONE = 59
     * }
     */
    public static int IPPROTO_NONE() {
        return IPPROTO_NONE;
    }
    private static final int IPPROTO_DSTOPTS = (int)60L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_DSTOPTS = 60
     * }
     */
    public static int IPPROTO_DSTOPTS() {
        return IPPROTO_DSTOPTS;
    }
    private static final int IPPROTO_MH = (int)135L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPROTO_MH = 135
     * }
     */
    public static int IPPROTO_MH() {
        return IPPROTO_MH;
    }
    /**
     * {@snippet lang=c :
     * typedef uint16_t in_port_t
     * }
     */
    public static final OfShort in_port_t = iouring_h.C_SHORT;
    private static final int IPPORT_ECHO = (int)7L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_ECHO = 7
     * }
     */
    public static int IPPORT_ECHO() {
        return IPPORT_ECHO;
    }
    private static final int IPPORT_DISCARD = (int)9L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_DISCARD = 9
     * }
     */
    public static int IPPORT_DISCARD() {
        return IPPORT_DISCARD;
    }
    private static final int IPPORT_SYSTAT = (int)11L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_SYSTAT = 11
     * }
     */
    public static int IPPORT_SYSTAT() {
        return IPPORT_SYSTAT;
    }
    private static final int IPPORT_DAYTIME = (int)13L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_DAYTIME = 13
     * }
     */
    public static int IPPORT_DAYTIME() {
        return IPPORT_DAYTIME;
    }
    private static final int IPPORT_NETSTAT = (int)15L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_NETSTAT = 15
     * }
     */
    public static int IPPORT_NETSTAT() {
        return IPPORT_NETSTAT;
    }
    private static final int IPPORT_FTP = (int)21L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_FTP = 21
     * }
     */
    public static int IPPORT_FTP() {
        return IPPORT_FTP;
    }
    private static final int IPPORT_TELNET = (int)23L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_TELNET = 23
     * }
     */
    public static int IPPORT_TELNET() {
        return IPPORT_TELNET;
    }
    private static final int IPPORT_SMTP = (int)25L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_SMTP = 25
     * }
     */
    public static int IPPORT_SMTP() {
        return IPPORT_SMTP;
    }
    private static final int IPPORT_TIMESERVER = (int)37L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_TIMESERVER = 37
     * }
     */
    public static int IPPORT_TIMESERVER() {
        return IPPORT_TIMESERVER;
    }
    private static final int IPPORT_NAMESERVER = (int)42L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_NAMESERVER = 42
     * }
     */
    public static int IPPORT_NAMESERVER() {
        return IPPORT_NAMESERVER;
    }
    private static final int IPPORT_WHOIS = (int)43L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_WHOIS = 43
     * }
     */
    public static int IPPORT_WHOIS() {
        return IPPORT_WHOIS;
    }
    private static final int IPPORT_MTP = (int)57L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_MTP = 57
     * }
     */
    public static int IPPORT_MTP() {
        return IPPORT_MTP;
    }
    private static final int IPPORT_TFTP = (int)69L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_TFTP = 69
     * }
     */
    public static int IPPORT_TFTP() {
        return IPPORT_TFTP;
    }
    private static final int IPPORT_RJE = (int)77L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_RJE = 77
     * }
     */
    public static int IPPORT_RJE() {
        return IPPORT_RJE;
    }
    private static final int IPPORT_FINGER = (int)79L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_FINGER = 79
     * }
     */
    public static int IPPORT_FINGER() {
        return IPPORT_FINGER;
    }
    private static final int IPPORT_TTYLINK = (int)87L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_TTYLINK = 87
     * }
     */
    public static int IPPORT_TTYLINK() {
        return IPPORT_TTYLINK;
    }
    private static final int IPPORT_SUPDUP = (int)95L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_SUPDUP = 95
     * }
     */
    public static int IPPORT_SUPDUP() {
        return IPPORT_SUPDUP;
    }
    private static final int IPPORT_EXECSERVER = (int)512L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_EXECSERVER = 512
     * }
     */
    public static int IPPORT_EXECSERVER() {
        return IPPORT_EXECSERVER;
    }
    private static final int IPPORT_LOGINSERVER = (int)513L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_LOGINSERVER = 513
     * }
     */
    public static int IPPORT_LOGINSERVER() {
        return IPPORT_LOGINSERVER;
    }
    private static final int IPPORT_CMDSERVER = (int)514L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_CMDSERVER = 514
     * }
     */
    public static int IPPORT_CMDSERVER() {
        return IPPORT_CMDSERVER;
    }
    private static final int IPPORT_EFSSERVER = (int)520L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_EFSSERVER = 520
     * }
     */
    public static int IPPORT_EFSSERVER() {
        return IPPORT_EFSSERVER;
    }
    private static final int IPPORT_BIFFUDP = (int)512L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_BIFFUDP = 512
     * }
     */
    public static int IPPORT_BIFFUDP() {
        return IPPORT_BIFFUDP;
    }
    private static final int IPPORT_WHOSERVER = (int)513L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_WHOSERVER = 513
     * }
     */
    public static int IPPORT_WHOSERVER() {
        return IPPORT_WHOSERVER;
    }
    private static final int IPPORT_ROUTESERVER = (int)520L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_ROUTESERVER = 520
     * }
     */
    public static int IPPORT_ROUTESERVER() {
        return IPPORT_ROUTESERVER;
    }
    private static final int IPPORT_RESERVED = (int)1024L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_RESERVED = 1024
     * }
     */
    public static int IPPORT_RESERVED() {
        return IPPORT_RESERVED;
    }
    private static final int IPPORT_USERRESERVED = (int)5000L;

    /**
     * {@snippet lang=c :
     * enum <anonymous>.IPPORT_USERRESERVED = 5000
     * }
     */
    public static int IPPORT_USERRESERVED() {
        return IPPORT_USERRESERVED;
    }
    public static GroupLayout in6addr_any$LAYOUT() {
        class Holder {
            static final GroupLayout LAYOUT = in6_addr.$LAYOUT();
        }
        return Holder.LAYOUT;
    }
    /**
     * {@snippet lang=c :
     * extern const struct in6_addr in6addr_any
     * }
     */
    public static MemorySegment in6addr_any$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("in6addr_any")
                .reinterpret(in6addr_any$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    public static GroupLayout in6addr_loopback$LAYOUT() {
        class Holder {
            static final GroupLayout LAYOUT = in6_addr.$LAYOUT();
        }
        return Holder.LAYOUT;
    }
    /**
     * {@snippet lang=c :
     * extern const struct in6_addr in6addr_loopback
     * }
     */
    public static MemorySegment in6addr_loopback$SEGMENT() {
        class Holder {
            static final MemorySegment SEGMENT = iouring_h.findOrThrow("in6addr_loopback")
                .reinterpret(in6addr_loopback$LAYOUT().byteSize());
        }
        return Holder.SEGMENT;
    }
    /**
     * {@snippet lang=c :
     * extern uint32_t ntohl(uint32_t __netlong)
     * }
     */
    public static MethodHandle ntohl$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("ntohl"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int ntohl(int __netlong) {
        var mh$ = ntohl$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ntohl", __netlong);
            }
            return (int) mh$.invokeExact(__netlong);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern uint16_t ntohs(uint16_t __netshort)
     * }
     */
    public static MethodHandle ntohs$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_SHORT,
                iouring_h.C_SHORT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("ntohs"),
                    DESC);
        }
        return Holder.MH;
    }

    public static short ntohs(short __netshort) {
        var mh$ = ntohs$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ntohs", __netshort);
            }
            return (short) mh$.invokeExact(__netshort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern uint32_t htonl(uint32_t __hostlong)
     * }
     */
    public static MethodHandle htonl$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("htonl"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int htonl(int __hostlong) {
        var mh$ = htonl$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("htonl", __hostlong);
            }
            return (int) mh$.invokeExact(__hostlong);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern uint16_t htons(uint16_t __hostshort)
     * }
     */
    public static MethodHandle htons$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_SHORT,
                iouring_h.C_SHORT
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("htons"),
                    DESC);
        }
        return Holder.MH;
    }

    public static short htons(short __hostshort) {
        var mh$ = htons$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("htons", __hostshort);
            }
            return (short) mh$.invokeExact(__hostshort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int bindresvport(int __sockfd, struct sockaddr_in *__sock_in)
     * }
     */
    public static MethodHandle bindresvport$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("bindresvport"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int bindresvport(int __sockfd, MemorySegment __sock_in) {
        var mh$ = bindresvport$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bindresvport", __sockfd, __sock_in);
            }
            return (int) mh$.invokeExact(__sockfd, __sock_in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * extern int bindresvport6(int __sockfd, struct sockaddr_in6 *__sock_in)
     * }
     */
    public static MethodHandle bindresvport6$MH() {
        class Holder {
            static final FunctionDescriptor DESC = FunctionDescriptor.of(
                iouring_h.C_INT,
                iouring_h.C_INT,
                iouring_h.C_POINTER
            );

            static final MethodHandle MH = Linker.nativeLinker().downcallHandle(
                    iouring_h.findOrThrow("bindresvport6"),
                    DESC);
        }
        return Holder.MH;
    }

    public static int bindresvport6(int __sockfd, MemorySegment __sock_in) {
        var mh$ = bindresvport6$MH();
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bindresvport6", __sockfd, __sock_in);
            }
            return (int) mh$.invokeExact(__sockfd, __sock_in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;

    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;

    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;

    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;

    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;

    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final long CLOCKS_PER_SEC = 1000000L;

    /**
     * {@snippet lang=c :
     * #define CLOCKS_PER_SEC 1000000
     * }
     */
    public static long CLOCKS_PER_SEC() {
        return CLOCKS_PER_SEC;
    }
    private static final int __BYTE_ORDER = (int)1234L;

    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;

    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int O_NDELAY = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define O_NDELAY 2048
     * }
     */
    public static int O_NDELAY() {
        return O_NDELAY;
    }
    private static final int O_FSYNC = (int)1052672L;

    /**
     * {@snippet lang=c :
     * #define O_FSYNC 1052672
     * }
     */
    public static int O_FSYNC() {
        return O_FSYNC;
    }
    private static final int __O_TMPFILE = (int)4259840L;

    /**
     * {@snippet lang=c :
     * #define __O_TMPFILE 4259840
     * }
     */
    public static int __O_TMPFILE() {
        return __O_TMPFILE;
    }
    private static final int O_DIRECTORY = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define O_DIRECTORY 65536
     * }
     */
    public static int O_DIRECTORY() {
        return O_DIRECTORY;
    }
    private static final int O_NOFOLLOW = (int)131072L;

    /**
     * {@snippet lang=c :
     * #define O_NOFOLLOW 131072
     * }
     */
    public static int O_NOFOLLOW() {
        return O_NOFOLLOW;
    }
    private static final int O_CLOEXEC = (int)524288L;

    /**
     * {@snippet lang=c :
     * #define O_CLOEXEC 524288
     * }
     */
    public static int O_CLOEXEC() {
        return O_CLOEXEC;
    }
    private static final int O_DSYNC = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define O_DSYNC 4096
     * }
     */
    public static int O_DSYNC() {
        return O_DSYNC;
    }
    private static final int O_RSYNC = (int)1052672L;

    /**
     * {@snippet lang=c :
     * #define O_RSYNC 1052672
     * }
     */
    public static int O_RSYNC() {
        return O_RSYNC;
    }
    private static final int F_SETOWN = (int)8L;

    /**
     * {@snippet lang=c :
     * #define F_SETOWN 8
     * }
     */
    public static int F_SETOWN() {
        return F_SETOWN;
    }
    private static final int F_GETOWN = (int)9L;

    /**
     * {@snippet lang=c :
     * #define F_GETOWN 9
     * }
     */
    public static int F_GETOWN() {
        return F_GETOWN;
    }
    private static final int FAPPEND = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define FAPPEND 1024
     * }
     */
    public static int FAPPEND() {
        return FAPPEND;
    }
    private static final int FFSYNC = (int)1052672L;

    /**
     * {@snippet lang=c :
     * #define FFSYNC 1052672
     * }
     */
    public static int FFSYNC() {
        return FFSYNC;
    }
    private static final int FASYNC = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define FASYNC 8192
     * }
     */
    public static int FASYNC() {
        return FASYNC;
    }
    private static final int FNONBLOCK = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define FNONBLOCK 2048
     * }
     */
    public static int FNONBLOCK() {
        return FNONBLOCK;
    }
    private static final int FNDELAY = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define FNDELAY 2048
     * }
     */
    public static int FNDELAY() {
        return FNDELAY;
    }
    private static final int POSIX_FADV_DONTNEED = (int)4L;

    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_DONTNEED 4
     * }
     */
    public static int POSIX_FADV_DONTNEED() {
        return POSIX_FADV_DONTNEED;
    }
    private static final int POSIX_FADV_NOREUSE = (int)5L;

    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_NOREUSE 5
     * }
     */
    public static int POSIX_FADV_NOREUSE() {
        return POSIX_FADV_NOREUSE;
    }
    private static final int AT_FDCWD = (int)-100L;

    /**
     * {@snippet lang=c :
     * #define AT_FDCWD -100
     * }
     */
    public static int AT_FDCWD() {
        return AT_FDCWD;
    }
    private static final long UTIME_NOW = 1073741823L;

    /**
     * {@snippet lang=c :
     * #define UTIME_NOW 1073741823
     * }
     */
    public static long UTIME_NOW() {
        return UTIME_NOW;
    }
    private static final long UTIME_OMIT = 1073741822L;

    /**
     * {@snippet lang=c :
     * #define UTIME_OMIT 1073741822
     * }
     */
    public static long UTIME_OMIT() {
        return UTIME_OMIT;
    }
    private static final int S_IFMT = (int)61440L;

    /**
     * {@snippet lang=c :
     * #define S_IFMT 61440
     * }
     */
    public static int S_IFMT() {
        return S_IFMT;
    }
    private static final int S_IFDIR = (int)16384L;

    /**
     * {@snippet lang=c :
     * #define S_IFDIR 16384
     * }
     */
    public static int S_IFDIR() {
        return S_IFDIR;
    }
    private static final int S_IFCHR = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define S_IFCHR 8192
     * }
     */
    public static int S_IFCHR() {
        return S_IFCHR;
    }
    private static final int S_IFBLK = (int)24576L;

    /**
     * {@snippet lang=c :
     * #define S_IFBLK 24576
     * }
     */
    public static int S_IFBLK() {
        return S_IFBLK;
    }
    private static final int S_IFREG = (int)32768L;

    /**
     * {@snippet lang=c :
     * #define S_IFREG 32768
     * }
     */
    public static int S_IFREG() {
        return S_IFREG;
    }
    private static final int S_IFIFO = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define S_IFIFO 4096
     * }
     */
    public static int S_IFIFO() {
        return S_IFIFO;
    }
    private static final int S_IFLNK = (int)40960L;

    /**
     * {@snippet lang=c :
     * #define S_IFLNK 40960
     * }
     */
    public static int S_IFLNK() {
        return S_IFLNK;
    }
    private static final int S_IFSOCK = (int)49152L;

    /**
     * {@snippet lang=c :
     * #define S_IFSOCK 49152
     * }
     */
    public static int S_IFSOCK() {
        return S_IFSOCK;
    }
    private static final int S_ISUID = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define S_ISUID 2048
     * }
     */
    public static int S_ISUID() {
        return S_ISUID;
    }
    private static final int S_ISGID = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define S_ISGID 1024
     * }
     */
    public static int S_ISGID() {
        return S_ISGID;
    }
    private static final int S_ISVTX = (int)512L;

    /**
     * {@snippet lang=c :
     * #define S_ISVTX 512
     * }
     */
    public static int S_ISVTX() {
        return S_ISVTX;
    }
    private static final int S_IRUSR = (int)256L;

    /**
     * {@snippet lang=c :
     * #define S_IRUSR 256
     * }
     */
    public static int S_IRUSR() {
        return S_IRUSR;
    }
    private static final int S_IWUSR = (int)128L;

    /**
     * {@snippet lang=c :
     * #define S_IWUSR 128
     * }
     */
    public static int S_IWUSR() {
        return S_IWUSR;
    }
    private static final int S_IXUSR = (int)64L;

    /**
     * {@snippet lang=c :
     * #define S_IXUSR 64
     * }
     */
    public static int S_IXUSR() {
        return S_IXUSR;
    }
    private static final int S_IRWXU = (int)448L;

    /**
     * {@snippet lang=c :
     * #define S_IRWXU 448
     * }
     */
    public static int S_IRWXU() {
        return S_IRWXU;
    }
    private static final int S_IRGRP = (int)32L;

    /**
     * {@snippet lang=c :
     * #define S_IRGRP 32
     * }
     */
    public static int S_IRGRP() {
        return S_IRGRP;
    }
    private static final int S_IWGRP = (int)16L;

    /**
     * {@snippet lang=c :
     * #define S_IWGRP 16
     * }
     */
    public static int S_IWGRP() {
        return S_IWGRP;
    }
    private static final int S_IXGRP = (int)8L;

    /**
     * {@snippet lang=c :
     * #define S_IXGRP 8
     * }
     */
    public static int S_IXGRP() {
        return S_IXGRP;
    }
    private static final int S_IRWXG = (int)56L;

    /**
     * {@snippet lang=c :
     * #define S_IRWXG 56
     * }
     */
    public static int S_IRWXG() {
        return S_IRWXG;
    }
    private static final int S_IROTH = (int)4L;

    /**
     * {@snippet lang=c :
     * #define S_IROTH 4
     * }
     */
    public static int S_IROTH() {
        return S_IROTH;
    }
    private static final int S_IWOTH = (int)2L;

    /**
     * {@snippet lang=c :
     * #define S_IWOTH 2
     * }
     */
    public static int S_IWOTH() {
        return S_IWOTH;
    }
    private static final int S_IXOTH = (int)1L;

    /**
     * {@snippet lang=c :
     * #define S_IXOTH 1
     * }
     */
    public static int S_IXOTH() {
        return S_IXOTH;
    }
    private static final int S_IRWXO = (int)7L;

    /**
     * {@snippet lang=c :
     * #define S_IRWXO 7
     * }
     */
    public static int S_IRWXO() {
        return S_IRWXO;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;

    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;

    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;

    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;

    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;

    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;

    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;

    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;

    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final int UIO_MAXIOV = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define UIO_MAXIOV 1024
     * }
     */
    public static int UIO_MAXIOV() {
        return UIO_MAXIOV;
    }
    private static final int _IOC_NRMASK = (int)255L;

    /**
     * {@snippet lang=c :
     * #define _IOC_NRMASK 255
     * }
     */
    public static int _IOC_NRMASK() {
        return _IOC_NRMASK;
    }
    private static final int _IOC_TYPEMASK = (int)255L;

    /**
     * {@snippet lang=c :
     * #define _IOC_TYPEMASK 255
     * }
     */
    public static int _IOC_TYPEMASK() {
        return _IOC_TYPEMASK;
    }
    private static final int _IOC_SIZEMASK = (int)16383L;

    /**
     * {@snippet lang=c :
     * #define _IOC_SIZEMASK 16383
     * }
     */
    public static int _IOC_SIZEMASK() {
        return _IOC_SIZEMASK;
    }
    private static final int _IOC_DIRMASK = (int)3L;

    /**
     * {@snippet lang=c :
     * #define _IOC_DIRMASK 3
     * }
     */
    public static int _IOC_DIRMASK() {
        return _IOC_DIRMASK;
    }
    private static final int _IOC_TYPESHIFT = (int)8L;

    /**
     * {@snippet lang=c :
     * #define _IOC_TYPESHIFT 8
     * }
     */
    public static int _IOC_TYPESHIFT() {
        return _IOC_TYPESHIFT;
    }
    private static final int _IOC_SIZESHIFT = (int)16L;

    /**
     * {@snippet lang=c :
     * #define _IOC_SIZESHIFT 16
     * }
     */
    public static int _IOC_SIZESHIFT() {
        return _IOC_SIZESHIFT;
    }
    private static final int _IOC_DIRSHIFT = (int)30L;

    /**
     * {@snippet lang=c :
     * #define _IOC_DIRSHIFT 30
     * }
     */
    public static int _IOC_DIRSHIFT() {
        return _IOC_DIRSHIFT;
    }
    private static final int _IOC_NONE = (int)0L;

    /**
     * {@snippet lang=c :
     * #define _IOC_NONE 0
     * }
     */
    public static int _IOC_NONE() {
        return _IOC_NONE;
    }
    private static final int _IOC_WRITE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define _IOC_WRITE 1
     * }
     */
    public static int _IOC_WRITE() {
        return _IOC_WRITE;
    }
    private static final int _IOC_READ = (int)2L;

    /**
     * {@snippet lang=c :
     * #define _IOC_READ 2
     * }
     */
    public static int _IOC_READ() {
        return _IOC_READ;
    }
    private static final int IOC_IN = (int)1073741824L;

    /**
     * {@snippet lang=c :
     * #define IOC_IN 1073741824
     * }
     */
    public static int IOC_IN() {
        return IOC_IN;
    }
    private static final int IOC_OUT = (int)2147483648L;

    /**
     * {@snippet lang=c :
     * #define IOC_OUT 2147483648
     * }
     */
    public static int IOC_OUT() {
        return IOC_OUT;
    }
    private static final int IOC_INOUT = (int)3221225472L;

    /**
     * {@snippet lang=c :
     * #define IOC_INOUT 3221225472
     * }
     */
    public static int IOC_INOUT() {
        return IOC_INOUT;
    }
    private static final int IOCSIZE_MASK = (int)1073676288L;

    /**
     * {@snippet lang=c :
     * #define IOCSIZE_MASK 1073676288
     * }
     */
    public static int IOCSIZE_MASK() {
        return IOCSIZE_MASK;
    }
    private static final int IOCSIZE_SHIFT = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IOCSIZE_SHIFT 16
     * }
     */
    public static int IOCSIZE_SHIFT() {
        return IOCSIZE_SHIFT;
    }
    private static final MemorySegment FSCRYPT_KEY_DESC_PREFIX = Arena.ofAuto().allocateFrom("fscrypt:");

    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_DESC_PREFIX "fscrypt:"
     * }
     */
    public static MemorySegment FSCRYPT_KEY_DESC_PREFIX() {
        return FSCRYPT_KEY_DESC_PREFIX;
    }
    private static final long FS_IOC_SET_ENCRYPTION_POLICY = 2148296211L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_SET_ENCRYPTION_POLICY 2148296211
     * }
     */
    public static long FS_IOC_SET_ENCRYPTION_POLICY() {
        return FS_IOC_SET_ENCRYPTION_POLICY;
    }
    private static final long FS_IOC_GET_ENCRYPTION_PWSALT = 1074816532L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GET_ENCRYPTION_PWSALT 1074816532
     * }
     */
    public static long FS_IOC_GET_ENCRYPTION_PWSALT() {
        return FS_IOC_GET_ENCRYPTION_PWSALT;
    }
    private static final long FS_IOC_GET_ENCRYPTION_POLICY = 1074554389L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GET_ENCRYPTION_POLICY 1074554389
     * }
     */
    public static long FS_IOC_GET_ENCRYPTION_POLICY() {
        return FS_IOC_GET_ENCRYPTION_POLICY;
    }
    private static final long FS_IOC_GET_ENCRYPTION_POLICY_EX = 3221841430L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GET_ENCRYPTION_POLICY_EX 3221841430
     * }
     */
    public static long FS_IOC_GET_ENCRYPTION_POLICY_EX() {
        return FS_IOC_GET_ENCRYPTION_POLICY_EX;
    }
    private static final long FS_IOC_ADD_ENCRYPTION_KEY = 3226494487L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_ADD_ENCRYPTION_KEY 3226494487
     * }
     */
    public static long FS_IOC_ADD_ENCRYPTION_KEY() {
        return FS_IOC_ADD_ENCRYPTION_KEY;
    }
    private static final long FS_IOC_REMOVE_ENCRYPTION_KEY = 3225445912L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_REMOVE_ENCRYPTION_KEY 3225445912
     * }
     */
    public static long FS_IOC_REMOVE_ENCRYPTION_KEY() {
        return FS_IOC_REMOVE_ENCRYPTION_KEY;
    }
    private static final long FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS = 3225445913L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS 3225445913
     * }
     */
    public static long FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS() {
        return FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS;
    }
    private static final long FS_IOC_GET_ENCRYPTION_KEY_STATUS = 3229640218L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GET_ENCRYPTION_KEY_STATUS 3229640218
     * }
     */
    public static long FS_IOC_GET_ENCRYPTION_KEY_STATUS() {
        return FS_IOC_GET_ENCRYPTION_KEY_STATUS;
    }
    private static final long FS_IOC_GET_ENCRYPTION_NONCE = 2148558363L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GET_ENCRYPTION_NONCE 2148558363
     * }
     */
    public static long FS_IOC_GET_ENCRYPTION_NONCE() {
        return FS_IOC_GET_ENCRYPTION_NONCE;
    }
    private static final int FS_KEY_DESCRIPTOR_SIZE = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FS_KEY_DESCRIPTOR_SIZE 8
     * }
     */
    public static int FS_KEY_DESCRIPTOR_SIZE() {
        return FS_KEY_DESCRIPTOR_SIZE;
    }
    private static final int FS_POLICY_FLAGS_PAD_4 = (int)0L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_PAD_4 0
     * }
     */
    public static int FS_POLICY_FLAGS_PAD_4() {
        return FS_POLICY_FLAGS_PAD_4;
    }
    private static final int FS_POLICY_FLAGS_PAD_8 = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_PAD_8 1
     * }
     */
    public static int FS_POLICY_FLAGS_PAD_8() {
        return FS_POLICY_FLAGS_PAD_8;
    }
    private static final int FS_POLICY_FLAGS_PAD_16 = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_PAD_16 2
     * }
     */
    public static int FS_POLICY_FLAGS_PAD_16() {
        return FS_POLICY_FLAGS_PAD_16;
    }
    private static final int FS_POLICY_FLAGS_PAD_32 = (int)3L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_PAD_32 3
     * }
     */
    public static int FS_POLICY_FLAGS_PAD_32() {
        return FS_POLICY_FLAGS_PAD_32;
    }
    private static final int FS_POLICY_FLAGS_PAD_MASK = (int)3L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_PAD_MASK 3
     * }
     */
    public static int FS_POLICY_FLAGS_PAD_MASK() {
        return FS_POLICY_FLAGS_PAD_MASK;
    }
    private static final int FS_POLICY_FLAG_DIRECT_KEY = (int)4L;

    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAG_DIRECT_KEY 4
     * }
     */
    public static int FS_POLICY_FLAG_DIRECT_KEY() {
        return FS_POLICY_FLAG_DIRECT_KEY;
    }
    private static final int FS_ENCRYPTION_MODE_AES_256_XTS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_256_XTS 1
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_256_XTS() {
        return FS_ENCRYPTION_MODE_AES_256_XTS;
    }
    private static final int FS_ENCRYPTION_MODE_AES_256_CTS = (int)4L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_256_CTS 4
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_256_CTS() {
        return FS_ENCRYPTION_MODE_AES_256_CTS;
    }
    private static final int FS_ENCRYPTION_MODE_AES_128_CBC = (int)5L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_128_CBC 5
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_128_CBC() {
        return FS_ENCRYPTION_MODE_AES_128_CBC;
    }
    private static final int FS_ENCRYPTION_MODE_AES_128_CTS = (int)6L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_128_CTS 6
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_128_CTS() {
        return FS_ENCRYPTION_MODE_AES_128_CTS;
    }
    private static final int FS_ENCRYPTION_MODE_ADIANTUM = (int)9L;

    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_ADIANTUM 9
     * }
     */
    public static int FS_ENCRYPTION_MODE_ADIANTUM() {
        return FS_ENCRYPTION_MODE_ADIANTUM;
    }
    private static final MemorySegment FS_KEY_DESC_PREFIX = Arena.ofAuto().allocateFrom("fscrypt:");

    /**
     * {@snippet lang=c :
     * #define FS_KEY_DESC_PREFIX "fscrypt:"
     * }
     */
    public static MemorySegment FS_KEY_DESC_PREFIX() {
        return FS_KEY_DESC_PREFIX;
    }
    private static final int FS_KEY_DESC_PREFIX_SIZE = (int)8L;

    /**
     * {@snippet lang=c :
     * #define FS_KEY_DESC_PREFIX_SIZE 8
     * }
     */
    public static int FS_KEY_DESC_PREFIX_SIZE() {
        return FS_KEY_DESC_PREFIX_SIZE;
    }
    private static final int FS_MAX_KEY_SIZE = (int)64L;

    /**
     * {@snippet lang=c :
     * #define FS_MAX_KEY_SIZE 64
     * }
     */
    public static int FS_MAX_KEY_SIZE() {
        return FS_MAX_KEY_SIZE;
    }
    private static final int MS_POSIXACL = (int)65536L;

    /**
     * {@snippet lang=c :
     * #define MS_POSIXACL 65536
     * }
     */
    public static int MS_POSIXACL() {
        return MS_POSIXACL;
    }
    private static final int MS_UNBINDABLE = (int)131072L;

    /**
     * {@snippet lang=c :
     * #define MS_UNBINDABLE 131072
     * }
     */
    public static int MS_UNBINDABLE() {
        return MS_UNBINDABLE;
    }
    private static final int MS_PRIVATE = (int)262144L;

    /**
     * {@snippet lang=c :
     * #define MS_PRIVATE 262144
     * }
     */
    public static int MS_PRIVATE() {
        return MS_PRIVATE;
    }
    private static final int MS_SLAVE = (int)524288L;

    /**
     * {@snippet lang=c :
     * #define MS_SLAVE 524288
     * }
     */
    public static int MS_SLAVE() {
        return MS_SLAVE;
    }
    private static final int MS_SHARED = (int)1048576L;

    /**
     * {@snippet lang=c :
     * #define MS_SHARED 1048576
     * }
     */
    public static int MS_SHARED() {
        return MS_SHARED;
    }
    private static final int MS_RELATIME = (int)2097152L;

    /**
     * {@snippet lang=c :
     * #define MS_RELATIME 2097152
     * }
     */
    public static int MS_RELATIME() {
        return MS_RELATIME;
    }
    private static final int MS_KERNMOUNT = (int)4194304L;

    /**
     * {@snippet lang=c :
     * #define MS_KERNMOUNT 4194304
     * }
     */
    public static int MS_KERNMOUNT() {
        return MS_KERNMOUNT;
    }
    private static final int MS_I_VERSION = (int)8388608L;

    /**
     * {@snippet lang=c :
     * #define MS_I_VERSION 8388608
     * }
     */
    public static int MS_I_VERSION() {
        return MS_I_VERSION;
    }
    private static final int MS_STRICTATIME = (int)16777216L;

    /**
     * {@snippet lang=c :
     * #define MS_STRICTATIME 16777216
     * }
     */
    public static int MS_STRICTATIME() {
        return MS_STRICTATIME;
    }
    private static final int MS_LAZYTIME = (int)33554432L;

    /**
     * {@snippet lang=c :
     * #define MS_LAZYTIME 33554432
     * }
     */
    public static int MS_LAZYTIME() {
        return MS_LAZYTIME;
    }
    private static final int MS_SUBMOUNT = (int)67108864L;

    /**
     * {@snippet lang=c :
     * #define MS_SUBMOUNT 67108864
     * }
     */
    public static int MS_SUBMOUNT() {
        return MS_SUBMOUNT;
    }
    private static final int MS_NOREMOTELOCK = (int)134217728L;

    /**
     * {@snippet lang=c :
     * #define MS_NOREMOTELOCK 134217728
     * }
     */
    public static int MS_NOREMOTELOCK() {
        return MS_NOREMOTELOCK;
    }
    private static final int MS_NOSEC = (int)268435456L;

    /**
     * {@snippet lang=c :
     * #define MS_NOSEC 268435456
     * }
     */
    public static int MS_NOSEC() {
        return MS_NOSEC;
    }
    private static final int MS_BORN = (int)536870912L;

    /**
     * {@snippet lang=c :
     * #define MS_BORN 536870912
     * }
     */
    public static int MS_BORN() {
        return MS_BORN;
    }
    private static final int MS_ACTIVE = (int)1073741824L;

    /**
     * {@snippet lang=c :
     * #define MS_ACTIVE 1073741824
     * }
     */
    public static int MS_ACTIVE() {
        return MS_ACTIVE;
    }
    private static final int MS_NOUSER = (int)-2147483648L;

    /**
     * {@snippet lang=c :
     * #define MS_NOUSER -2147483648
     * }
     */
    public static int MS_NOUSER() {
        return MS_NOUSER;
    }
    private static final int MS_RMT_MASK = (int)41943121L;

    /**
     * {@snippet lang=c :
     * #define MS_RMT_MASK 41943121
     * }
     */
    public static int MS_RMT_MASK() {
        return MS_RMT_MASK;
    }
    private static final int MS_MGC_VAL = (int)3236757504L;

    /**
     * {@snippet lang=c :
     * #define MS_MGC_VAL 3236757504
     * }
     */
    public static int MS_MGC_VAL() {
        return MS_MGC_VAL;
    }
    private static final int MS_MGC_MSK = (int)4294901760L;

    /**
     * {@snippet lang=c :
     * #define MS_MGC_MSK 4294901760
     * }
     */
    public static int MS_MGC_MSK() {
        return MS_MGC_MSK;
    }
    private static final int OPEN_TREE_CLOEXEC = (int)524288L;

    /**
     * {@snippet lang=c :
     * #define OPEN_TREE_CLOEXEC 524288
     * }
     */
    public static int OPEN_TREE_CLOEXEC() {
        return OPEN_TREE_CLOEXEC;
    }
    private static final int BLOCK_SIZE = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define BLOCK_SIZE 1024
     * }
     */
    public static int BLOCK_SIZE() {
        return BLOCK_SIZE;
    }
    private static final int SEEK_MAX = (int)4L;

    /**
     * {@snippet lang=c :
     * #define SEEK_MAX 4
     * }
     */
    public static int SEEK_MAX() {
        return SEEK_MAX;
    }
    private static final int RENAME_NOREPLACE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define RENAME_NOREPLACE 1
     * }
     */
    public static int RENAME_NOREPLACE() {
        return RENAME_NOREPLACE;
    }
    private static final int RENAME_EXCHANGE = (int)2L;

    /**
     * {@snippet lang=c :
     * #define RENAME_EXCHANGE 2
     * }
     */
    public static int RENAME_EXCHANGE() {
        return RENAME_EXCHANGE;
    }
    private static final int RENAME_WHITEOUT = (int)4L;

    /**
     * {@snippet lang=c :
     * #define RENAME_WHITEOUT 4
     * }
     */
    public static int RENAME_WHITEOUT() {
        return RENAME_WHITEOUT;
    }
    private static final int FS_XFLAG_HASATTR = (int)2147483648L;

    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_HASATTR 2147483648
     * }
     */
    public static int FS_XFLAG_HASATTR() {
        return FS_XFLAG_HASATTR;
    }
    private static final int BLKROSET = (int)4701L;

    /**
     * {@snippet lang=c :
     * #define BLKROSET 4701
     * }
     */
    public static int BLKROSET() {
        return BLKROSET;
    }
    private static final int BLKROGET = (int)4702L;

    /**
     * {@snippet lang=c :
     * #define BLKROGET 4702
     * }
     */
    public static int BLKROGET() {
        return BLKROGET;
    }
    private static final int BLKRRPART = (int)4703L;

    /**
     * {@snippet lang=c :
     * #define BLKRRPART 4703
     * }
     */
    public static int BLKRRPART() {
        return BLKRRPART;
    }
    private static final int BLKGETSIZE = (int)4704L;

    /**
     * {@snippet lang=c :
     * #define BLKGETSIZE 4704
     * }
     */
    public static int BLKGETSIZE() {
        return BLKGETSIZE;
    }
    private static final int BLKFLSBUF = (int)4705L;

    /**
     * {@snippet lang=c :
     * #define BLKFLSBUF 4705
     * }
     */
    public static int BLKFLSBUF() {
        return BLKFLSBUF;
    }
    private static final int BLKRASET = (int)4706L;

    /**
     * {@snippet lang=c :
     * #define BLKRASET 4706
     * }
     */
    public static int BLKRASET() {
        return BLKRASET;
    }
    private static final int BLKRAGET = (int)4707L;

    /**
     * {@snippet lang=c :
     * #define BLKRAGET 4707
     * }
     */
    public static int BLKRAGET() {
        return BLKRAGET;
    }
    private static final int BLKFRASET = (int)4708L;

    /**
     * {@snippet lang=c :
     * #define BLKFRASET 4708
     * }
     */
    public static int BLKFRASET() {
        return BLKFRASET;
    }
    private static final int BLKFRAGET = (int)4709L;

    /**
     * {@snippet lang=c :
     * #define BLKFRAGET 4709
     * }
     */
    public static int BLKFRAGET() {
        return BLKFRAGET;
    }
    private static final int BLKSECTSET = (int)4710L;

    /**
     * {@snippet lang=c :
     * #define BLKSECTSET 4710
     * }
     */
    public static int BLKSECTSET() {
        return BLKSECTSET;
    }
    private static final int BLKSECTGET = (int)4711L;

    /**
     * {@snippet lang=c :
     * #define BLKSECTGET 4711
     * }
     */
    public static int BLKSECTGET() {
        return BLKSECTGET;
    }
    private static final int BLKSSZGET = (int)4712L;

    /**
     * {@snippet lang=c :
     * #define BLKSSZGET 4712
     * }
     */
    public static int BLKSSZGET() {
        return BLKSSZGET;
    }
    private static final long BLKBSZGET = 2148012656L;

    /**
     * {@snippet lang=c :
     * #define BLKBSZGET 2148012656
     * }
     */
    public static long BLKBSZGET() {
        return BLKBSZGET;
    }
    private static final long BLKBSZSET = 1074270833L;

    /**
     * {@snippet lang=c :
     * #define BLKBSZSET 1074270833
     * }
     */
    public static long BLKBSZSET() {
        return BLKBSZSET;
    }
    private static final long BLKGETSIZE64 = 2148012658L;

    /**
     * {@snippet lang=c :
     * #define BLKGETSIZE64 2148012658
     * }
     */
    public static long BLKGETSIZE64() {
        return BLKGETSIZE64;
    }
    private static final int BLKTRACESTART = (int)4724L;

    /**
     * {@snippet lang=c :
     * #define BLKTRACESTART 4724
     * }
     */
    public static int BLKTRACESTART() {
        return BLKTRACESTART;
    }
    private static final int BLKTRACESTOP = (int)4725L;

    /**
     * {@snippet lang=c :
     * #define BLKTRACESTOP 4725
     * }
     */
    public static int BLKTRACESTOP() {
        return BLKTRACESTOP;
    }
    private static final int BLKTRACETEARDOWN = (int)4726L;

    /**
     * {@snippet lang=c :
     * #define BLKTRACETEARDOWN 4726
     * }
     */
    public static int BLKTRACETEARDOWN() {
        return BLKTRACETEARDOWN;
    }
    private static final int BLKDISCARD = (int)4727L;

    /**
     * {@snippet lang=c :
     * #define BLKDISCARD 4727
     * }
     */
    public static int BLKDISCARD() {
        return BLKDISCARD;
    }
    private static final int BLKIOMIN = (int)4728L;

    /**
     * {@snippet lang=c :
     * #define BLKIOMIN 4728
     * }
     */
    public static int BLKIOMIN() {
        return BLKIOMIN;
    }
    private static final int BLKIOOPT = (int)4729L;

    /**
     * {@snippet lang=c :
     * #define BLKIOOPT 4729
     * }
     */
    public static int BLKIOOPT() {
        return BLKIOOPT;
    }
    private static final int BLKALIGNOFF = (int)4730L;

    /**
     * {@snippet lang=c :
     * #define BLKALIGNOFF 4730
     * }
     */
    public static int BLKALIGNOFF() {
        return BLKALIGNOFF;
    }
    private static final int BLKPBSZGET = (int)4731L;

    /**
     * {@snippet lang=c :
     * #define BLKPBSZGET 4731
     * }
     */
    public static int BLKPBSZGET() {
        return BLKPBSZGET;
    }
    private static final int BLKDISCARDZEROES = (int)4732L;

    /**
     * {@snippet lang=c :
     * #define BLKDISCARDZEROES 4732
     * }
     */
    public static int BLKDISCARDZEROES() {
        return BLKDISCARDZEROES;
    }
    private static final int BLKSECDISCARD = (int)4733L;

    /**
     * {@snippet lang=c :
     * #define BLKSECDISCARD 4733
     * }
     */
    public static int BLKSECDISCARD() {
        return BLKSECDISCARD;
    }
    private static final int BLKROTATIONAL = (int)4734L;

    /**
     * {@snippet lang=c :
     * #define BLKROTATIONAL 4734
     * }
     */
    public static int BLKROTATIONAL() {
        return BLKROTATIONAL;
    }
    private static final int BLKZEROOUT = (int)4735L;

    /**
     * {@snippet lang=c :
     * #define BLKZEROOUT 4735
     * }
     */
    public static int BLKZEROOUT() {
        return BLKZEROOUT;
    }
    private static final long BLKGETDISKSEQ = 2148012672L;

    /**
     * {@snippet lang=c :
     * #define BLKGETDISKSEQ 2148012672
     * }
     */
    public static long BLKGETDISKSEQ() {
        return BLKGETDISKSEQ;
    }
    private static final int FIBMAP = (int)1L;

    /**
     * {@snippet lang=c :
     * #define FIBMAP 1
     * }
     */
    public static int FIBMAP() {
        return FIBMAP;
    }
    private static final int FIGETBSZ = (int)2L;

    /**
     * {@snippet lang=c :
     * #define FIGETBSZ 2
     * }
     */
    public static int FIGETBSZ() {
        return FIGETBSZ;
    }
    private static final long FIFREEZE = 3221510263L;

    /**
     * {@snippet lang=c :
     * #define FIFREEZE 3221510263
     * }
     */
    public static long FIFREEZE() {
        return FIFREEZE;
    }
    private static final long FITHAW = 3221510264L;

    /**
     * {@snippet lang=c :
     * #define FITHAW 3221510264
     * }
     */
    public static long FITHAW() {
        return FITHAW;
    }
    private static final long FITRIM = 3222820985L;

    /**
     * {@snippet lang=c :
     * #define FITRIM 3222820985
     * }
     */
    public static long FITRIM() {
        return FITRIM;
    }
    private static final long FICLONE = 1074041865L;

    /**
     * {@snippet lang=c :
     * #define FICLONE 1074041865
     * }
     */
    public static long FICLONE() {
        return FICLONE;
    }
    private static final long FICLONERANGE = 1075876877L;

    /**
     * {@snippet lang=c :
     * #define FICLONERANGE 1075876877
     * }
     */
    public static long FICLONERANGE() {
        return FICLONERANGE;
    }
    private static final long FIDEDUPERANGE = 3222836278L;

    /**
     * {@snippet lang=c :
     * #define FIDEDUPERANGE 3222836278
     * }
     */
    public static long FIDEDUPERANGE() {
        return FIDEDUPERANGE;
    }
    private static final long FS_IOC_GETFLAGS = 2148034049L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GETFLAGS 2148034049
     * }
     */
    public static long FS_IOC_GETFLAGS() {
        return FS_IOC_GETFLAGS;
    }
    private static final long FS_IOC_SETFLAGS = 1074292226L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_SETFLAGS 1074292226
     * }
     */
    public static long FS_IOC_SETFLAGS() {
        return FS_IOC_SETFLAGS;
    }
    private static final long FS_IOC_GETVERSION = 2148038145L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GETVERSION 2148038145
     * }
     */
    public static long FS_IOC_GETVERSION() {
        return FS_IOC_GETVERSION;
    }
    private static final long FS_IOC_SETVERSION = 1074296322L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_SETVERSION 1074296322
     * }
     */
    public static long FS_IOC_SETVERSION() {
        return FS_IOC_SETVERSION;
    }
    private static final long FS_IOC32_GETFLAGS = 2147771905L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC32_GETFLAGS 2147771905
     * }
     */
    public static long FS_IOC32_GETFLAGS() {
        return FS_IOC32_GETFLAGS;
    }
    private static final long FS_IOC32_SETFLAGS = 1074030082L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC32_SETFLAGS 1074030082
     * }
     */
    public static long FS_IOC32_SETFLAGS() {
        return FS_IOC32_SETFLAGS;
    }
    private static final long FS_IOC32_GETVERSION = 2147776001L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC32_GETVERSION 2147776001
     * }
     */
    public static long FS_IOC32_GETVERSION() {
        return FS_IOC32_GETVERSION;
    }
    private static final long FS_IOC32_SETVERSION = 1074034178L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC32_SETVERSION 1074034178
     * }
     */
    public static long FS_IOC32_SETVERSION() {
        return FS_IOC32_SETVERSION;
    }
    private static final long FS_IOC_FSGETXATTR = 2149341215L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_FSGETXATTR 2149341215
     * }
     */
    public static long FS_IOC_FSGETXATTR() {
        return FS_IOC_FSGETXATTR;
    }
    private static final long FS_IOC_FSSETXATTR = 1075599392L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_FSSETXATTR 1075599392
     * }
     */
    public static long FS_IOC_FSSETXATTR() {
        return FS_IOC_FSSETXATTR;
    }
    private static final long FS_IOC_GETFSLABEL = 2164298801L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_GETFSLABEL 2164298801
     * }
     */
    public static long FS_IOC_GETFSLABEL() {
        return FS_IOC_GETFSLABEL;
    }
    private static final long FS_IOC_SETFSLABEL = 1090556978L;

    /**
     * {@snippet lang=c :
     * #define FS_IOC_SETFSLABEL 1090556978
     * }
     */
    public static long FS_IOC_SETFSLABEL() {
        return FS_IOC_SETFSLABEL;
    }
    private static final int FS_RESERVED_FL = (int)2147483648L;

    /**
     * {@snippet lang=c :
     * #define FS_RESERVED_FL 2147483648
     * }
     */
    public static int FS_RESERVED_FL() {
        return FS_RESERVED_FL;
    }
    private static final int SYNC_FILE_RANGE_WRITE_AND_WAIT = (int)7L;

    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WRITE_AND_WAIT 7
     * }
     */
    public static int SYNC_FILE_RANGE_WRITE_AND_WAIT() {
        return SYNC_FILE_RANGE_WRITE_AND_WAIT;
    }
    private static final int RWF_HIPRI = (int)1L;

    /**
     * {@snippet lang=c :
     * #define RWF_HIPRI 1
     * }
     */
    public static int RWF_HIPRI() {
        return RWF_HIPRI;
    }
    private static final int RWF_DSYNC = (int)2L;

    /**
     * {@snippet lang=c :
     * #define RWF_DSYNC 2
     * }
     */
    public static int RWF_DSYNC() {
        return RWF_DSYNC;
    }
    private static final int RWF_SYNC = (int)4L;

    /**
     * {@snippet lang=c :
     * #define RWF_SYNC 4
     * }
     */
    public static int RWF_SYNC() {
        return RWF_SYNC;
    }
    private static final int RWF_NOWAIT = (int)8L;

    /**
     * {@snippet lang=c :
     * #define RWF_NOWAIT 8
     * }
     */
    public static int RWF_NOWAIT() {
        return RWF_NOWAIT;
    }
    private static final int RWF_APPEND = (int)16L;

    /**
     * {@snippet lang=c :
     * #define RWF_APPEND 16
     * }
     */
    public static int RWF_APPEND() {
        return RWF_APPEND;
    }
    private static final int RWF_SUPPORTED = (int)31L;

    /**
     * {@snippet lang=c :
     * #define RWF_SUPPORTED 31
     * }
     */
    public static int RWF_SUPPORTED() {
        return RWF_SUPPORTED;
    }
    private static final int IORING_FILE_INDEX_ALLOC = (int)4294967295L;

    /**
     * {@snippet lang=c :
     * #define IORING_FILE_INDEX_ALLOC 4294967295
     * }
     */
    public static int IORING_FILE_INDEX_ALLOC() {
        return IORING_FILE_INDEX_ALLOC;
    }
    private static final int IOSQE_FIXED_FILE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_FIXED_FILE 1
     * }
     */
    public static int IOSQE_FIXED_FILE() {
        return IOSQE_FIXED_FILE;
    }
    private static final int IOSQE_IO_DRAIN = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_IO_DRAIN 2
     * }
     */
    public static int IOSQE_IO_DRAIN() {
        return IOSQE_IO_DRAIN;
    }
    private static final int IOSQE_IO_LINK = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_IO_LINK 4
     * }
     */
    public static int IOSQE_IO_LINK() {
        return IOSQE_IO_LINK;
    }
    private static final int IOSQE_IO_HARDLINK = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_IO_HARDLINK 8
     * }
     */
    public static int IOSQE_IO_HARDLINK() {
        return IOSQE_IO_HARDLINK;
    }
    private static final int IOSQE_ASYNC = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_ASYNC 16
     * }
     */
    public static int IOSQE_ASYNC() {
        return IOSQE_ASYNC;
    }
    private static final int IOSQE_BUFFER_SELECT = (int)32L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_BUFFER_SELECT 32
     * }
     */
    public static int IOSQE_BUFFER_SELECT() {
        return IOSQE_BUFFER_SELECT;
    }
    private static final int IOSQE_CQE_SKIP_SUCCESS = (int)64L;

    /**
     * {@snippet lang=c :
     * #define IOSQE_CQE_SKIP_SUCCESS 64
     * }
     */
    public static int IOSQE_CQE_SKIP_SUCCESS() {
        return IOSQE_CQE_SKIP_SUCCESS;
    }
    private static final int IORING_SETUP_IOPOLL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_IOPOLL 1
     * }
     */
    public static int IORING_SETUP_IOPOLL() {
        return IORING_SETUP_IOPOLL;
    }
    private static final int IORING_SETUP_SQPOLL = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_SQPOLL 2
     * }
     */
    public static int IORING_SETUP_SQPOLL() {
        return IORING_SETUP_SQPOLL;
    }
    private static final int IORING_SETUP_SQ_AFF = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_SQ_AFF 4
     * }
     */
    public static int IORING_SETUP_SQ_AFF() {
        return IORING_SETUP_SQ_AFF;
    }
    private static final int IORING_SETUP_CQSIZE = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_CQSIZE 8
     * }
     */
    public static int IORING_SETUP_CQSIZE() {
        return IORING_SETUP_CQSIZE;
    }
    private static final int IORING_SETUP_CLAMP = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_CLAMP 16
     * }
     */
    public static int IORING_SETUP_CLAMP() {
        return IORING_SETUP_CLAMP;
    }
    private static final int IORING_SETUP_ATTACH_WQ = (int)32L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_ATTACH_WQ 32
     * }
     */
    public static int IORING_SETUP_ATTACH_WQ() {
        return IORING_SETUP_ATTACH_WQ;
    }
    private static final int IORING_SETUP_R_DISABLED = (int)64L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_R_DISABLED 64
     * }
     */
    public static int IORING_SETUP_R_DISABLED() {
        return IORING_SETUP_R_DISABLED;
    }
    private static final int IORING_SETUP_SUBMIT_ALL = (int)128L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_SUBMIT_ALL 128
     * }
     */
    public static int IORING_SETUP_SUBMIT_ALL() {
        return IORING_SETUP_SUBMIT_ALL;
    }
    private static final int IORING_SETUP_COOP_TASKRUN = (int)256L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_COOP_TASKRUN 256
     * }
     */
    public static int IORING_SETUP_COOP_TASKRUN() {
        return IORING_SETUP_COOP_TASKRUN;
    }
    private static final int IORING_SETUP_TASKRUN_FLAG = (int)512L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_TASKRUN_FLAG 512
     * }
     */
    public static int IORING_SETUP_TASKRUN_FLAG() {
        return IORING_SETUP_TASKRUN_FLAG;
    }
    private static final int IORING_SETUP_SQE128 = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_SQE128 1024
     * }
     */
    public static int IORING_SETUP_SQE128() {
        return IORING_SETUP_SQE128;
    }
    private static final int IORING_SETUP_CQE32 = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_CQE32 2048
     * }
     */
    public static int IORING_SETUP_CQE32() {
        return IORING_SETUP_CQE32;
    }
    private static final int IORING_SETUP_SINGLE_ISSUER = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_SINGLE_ISSUER 4096
     * }
     */
    public static int IORING_SETUP_SINGLE_ISSUER() {
        return IORING_SETUP_SINGLE_ISSUER;
    }
    private static final int IORING_SETUP_DEFER_TASKRUN = (int)8192L;

    /**
     * {@snippet lang=c :
     * #define IORING_SETUP_DEFER_TASKRUN 8192
     * }
     */
    public static int IORING_SETUP_DEFER_TASKRUN() {
        return IORING_SETUP_DEFER_TASKRUN;
    }
    private static final int IORING_URING_CMD_FIXED = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_URING_CMD_FIXED 1
     * }
     */
    public static int IORING_URING_CMD_FIXED() {
        return IORING_URING_CMD_FIXED;
    }
    private static final int IORING_FSYNC_DATASYNC = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_FSYNC_DATASYNC 1
     * }
     */
    public static int IORING_FSYNC_DATASYNC() {
        return IORING_FSYNC_DATASYNC;
    }
    private static final int IORING_TIMEOUT_ABS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_ABS 1
     * }
     */
    public static int IORING_TIMEOUT_ABS() {
        return IORING_TIMEOUT_ABS;
    }
    private static final int IORING_TIMEOUT_UPDATE = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_UPDATE 2
     * }
     */
    public static int IORING_TIMEOUT_UPDATE() {
        return IORING_TIMEOUT_UPDATE;
    }
    private static final int IORING_TIMEOUT_BOOTTIME = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_BOOTTIME 4
     * }
     */
    public static int IORING_TIMEOUT_BOOTTIME() {
        return IORING_TIMEOUT_BOOTTIME;
    }
    private static final int IORING_TIMEOUT_REALTIME = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_REALTIME 8
     * }
     */
    public static int IORING_TIMEOUT_REALTIME() {
        return IORING_TIMEOUT_REALTIME;
    }
    private static final int IORING_LINK_TIMEOUT_UPDATE = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IORING_LINK_TIMEOUT_UPDATE 16
     * }
     */
    public static int IORING_LINK_TIMEOUT_UPDATE() {
        return IORING_LINK_TIMEOUT_UPDATE;
    }
    private static final int IORING_TIMEOUT_ETIME_SUCCESS = (int)32L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_ETIME_SUCCESS 32
     * }
     */
    public static int IORING_TIMEOUT_ETIME_SUCCESS() {
        return IORING_TIMEOUT_ETIME_SUCCESS;
    }
    private static final int IORING_TIMEOUT_CLOCK_MASK = (int)12L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_CLOCK_MASK 12
     * }
     */
    public static int IORING_TIMEOUT_CLOCK_MASK() {
        return IORING_TIMEOUT_CLOCK_MASK;
    }
    private static final int IORING_TIMEOUT_UPDATE_MASK = (int)18L;

    /**
     * {@snippet lang=c :
     * #define IORING_TIMEOUT_UPDATE_MASK 18
     * }
     */
    public static int IORING_TIMEOUT_UPDATE_MASK() {
        return IORING_TIMEOUT_UPDATE_MASK;
    }
    private static final int SPLICE_F_FD_IN_FIXED = (int)2147483648L;

    /**
     * {@snippet lang=c :
     * #define SPLICE_F_FD_IN_FIXED 2147483648
     * }
     */
    public static int SPLICE_F_FD_IN_FIXED() {
        return SPLICE_F_FD_IN_FIXED;
    }
    private static final int IORING_POLL_ADD_MULTI = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_POLL_ADD_MULTI 1
     * }
     */
    public static int IORING_POLL_ADD_MULTI() {
        return IORING_POLL_ADD_MULTI;
    }
    private static final int IORING_POLL_UPDATE_EVENTS = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_POLL_UPDATE_EVENTS 2
     * }
     */
    public static int IORING_POLL_UPDATE_EVENTS() {
        return IORING_POLL_UPDATE_EVENTS;
    }
    private static final int IORING_POLL_UPDATE_USER_DATA = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_POLL_UPDATE_USER_DATA 4
     * }
     */
    public static int IORING_POLL_UPDATE_USER_DATA() {
        return IORING_POLL_UPDATE_USER_DATA;
    }
    private static final int IORING_POLL_ADD_LEVEL = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_POLL_ADD_LEVEL 8
     * }
     */
    public static int IORING_POLL_ADD_LEVEL() {
        return IORING_POLL_ADD_LEVEL;
    }
    private static final int IORING_ASYNC_CANCEL_ALL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_ASYNC_CANCEL_ALL 1
     * }
     */
    public static int IORING_ASYNC_CANCEL_ALL() {
        return IORING_ASYNC_CANCEL_ALL;
    }
    private static final int IORING_ASYNC_CANCEL_FD = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_ASYNC_CANCEL_FD 2
     * }
     */
    public static int IORING_ASYNC_CANCEL_FD() {
        return IORING_ASYNC_CANCEL_FD;
    }
    private static final int IORING_ASYNC_CANCEL_ANY = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_ASYNC_CANCEL_ANY 4
     * }
     */
    public static int IORING_ASYNC_CANCEL_ANY() {
        return IORING_ASYNC_CANCEL_ANY;
    }
    private static final int IORING_ASYNC_CANCEL_FD_FIXED = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_ASYNC_CANCEL_FD_FIXED 8
     * }
     */
    public static int IORING_ASYNC_CANCEL_FD_FIXED() {
        return IORING_ASYNC_CANCEL_FD_FIXED;
    }
    private static final int IORING_RECVSEND_POLL_FIRST = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_RECVSEND_POLL_FIRST 1
     * }
     */
    public static int IORING_RECVSEND_POLL_FIRST() {
        return IORING_RECVSEND_POLL_FIRST;
    }
    private static final int IORING_RECV_MULTISHOT = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_RECV_MULTISHOT 2
     * }
     */
    public static int IORING_RECV_MULTISHOT() {
        return IORING_RECV_MULTISHOT;
    }
    private static final int IORING_RECVSEND_FIXED_BUF = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_RECVSEND_FIXED_BUF 4
     * }
     */
    public static int IORING_RECVSEND_FIXED_BUF() {
        return IORING_RECVSEND_FIXED_BUF;
    }
    private static final int IORING_ACCEPT_MULTISHOT = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_ACCEPT_MULTISHOT 1
     * }
     */
    public static int IORING_ACCEPT_MULTISHOT() {
        return IORING_ACCEPT_MULTISHOT;
    }
    private static final int IORING_MSG_RING_CQE_SKIP = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_MSG_RING_CQE_SKIP 1
     * }
     */
    public static int IORING_MSG_RING_CQE_SKIP() {
        return IORING_MSG_RING_CQE_SKIP;
    }
    private static final int IORING_CQE_F_BUFFER = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_CQE_F_BUFFER 1
     * }
     */
    public static int IORING_CQE_F_BUFFER() {
        return IORING_CQE_F_BUFFER;
    }
    private static final int IORING_CQE_F_MORE = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_CQE_F_MORE 2
     * }
     */
    public static int IORING_CQE_F_MORE() {
        return IORING_CQE_F_MORE;
    }
    private static final int IORING_CQE_F_SOCK_NONEMPTY = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_CQE_F_SOCK_NONEMPTY 4
     * }
     */
    public static int IORING_CQE_F_SOCK_NONEMPTY() {
        return IORING_CQE_F_SOCK_NONEMPTY;
    }
    private static final int IORING_CQE_F_NOTIF = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_CQE_F_NOTIF 8
     * }
     */
    public static int IORING_CQE_F_NOTIF() {
        return IORING_CQE_F_NOTIF;
    }
    private static final long IORING_OFF_SQ_RING = 0L;

    /**
     * {@snippet lang=c :
     * #define IORING_OFF_SQ_RING 0
     * }
     */
    public static long IORING_OFF_SQ_RING() {
        return IORING_OFF_SQ_RING;
    }
    private static final long IORING_OFF_CQ_RING = 134217728L;

    /**
     * {@snippet lang=c :
     * #define IORING_OFF_CQ_RING 134217728
     * }
     */
    public static long IORING_OFF_CQ_RING() {
        return IORING_OFF_CQ_RING;
    }
    private static final long IORING_OFF_SQES = 268435456L;

    /**
     * {@snippet lang=c :
     * #define IORING_OFF_SQES 268435456
     * }
     */
    public static long IORING_OFF_SQES() {
        return IORING_OFF_SQES;
    }
    private static final int IORING_SQ_NEED_WAKEUP = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_SQ_NEED_WAKEUP 1
     * }
     */
    public static int IORING_SQ_NEED_WAKEUP() {
        return IORING_SQ_NEED_WAKEUP;
    }
    private static final int IORING_SQ_CQ_OVERFLOW = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_SQ_CQ_OVERFLOW 2
     * }
     */
    public static int IORING_SQ_CQ_OVERFLOW() {
        return IORING_SQ_CQ_OVERFLOW;
    }
    private static final int IORING_SQ_TASKRUN = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_SQ_TASKRUN 4
     * }
     */
    public static int IORING_SQ_TASKRUN() {
        return IORING_SQ_TASKRUN;
    }
    private static final int IORING_CQ_EVENTFD_DISABLED = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_CQ_EVENTFD_DISABLED 1
     * }
     */
    public static int IORING_CQ_EVENTFD_DISABLED() {
        return IORING_CQ_EVENTFD_DISABLED;
    }
    private static final int IORING_ENTER_GETEVENTS = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_ENTER_GETEVENTS 1
     * }
     */
    public static int IORING_ENTER_GETEVENTS() {
        return IORING_ENTER_GETEVENTS;
    }
    private static final int IORING_ENTER_SQ_WAKEUP = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_ENTER_SQ_WAKEUP 2
     * }
     */
    public static int IORING_ENTER_SQ_WAKEUP() {
        return IORING_ENTER_SQ_WAKEUP;
    }
    private static final int IORING_ENTER_SQ_WAIT = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_ENTER_SQ_WAIT 4
     * }
     */
    public static int IORING_ENTER_SQ_WAIT() {
        return IORING_ENTER_SQ_WAIT;
    }
    private static final int IORING_ENTER_EXT_ARG = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_ENTER_EXT_ARG 8
     * }
     */
    public static int IORING_ENTER_EXT_ARG() {
        return IORING_ENTER_EXT_ARG;
    }
    private static final int IORING_ENTER_REGISTERED_RING = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IORING_ENTER_REGISTERED_RING 16
     * }
     */
    public static int IORING_ENTER_REGISTERED_RING() {
        return IORING_ENTER_REGISTERED_RING;
    }
    private static final int IORING_FEAT_SINGLE_MMAP = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_SINGLE_MMAP 1
     * }
     */
    public static int IORING_FEAT_SINGLE_MMAP() {
        return IORING_FEAT_SINGLE_MMAP;
    }
    private static final int IORING_FEAT_NODROP = (int)2L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_NODROP 2
     * }
     */
    public static int IORING_FEAT_NODROP() {
        return IORING_FEAT_NODROP;
    }
    private static final int IORING_FEAT_SUBMIT_STABLE = (int)4L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_SUBMIT_STABLE 4
     * }
     */
    public static int IORING_FEAT_SUBMIT_STABLE() {
        return IORING_FEAT_SUBMIT_STABLE;
    }
    private static final int IORING_FEAT_RW_CUR_POS = (int)8L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_RW_CUR_POS 8
     * }
     */
    public static int IORING_FEAT_RW_CUR_POS() {
        return IORING_FEAT_RW_CUR_POS;
    }
    private static final int IORING_FEAT_CUR_PERSONALITY = (int)16L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_CUR_PERSONALITY 16
     * }
     */
    public static int IORING_FEAT_CUR_PERSONALITY() {
        return IORING_FEAT_CUR_PERSONALITY;
    }
    private static final int IORING_FEAT_FAST_POLL = (int)32L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_FAST_POLL 32
     * }
     */
    public static int IORING_FEAT_FAST_POLL() {
        return IORING_FEAT_FAST_POLL;
    }
    private static final int IORING_FEAT_POLL_32BITS = (int)64L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_POLL_32BITS 64
     * }
     */
    public static int IORING_FEAT_POLL_32BITS() {
        return IORING_FEAT_POLL_32BITS;
    }
    private static final int IORING_FEAT_SQPOLL_NONFIXED = (int)128L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_SQPOLL_NONFIXED 128
     * }
     */
    public static int IORING_FEAT_SQPOLL_NONFIXED() {
        return IORING_FEAT_SQPOLL_NONFIXED;
    }
    private static final int IORING_FEAT_EXT_ARG = (int)256L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_EXT_ARG 256
     * }
     */
    public static int IORING_FEAT_EXT_ARG() {
        return IORING_FEAT_EXT_ARG;
    }
    private static final int IORING_FEAT_NATIVE_WORKERS = (int)512L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_NATIVE_WORKERS 512
     * }
     */
    public static int IORING_FEAT_NATIVE_WORKERS() {
        return IORING_FEAT_NATIVE_WORKERS;
    }
    private static final int IORING_FEAT_RSRC_TAGS = (int)1024L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_RSRC_TAGS 1024
     * }
     */
    public static int IORING_FEAT_RSRC_TAGS() {
        return IORING_FEAT_RSRC_TAGS;
    }
    private static final int IORING_FEAT_CQE_SKIP = (int)2048L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_CQE_SKIP 2048
     * }
     */
    public static int IORING_FEAT_CQE_SKIP() {
        return IORING_FEAT_CQE_SKIP;
    }
    private static final int IORING_FEAT_LINKED_FILE = (int)4096L;

    /**
     * {@snippet lang=c :
     * #define IORING_FEAT_LINKED_FILE 4096
     * }
     */
    public static int IORING_FEAT_LINKED_FILE() {
        return IORING_FEAT_LINKED_FILE;
    }
    private static final int IORING_RSRC_REGISTER_SPARSE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IORING_RSRC_REGISTER_SPARSE 1
     * }
     */
    public static int IORING_RSRC_REGISTER_SPARSE() {
        return IORING_RSRC_REGISTER_SPARSE;
    }
    private static final int IORING_REGISTER_FILES_SKIP = (int)-2L;

    /**
     * {@snippet lang=c :
     * #define IORING_REGISTER_FILES_SKIP -2
     * }
     */
    public static int IORING_REGISTER_FILES_SKIP() {
        return IORING_REGISTER_FILES_SKIP;
    }
    private static final int IO_URING_OP_SUPPORTED = (int)1L;

    /**
     * {@snippet lang=c :
     * #define IO_URING_OP_SUPPORTED 1
     * }
     */
    public static int IO_URING_OP_SUPPORTED() {
        return IO_URING_OP_SUPPORTED;
    }
    private static final int PF_UNIX = (int)1L;

    /**
     * {@snippet lang=c :
     * #define PF_UNIX 1
     * }
     */
    public static int PF_UNIX() {
        return PF_UNIX;
    }
    private static final int PF_FILE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define PF_FILE 1
     * }
     */
    public static int PF_FILE() {
        return PF_FILE;
    }
    private static final int PF_ROUTE = (int)16L;

    /**
     * {@snippet lang=c :
     * #define PF_ROUTE 16
     * }
     */
    public static int PF_ROUTE() {
        return PF_ROUTE;
    }
    private static final int AF_UNSPEC = (int)0L;

    /**
     * {@snippet lang=c :
     * #define AF_UNSPEC 0
     * }
     */
    public static int AF_UNSPEC() {
        return AF_UNSPEC;
    }
    private static final int AF_LOCAL = (int)1L;

    /**
     * {@snippet lang=c :
     * #define AF_LOCAL 1
     * }
     */
    public static int AF_LOCAL() {
        return AF_LOCAL;
    }
    private static final int AF_UNIX = (int)1L;

    /**
     * {@snippet lang=c :
     * #define AF_UNIX 1
     * }
     */
    public static int AF_UNIX() {
        return AF_UNIX;
    }
    private static final int AF_FILE = (int)1L;

    /**
     * {@snippet lang=c :
     * #define AF_FILE 1
     * }
     */
    public static int AF_FILE() {
        return AF_FILE;
    }
    private static final int AF_INET = (int)2L;

    /**
     * {@snippet lang=c :
     * #define AF_INET 2
     * }
     */
    public static int AF_INET() {
        return AF_INET;
    }
    private static final int AF_AX25 = (int)3L;

    /**
     * {@snippet lang=c :
     * #define AF_AX25 3
     * }
     */
    public static int AF_AX25() {
        return AF_AX25;
    }
    private static final int AF_IPX = (int)4L;

    /**
     * {@snippet lang=c :
     * #define AF_IPX 4
     * }
     */
    public static int AF_IPX() {
        return AF_IPX;
    }
    private static final int AF_APPLETALK = (int)5L;

    /**
     * {@snippet lang=c :
     * #define AF_APPLETALK 5
     * }
     */
    public static int AF_APPLETALK() {
        return AF_APPLETALK;
    }
    private static final int AF_NETROM = (int)6L;

    /**
     * {@snippet lang=c :
     * #define AF_NETROM 6
     * }
     */
    public static int AF_NETROM() {
        return AF_NETROM;
    }
    private static final int AF_BRIDGE = (int)7L;

    /**
     * {@snippet lang=c :
     * #define AF_BRIDGE 7
     * }
     */
    public static int AF_BRIDGE() {
        return AF_BRIDGE;
    }
    private static final int AF_ATMPVC = (int)8L;

    /**
     * {@snippet lang=c :
     * #define AF_ATMPVC 8
     * }
     */
    public static int AF_ATMPVC() {
        return AF_ATMPVC;
    }
    private static final int AF_X25 = (int)9L;

    /**
     * {@snippet lang=c :
     * #define AF_X25 9
     * }
     */
    public static int AF_X25() {
        return AF_X25;
    }
    private static final int AF_INET6 = (int)10L;

    /**
     * {@snippet lang=c :
     * #define AF_INET6 10
     * }
     */
    public static int AF_INET6() {
        return AF_INET6;
    }
    private static final int AF_ROSE = (int)11L;

    /**
     * {@snippet lang=c :
     * #define AF_ROSE 11
     * }
     */
    public static int AF_ROSE() {
        return AF_ROSE;
    }
    private static final int AF_DECnet = (int)12L;

    /**
     * {@snippet lang=c :
     * #define AF_DECnet 12
     * }
     */
    public static int AF_DECnet() {
        return AF_DECnet;
    }
    private static final int AF_NETBEUI = (int)13L;

    /**
     * {@snippet lang=c :
     * #define AF_NETBEUI 13
     * }
     */
    public static int AF_NETBEUI() {
        return AF_NETBEUI;
    }
    private static final int AF_SECURITY = (int)14L;

    /**
     * {@snippet lang=c :
     * #define AF_SECURITY 14
     * }
     */
    public static int AF_SECURITY() {
        return AF_SECURITY;
    }
    private static final int AF_KEY = (int)15L;

    /**
     * {@snippet lang=c :
     * #define AF_KEY 15
     * }
     */
    public static int AF_KEY() {
        return AF_KEY;
    }
    private static final int AF_NETLINK = (int)16L;

    /**
     * {@snippet lang=c :
     * #define AF_NETLINK 16
     * }
     */
    public static int AF_NETLINK() {
        return AF_NETLINK;
    }
    private static final int AF_ROUTE = (int)16L;

    /**
     * {@snippet lang=c :
     * #define AF_ROUTE 16
     * }
     */
    public static int AF_ROUTE() {
        return AF_ROUTE;
    }
    private static final int AF_PACKET = (int)17L;

    /**
     * {@snippet lang=c :
     * #define AF_PACKET 17
     * }
     */
    public static int AF_PACKET() {
        return AF_PACKET;
    }
    private static final int AF_ASH = (int)18L;

    /**
     * {@snippet lang=c :
     * #define AF_ASH 18
     * }
     */
    public static int AF_ASH() {
        return AF_ASH;
    }
    private static final int AF_ECONET = (int)19L;

    /**
     * {@snippet lang=c :
     * #define AF_ECONET 19
     * }
     */
    public static int AF_ECONET() {
        return AF_ECONET;
    }
    private static final int AF_ATMSVC = (int)20L;

    /**
     * {@snippet lang=c :
     * #define AF_ATMSVC 20
     * }
     */
    public static int AF_ATMSVC() {
        return AF_ATMSVC;
    }
    private static final int AF_RDS = (int)21L;

    /**
     * {@snippet lang=c :
     * #define AF_RDS 21
     * }
     */
    public static int AF_RDS() {
        return AF_RDS;
    }
    private static final int AF_SNA = (int)22L;

    /**
     * {@snippet lang=c :
     * #define AF_SNA 22
     * }
     */
    public static int AF_SNA() {
        return AF_SNA;
    }
    private static final int AF_IRDA = (int)23L;

    /**
     * {@snippet lang=c :
     * #define AF_IRDA 23
     * }
     */
    public static int AF_IRDA() {
        return AF_IRDA;
    }
    private static final int AF_PPPOX = (int)24L;

    /**
     * {@snippet lang=c :
     * #define AF_PPPOX 24
     * }
     */
    public static int AF_PPPOX() {
        return AF_PPPOX;
    }
    private static final int AF_WANPIPE = (int)25L;

    /**
     * {@snippet lang=c :
     * #define AF_WANPIPE 25
     * }
     */
    public static int AF_WANPIPE() {
        return AF_WANPIPE;
    }
    private static final int AF_LLC = (int)26L;

    /**
     * {@snippet lang=c :
     * #define AF_LLC 26
     * }
     */
    public static int AF_LLC() {
        return AF_LLC;
    }
    private static final int AF_IB = (int)27L;

    /**
     * {@snippet lang=c :
     * #define AF_IB 27
     * }
     */
    public static int AF_IB() {
        return AF_IB;
    }
    private static final int AF_MPLS = (int)28L;

    /**
     * {@snippet lang=c :
     * #define AF_MPLS 28
     * }
     */
    public static int AF_MPLS() {
        return AF_MPLS;
    }
    private static final int AF_CAN = (int)29L;

    /**
     * {@snippet lang=c :
     * #define AF_CAN 29
     * }
     */
    public static int AF_CAN() {
        return AF_CAN;
    }
    private static final int AF_TIPC = (int)30L;

    /**
     * {@snippet lang=c :
     * #define AF_TIPC 30
     * }
     */
    public static int AF_TIPC() {
        return AF_TIPC;
    }
    private static final int AF_BLUETOOTH = (int)31L;

    /**
     * {@snippet lang=c :
     * #define AF_BLUETOOTH 31
     * }
     */
    public static int AF_BLUETOOTH() {
        return AF_BLUETOOTH;
    }
    private static final int AF_IUCV = (int)32L;

    /**
     * {@snippet lang=c :
     * #define AF_IUCV 32
     * }
     */
    public static int AF_IUCV() {
        return AF_IUCV;
    }
    private static final int AF_RXRPC = (int)33L;

    /**
     * {@snippet lang=c :
     * #define AF_RXRPC 33
     * }
     */
    public static int AF_RXRPC() {
        return AF_RXRPC;
    }
    private static final int AF_ISDN = (int)34L;

    /**
     * {@snippet lang=c :
     * #define AF_ISDN 34
     * }
     */
    public static int AF_ISDN() {
        return AF_ISDN;
    }
    private static final int AF_PHONET = (int)35L;

    /**
     * {@snippet lang=c :
     * #define AF_PHONET 35
     * }
     */
    public static int AF_PHONET() {
        return AF_PHONET;
    }
    private static final int AF_IEEE802154 = (int)36L;

    /**
     * {@snippet lang=c :
     * #define AF_IEEE802154 36
     * }
     */
    public static int AF_IEEE802154() {
        return AF_IEEE802154;
    }
    private static final int AF_CAIF = (int)37L;

    /**
     * {@snippet lang=c :
     * #define AF_CAIF 37
     * }
     */
    public static int AF_CAIF() {
        return AF_CAIF;
    }
    private static final int AF_ALG = (int)38L;

    /**
     * {@snippet lang=c :
     * #define AF_ALG 38
     * }
     */
    public static int AF_ALG() {
        return AF_ALG;
    }
    private static final int AF_NFC = (int)39L;

    /**
     * {@snippet lang=c :
     * #define AF_NFC 39
     * }
     */
    public static int AF_NFC() {
        return AF_NFC;
    }
    private static final int AF_VSOCK = (int)40L;

    /**
     * {@snippet lang=c :
     * #define AF_VSOCK 40
     * }
     */
    public static int AF_VSOCK() {
        return AF_VSOCK;
    }
    private static final int AF_KCM = (int)41L;

    /**
     * {@snippet lang=c :
     * #define AF_KCM 41
     * }
     */
    public static int AF_KCM() {
        return AF_KCM;
    }
    private static final int AF_QIPCRTR = (int)42L;

    /**
     * {@snippet lang=c :
     * #define AF_QIPCRTR 42
     * }
     */
    public static int AF_QIPCRTR() {
        return AF_QIPCRTR;
    }
    private static final int AF_SMC = (int)43L;

    /**
     * {@snippet lang=c :
     * #define AF_SMC 43
     * }
     */
    public static int AF_SMC() {
        return AF_SMC;
    }
    private static final int AF_XDP = (int)44L;

    /**
     * {@snippet lang=c :
     * #define AF_XDP 44
     * }
     */
    public static int AF_XDP() {
        return AF_XDP;
    }
    private static final int AF_MCTP = (int)45L;

    /**
     * {@snippet lang=c :
     * #define AF_MCTP 45
     * }
     */
    public static int AF_MCTP() {
        return AF_MCTP;
    }
    private static final int AF_MAX = (int)46L;

    /**
     * {@snippet lang=c :
     * #define AF_MAX 46
     * }
     */
    public static int AF_MAX() {
        return AF_MAX;
    }
    private static final long __SOCKADDR_COMMON_SIZE = 2L;

    /**
     * {@snippet lang=c :
     * #define __SOCKADDR_COMMON_SIZE 2
     * }
     */
    public static long __SOCKADDR_COMMON_SIZE() {
        return __SOCKADDR_COMMON_SIZE;
    }
    private static final long _SS_PADSIZE = 118L;

    /**
     * {@snippet lang=c :
     * #define _SS_PADSIZE 118
     * }
     */
    public static long _SS_PADSIZE() {
        return _SS_PADSIZE;
    }
    private static final int SO_GET_FILTER = (int)26L;

    /**
     * {@snippet lang=c :
     * #define SO_GET_FILTER 26
     * }
     */
    public static int SO_GET_FILTER() {
        return SO_GET_FILTER;
    }
    private static final int SCM_WIFI_STATUS = (int)41L;

    /**
     * {@snippet lang=c :
     * #define SCM_WIFI_STATUS 41
     * }
     */
    public static int SCM_WIFI_STATUS() {
        return SCM_WIFI_STATUS;
    }
    private static final int SO_DETACH_BPF = (int)27L;

    /**
     * {@snippet lang=c :
     * #define SO_DETACH_BPF 27
     * }
     */
    public static int SO_DETACH_BPF() {
        return SO_DETACH_BPF;
    }
    private static final int SCM_TXTIME = (int)61L;

    /**
     * {@snippet lang=c :
     * #define SCM_TXTIME 61
     * }
     */
    public static int SCM_TXTIME() {
        return SCM_TXTIME;
    }
    private static final int SO_TIMESTAMP = (int)29L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP 29
     * }
     */
    public static int SO_TIMESTAMP() {
        return SO_TIMESTAMP;
    }
    private static final int SO_TIMESTAMPNS = (int)35L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPNS 35
     * }
     */
    public static int SO_TIMESTAMPNS() {
        return SO_TIMESTAMPNS;
    }
    private static final int SO_TIMESTAMPING = (int)37L;

    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPING 37
     * }
     */
    public static int SO_TIMESTAMPING() {
        return SO_TIMESTAMPING;
    }
    private static final int SO_RCVTIMEO = (int)20L;

    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO 20
     * }
     */
    public static int SO_RCVTIMEO() {
        return SO_RCVTIMEO;
    }
    private static final int SO_SNDTIMEO = (int)21L;

    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO 21
     * }
     */
    public static int SO_SNDTIMEO() {
        return SO_SNDTIMEO;
    }
    private static final int SCM_TIMESTAMP = (int)29L;

    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMP 29
     * }
     */
    public static int SCM_TIMESTAMP() {
        return SCM_TIMESTAMP;
    }
    private static final int SCM_TIMESTAMPNS = (int)35L;

    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPNS 35
     * }
     */
    public static int SCM_TIMESTAMPNS() {
        return SCM_TIMESTAMPNS;
    }
    private static final int SCM_TIMESTAMPING = (int)37L;

    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPING 37
     * }
     */
    public static int SCM_TIMESTAMPING() {
        return SCM_TIMESTAMPING;
    }
    private static final int IP_RECVRETOPTS = (int)7L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVRETOPTS 7
     * }
     */
    public static int IP_RECVRETOPTS() {
        return IP_RECVRETOPTS;
    }
    private static final int IP_RECVORIGDSTADDR = (int)20L;

    /**
     * {@snippet lang=c :
     * #define IP_RECVORIGDSTADDR 20
     * }
     */
    public static int IP_RECVORIGDSTADDR() {
        return IP_RECVORIGDSTADDR;
    }
    private static final int IPV6_RECVORIGDSTADDR = (int)74L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RECVORIGDSTADDR 74
     * }
     */
    public static int IPV6_RECVORIGDSTADDR() {
        return IPV6_RECVORIGDSTADDR;
    }
    private static final int IPV6_ADD_MEMBERSHIP = (int)20L;

    /**
     * {@snippet lang=c :
     * #define IPV6_ADD_MEMBERSHIP 20
     * }
     */
    public static int IPV6_ADD_MEMBERSHIP() {
        return IPV6_ADD_MEMBERSHIP;
    }
    private static final int IPV6_DROP_MEMBERSHIP = (int)21L;

    /**
     * {@snippet lang=c :
     * #define IPV6_DROP_MEMBERSHIP 21
     * }
     */
    public static int IPV6_DROP_MEMBERSHIP() {
        return IPV6_DROP_MEMBERSHIP;
    }
    private static final int IPV6_RXHOPOPTS = (int)54L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RXHOPOPTS 54
     * }
     */
    public static int IPV6_RXHOPOPTS() {
        return IPV6_RXHOPOPTS;
    }
    private static final int IPV6_RXDSTOPTS = (int)59L;

    /**
     * {@snippet lang=c :
     * #define IPV6_RXDSTOPTS 59
     * }
     */
    public static int IPV6_RXDSTOPTS() {
        return IPV6_RXDSTOPTS;
    }
    private static final int IN_CLASSA_NET = (int)4278190080L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_NET 4278190080
     * }
     */
    public static int IN_CLASSA_NET() {
        return IN_CLASSA_NET;
    }
    private static final int IN_CLASSA_HOST = (int)16777215L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_HOST 16777215
     * }
     */
    public static int IN_CLASSA_HOST() {
        return IN_CLASSA_HOST;
    }
    private static final int IN_CLASSB_NET = (int)4294901760L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_NET 4294901760
     * }
     */
    public static int IN_CLASSB_NET() {
        return IN_CLASSB_NET;
    }
    private static final int IN_CLASSB_HOST = (int)65535L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_HOST 65535
     * }
     */
    public static int IN_CLASSB_HOST() {
        return IN_CLASSB_HOST;
    }
    private static final int IN_CLASSC_NET = (int)4294967040L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_NET 4294967040
     * }
     */
    public static int IN_CLASSC_NET() {
        return IN_CLASSC_NET;
    }
    private static final int IN_CLASSC_HOST = (int)255L;

    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_HOST 255
     * }
     */
    public static int IN_CLASSC_HOST() {
        return IN_CLASSC_HOST;
    }
    private static final int INADDR_ANY = (int)0L;

    /**
     * {@snippet lang=c :
     * #define INADDR_ANY 0
     * }
     */
    public static int INADDR_ANY() {
        return INADDR_ANY;
    }
    private static final int INADDR_BROADCAST = (int)4294967295L;

    /**
     * {@snippet lang=c :
     * #define INADDR_BROADCAST 4294967295
     * }
     */
    public static int INADDR_BROADCAST() {
        return INADDR_BROADCAST;
    }
    private static final int INADDR_NONE = (int)4294967295L;

    /**
     * {@snippet lang=c :
     * #define INADDR_NONE 4294967295
     * }
     */
    public static int INADDR_NONE() {
        return INADDR_NONE;
    }
    private static final int INADDR_DUMMY = (int)3221225480L;

    /**
     * {@snippet lang=c :
     * #define INADDR_DUMMY 3221225480
     * }
     */
    public static int INADDR_DUMMY() {
        return INADDR_DUMMY;
    }
    private static final int INADDR_LOOPBACK = (int)2130706433L;

    /**
     * {@snippet lang=c :
     * #define INADDR_LOOPBACK 2130706433
     * }
     */
    public static int INADDR_LOOPBACK() {
        return INADDR_LOOPBACK;
    }
    private static final int INADDR_UNSPEC_GROUP = (int)3758096384L;

    /**
     * {@snippet lang=c :
     * #define INADDR_UNSPEC_GROUP 3758096384
     * }
     */
    public static int INADDR_UNSPEC_GROUP() {
        return INADDR_UNSPEC_GROUP;
    }
    private static final int INADDR_ALLHOSTS_GROUP = (int)3758096385L;

    /**
     * {@snippet lang=c :
     * #define INADDR_ALLHOSTS_GROUP 3758096385
     * }
     */
    public static int INADDR_ALLHOSTS_GROUP() {
        return INADDR_ALLHOSTS_GROUP;
    }
    private static final int INADDR_ALLRTRS_GROUP = (int)3758096386L;

    /**
     * {@snippet lang=c :
     * #define INADDR_ALLRTRS_GROUP 3758096386
     * }
     */
    public static int INADDR_ALLRTRS_GROUP() {
        return INADDR_ALLRTRS_GROUP;
    }
    private static final int INADDR_ALLSNOOPERS_GROUP = (int)3758096490L;

    /**
     * {@snippet lang=c :
     * #define INADDR_ALLSNOOPERS_GROUP 3758096490
     * }
     */
    public static int INADDR_ALLSNOOPERS_GROUP() {
        return INADDR_ALLSNOOPERS_GROUP;
    }
    private static final int INADDR_MAX_LOCAL_GROUP = (int)3758096639L;

    /**
     * {@snippet lang=c :
     * #define INADDR_MAX_LOCAL_GROUP 3758096639
     * }
     */
    public static int INADDR_MAX_LOCAL_GROUP() {
        return INADDR_MAX_LOCAL_GROUP;
    }
}

