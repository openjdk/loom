// Generated by jextract

package jdk.internal.ffi.generated.iouring;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct io_uring_sqe {
 *     __u8 opcode;
 *     __u8 flags;
 *     __u16 ioprio;
 *     __s32 fd;
 *     union {
 *         __u64 off;
 *         __u64 addr2;
 *         struct {
 *             __u32 cmd_op;
 *             __u32 __pad1;
 *         };
 *     };
 *     union {
 *         __u64 addr;
 *         __u64 splice_off_in;
 *     };
 *     __u32 len;
 *     union {
 *         __kernel_rwf_t rw_flags;
 *         __u32 fsync_flags;
 *         __u16 poll_events;
 *         __u32 poll32_events;
 *         __u32 sync_range_flags;
 *         __u32 msg_flags;
 *         __u32 timeout_flags;
 *         __u32 accept_flags;
 *         __u32 cancel_flags;
 *         __u32 open_flags;
 *         __u32 statx_flags;
 *         __u32 fadvise_advice;
 *         __u32 splice_flags;
 *         __u32 rename_flags;
 *         __u32 unlink_flags;
 *         __u32 hardlink_flags;
 *         __u32 xattr_flags;
 *         __u32 msg_ring_flags;
 *         __u32 uring_cmd_flags;
 *     };
 *     __u64 user_data;
 *     union {
 *         __u16 buf_index;
 *         __u16 buf_group;
 *     };
 *     __u16 personality;
 *     union {
 *         __s32 splice_fd_in;
 *         __u32 file_index;
 *         struct {
 *             __u16 addr_len;
 *             __u16 __pad3[1];
 *         };
 *     };
 *     union {
 *         struct {
 *             __u64 addr3;
 *             __u64 __pad2[1];
 *         };
 *         __u8 cmd[0];
 *     };
 * }
 * }
 */
@SuppressWarnings("restricted") public class io_uring_sqe {

    io_uring_sqe() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        iouring_h.C_CHAR.withName("opcode"),
        iouring_h.C_CHAR.withName("flags"),
        iouring_h.C_SHORT.withName("ioprio"),
        iouring_h.C_INT.withName("fd"),
        MemoryLayout.unionLayout(
            iouring_h.C_LONG_LONG.withName("off"),
            iouring_h.C_LONG_LONG.withName("addr2"),
            MemoryLayout.structLayout(
                iouring_h.C_INT.withName("cmd_op"),
                iouring_h.C_INT.withName("__pad1")
            ).withName("$anon$39:3")
        ).withName("$anon$36:2"),
        MemoryLayout.unionLayout(
            iouring_h.C_LONG_LONG.withName("addr"),
            iouring_h.C_LONG_LONG.withName("splice_off_in")
        ).withName("$anon$44:2"),
        iouring_h.C_INT.withName("len"),
        MemoryLayout.unionLayout(
            iouring_h.C_INT.withName("rw_flags"),
            iouring_h.C_INT.withName("fsync_flags"),
            iouring_h.C_SHORT.withName("poll_events"),
            iouring_h.C_INT.withName("poll32_events"),
            iouring_h.C_INT.withName("sync_range_flags"),
            iouring_h.C_INT.withName("msg_flags"),
            iouring_h.C_INT.withName("timeout_flags"),
            iouring_h.C_INT.withName("accept_flags"),
            iouring_h.C_INT.withName("cancel_flags"),
            iouring_h.C_INT.withName("open_flags"),
            iouring_h.C_INT.withName("statx_flags"),
            iouring_h.C_INT.withName("fadvise_advice"),
            iouring_h.C_INT.withName("splice_flags"),
            iouring_h.C_INT.withName("rename_flags"),
            iouring_h.C_INT.withName("unlink_flags"),
            iouring_h.C_INT.withName("hardlink_flags"),
            iouring_h.C_INT.withName("xattr_flags"),
            iouring_h.C_INT.withName("msg_ring_flags"),
            iouring_h.C_INT.withName("uring_cmd_flags")
        ).withName("$anon$49:2"),
        iouring_h.C_LONG_LONG.withName("user_data"),
        MemoryLayout.unionLayout(
            iouring_h.C_SHORT.withByteAlignment(1).withName("buf_index"),
            iouring_h.C_SHORT.withByteAlignment(1).withName("buf_group")
        ).withName("$anon$72:2"),
        iouring_h.C_SHORT.withName("personality"),
        MemoryLayout.unionLayout(
            iouring_h.C_INT.withName("splice_fd_in"),
            iouring_h.C_INT.withName("file_index"),
            MemoryLayout.structLayout(
                iouring_h.C_SHORT.withName("addr_len"),
                MemoryLayout.sequenceLayout(1, iouring_h.C_SHORT).withName("__pad3")
            ).withName("$anon$83:3")
        ).withName("$anon$80:2"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                iouring_h.C_LONG_LONG.withName("addr3"),
                MemoryLayout.sequenceLayout(1, iouring_h.C_LONG_LONG).withName("__pad2")
            ).withName("$anon$89:3"),
            MemoryLayout.sequenceLayout(0, iouring_h.C_CHAR).withName("cmd")
        ).withName("$anon$88:2")
    ).withName("io_uring_sqe");

    public static final GroupLayout $LAYOUT() {
        return $LAYOUT;
    }

    private static final long opcode$OFFSET = 0;
    private static final OfByte opcode$LAYOUT = (OfByte)$LAYOUT.select(groupElement("opcode"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 opcode
     * }
     */
    public static byte opcode(MemorySegment struct) {
        return struct.get(opcode$LAYOUT, opcode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 opcode
     * }
     */
    public static void opcode(MemorySegment struct, byte fieldValue) {
        struct.set(opcode$LAYOUT, opcode$OFFSET, fieldValue);
    }

    private static final long flags$OFFSET = 1;
    private static final OfByte flags$LAYOUT = (OfByte)$LAYOUT.select(groupElement("flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 flags
     * }
     */
    public static byte flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 flags
     * }
     */
    public static void flags(MemorySegment struct, byte fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final long ioprio$OFFSET = 2;
    private static final OfShort ioprio$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ioprio"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 ioprio
     * }
     */
    public static short ioprio(MemorySegment struct) {
        return struct.get(ioprio$LAYOUT, ioprio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 ioprio
     * }
     */
    public static void ioprio(MemorySegment struct, short fieldValue) {
        struct.set(ioprio$LAYOUT, ioprio$OFFSET, fieldValue);
    }

    private static final long fd$OFFSET = 4;
    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s32 fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s32 fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    private static final long off$OFFSET = 8;
    private static final OfLong off$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$36:2"), groupElement("off"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 off
     * }
     */
    public static long off(MemorySegment struct) {
        return struct.get(off$LAYOUT, off$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 off
     * }
     */
    public static void off(MemorySegment struct, long fieldValue) {
        struct.set(off$LAYOUT, off$OFFSET, fieldValue);
    }

    private static final long addr2$OFFSET = 8;
    private static final OfLong addr2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$36:2"), groupElement("addr2"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 addr2
     * }
     */
    public static long addr2(MemorySegment struct) {
        return struct.get(addr2$LAYOUT, addr2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 addr2
     * }
     */
    public static void addr2(MemorySegment struct, long fieldValue) {
        struct.set(addr2$LAYOUT, addr2$OFFSET, fieldValue);
    }

    private static final long cmd_op$OFFSET = 8;
    private static final OfInt cmd_op$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$36:2"), groupElement("$anon$39:3"), groupElement("cmd_op"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 cmd_op
     * }
     */
    public static int cmd_op(MemorySegment struct) {
        return struct.get(cmd_op$LAYOUT, cmd_op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 cmd_op
     * }
     */
    public static void cmd_op(MemorySegment struct, int fieldValue) {
        struct.set(cmd_op$LAYOUT, cmd_op$OFFSET, fieldValue);
    }

    private static final long __pad1$OFFSET = 12;
    private static final OfInt __pad1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$36:2"), groupElement("$anon$39:3"), groupElement("__pad1"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 __pad1
     * }
     */
    public static int __pad1(MemorySegment struct) {
        return struct.get(__pad1$LAYOUT, __pad1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 __pad1
     * }
     */
    public static void __pad1(MemorySegment struct, int fieldValue) {
        struct.set(__pad1$LAYOUT, __pad1$OFFSET, fieldValue);
    }

    private static final long addr$OFFSET = 16;
    private static final OfLong addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$44:2"), groupElement("addr"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 addr
     * }
     */
    public static long addr(MemorySegment struct) {
        return struct.get(addr$LAYOUT, addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 addr
     * }
     */
    public static void addr(MemorySegment struct, long fieldValue) {
        struct.set(addr$LAYOUT, addr$OFFSET, fieldValue);
    }

    private static final long splice_off_in$OFFSET = 16;
    private static final OfLong splice_off_in$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$44:2"), groupElement("splice_off_in"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 splice_off_in
     * }
     */
    public static long splice_off_in(MemorySegment struct) {
        return struct.get(splice_off_in$LAYOUT, splice_off_in$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 splice_off_in
     * }
     */
    public static void splice_off_in(MemorySegment struct, long fieldValue) {
        struct.set(splice_off_in$LAYOUT, splice_off_in$OFFSET, fieldValue);
    }

    private static final long len$OFFSET = 24;
    private static final OfInt len$LAYOUT = (OfInt)$LAYOUT.select(groupElement("len"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 len
     * }
     */
    public static int len(MemorySegment struct) {
        return struct.get(len$LAYOUT, len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 len
     * }
     */
    public static void len(MemorySegment struct, int fieldValue) {
        struct.set(len$LAYOUT, len$OFFSET, fieldValue);
    }

    private static final long rw_flags$OFFSET = 28;
    private static final OfInt rw_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("rw_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __kernel_rwf_t rw_flags
     * }
     */
    public static int rw_flags(MemorySegment struct) {
        return struct.get(rw_flags$LAYOUT, rw_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __kernel_rwf_t rw_flags
     * }
     */
    public static void rw_flags(MemorySegment struct, int fieldValue) {
        struct.set(rw_flags$LAYOUT, rw_flags$OFFSET, fieldValue);
    }

    private static final long fsync_flags$OFFSET = 28;
    private static final OfInt fsync_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("fsync_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fsync_flags
     * }
     */
    public static int fsync_flags(MemorySegment struct) {
        return struct.get(fsync_flags$LAYOUT, fsync_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fsync_flags
     * }
     */
    public static void fsync_flags(MemorySegment struct, int fieldValue) {
        struct.set(fsync_flags$LAYOUT, fsync_flags$OFFSET, fieldValue);
    }

    private static final long poll_events$OFFSET = 28;
    private static final OfShort poll_events$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("poll_events"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 poll_events
     * }
     */
    public static short poll_events(MemorySegment struct) {
        return struct.get(poll_events$LAYOUT, poll_events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 poll_events
     * }
     */
    public static void poll_events(MemorySegment struct, short fieldValue) {
        struct.set(poll_events$LAYOUT, poll_events$OFFSET, fieldValue);
    }

    private static final long poll32_events$OFFSET = 28;
    private static final OfInt poll32_events$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("poll32_events"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 poll32_events
     * }
     */
    public static int poll32_events(MemorySegment struct) {
        return struct.get(poll32_events$LAYOUT, poll32_events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 poll32_events
     * }
     */
    public static void poll32_events(MemorySegment struct, int fieldValue) {
        struct.set(poll32_events$LAYOUT, poll32_events$OFFSET, fieldValue);
    }

    private static final long sync_range_flags$OFFSET = 28;
    private static final OfInt sync_range_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("sync_range_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sync_range_flags
     * }
     */
    public static int sync_range_flags(MemorySegment struct) {
        return struct.get(sync_range_flags$LAYOUT, sync_range_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sync_range_flags
     * }
     */
    public static void sync_range_flags(MemorySegment struct, int fieldValue) {
        struct.set(sync_range_flags$LAYOUT, sync_range_flags$OFFSET, fieldValue);
    }

    private static final long msg_flags$OFFSET = 28;
    private static final OfInt msg_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("msg_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 msg_flags
     * }
     */
    public static int msg_flags(MemorySegment struct) {
        return struct.get(msg_flags$LAYOUT, msg_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 msg_flags
     * }
     */
    public static void msg_flags(MemorySegment struct, int fieldValue) {
        struct.set(msg_flags$LAYOUT, msg_flags$OFFSET, fieldValue);
    }

    private static final long timeout_flags$OFFSET = 28;
    private static final OfInt timeout_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("timeout_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 timeout_flags
     * }
     */
    public static int timeout_flags(MemorySegment struct) {
        return struct.get(timeout_flags$LAYOUT, timeout_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 timeout_flags
     * }
     */
    public static void timeout_flags(MemorySegment struct, int fieldValue) {
        struct.set(timeout_flags$LAYOUT, timeout_flags$OFFSET, fieldValue);
    }

    private static final long accept_flags$OFFSET = 28;
    private static final OfInt accept_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("accept_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 accept_flags
     * }
     */
    public static int accept_flags(MemorySegment struct) {
        return struct.get(accept_flags$LAYOUT, accept_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 accept_flags
     * }
     */
    public static void accept_flags(MemorySegment struct, int fieldValue) {
        struct.set(accept_flags$LAYOUT, accept_flags$OFFSET, fieldValue);
    }

    private static final long cancel_flags$OFFSET = 28;
    private static final OfInt cancel_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("cancel_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 cancel_flags
     * }
     */
    public static int cancel_flags(MemorySegment struct) {
        return struct.get(cancel_flags$LAYOUT, cancel_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 cancel_flags
     * }
     */
    public static void cancel_flags(MemorySegment struct, int fieldValue) {
        struct.set(cancel_flags$LAYOUT, cancel_flags$OFFSET, fieldValue);
    }

    private static final long open_flags$OFFSET = 28;
    private static final OfInt open_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("open_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 open_flags
     * }
     */
    public static int open_flags(MemorySegment struct) {
        return struct.get(open_flags$LAYOUT, open_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 open_flags
     * }
     */
    public static void open_flags(MemorySegment struct, int fieldValue) {
        struct.set(open_flags$LAYOUT, open_flags$OFFSET, fieldValue);
    }

    private static final long statx_flags$OFFSET = 28;
    private static final OfInt statx_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("statx_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 statx_flags
     * }
     */
    public static int statx_flags(MemorySegment struct) {
        return struct.get(statx_flags$LAYOUT, statx_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 statx_flags
     * }
     */
    public static void statx_flags(MemorySegment struct, int fieldValue) {
        struct.set(statx_flags$LAYOUT, statx_flags$OFFSET, fieldValue);
    }

    private static final long fadvise_advice$OFFSET = 28;
    private static final OfInt fadvise_advice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("fadvise_advice"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fadvise_advice
     * }
     */
    public static int fadvise_advice(MemorySegment struct) {
        return struct.get(fadvise_advice$LAYOUT, fadvise_advice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fadvise_advice
     * }
     */
    public static void fadvise_advice(MemorySegment struct, int fieldValue) {
        struct.set(fadvise_advice$LAYOUT, fadvise_advice$OFFSET, fieldValue);
    }

    private static final long splice_flags$OFFSET = 28;
    private static final OfInt splice_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("splice_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 splice_flags
     * }
     */
    public static int splice_flags(MemorySegment struct) {
        return struct.get(splice_flags$LAYOUT, splice_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 splice_flags
     * }
     */
    public static void splice_flags(MemorySegment struct, int fieldValue) {
        struct.set(splice_flags$LAYOUT, splice_flags$OFFSET, fieldValue);
    }

    private static final long rename_flags$OFFSET = 28;
    private static final OfInt rename_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("rename_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 rename_flags
     * }
     */
    public static int rename_flags(MemorySegment struct) {
        return struct.get(rename_flags$LAYOUT, rename_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 rename_flags
     * }
     */
    public static void rename_flags(MemorySegment struct, int fieldValue) {
        struct.set(rename_flags$LAYOUT, rename_flags$OFFSET, fieldValue);
    }

    private static final long unlink_flags$OFFSET = 28;
    private static final OfInt unlink_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("unlink_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 unlink_flags
     * }
     */
    public static int unlink_flags(MemorySegment struct) {
        return struct.get(unlink_flags$LAYOUT, unlink_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 unlink_flags
     * }
     */
    public static void unlink_flags(MemorySegment struct, int fieldValue) {
        struct.set(unlink_flags$LAYOUT, unlink_flags$OFFSET, fieldValue);
    }

    private static final long hardlink_flags$OFFSET = 28;
    private static final OfInt hardlink_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("hardlink_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 hardlink_flags
     * }
     */
    public static int hardlink_flags(MemorySegment struct) {
        return struct.get(hardlink_flags$LAYOUT, hardlink_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 hardlink_flags
     * }
     */
    public static void hardlink_flags(MemorySegment struct, int fieldValue) {
        struct.set(hardlink_flags$LAYOUT, hardlink_flags$OFFSET, fieldValue);
    }

    private static final long xattr_flags$OFFSET = 28;
    private static final OfInt xattr_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("xattr_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 xattr_flags
     * }
     */
    public static int xattr_flags(MemorySegment struct) {
        return struct.get(xattr_flags$LAYOUT, xattr_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 xattr_flags
     * }
     */
    public static void xattr_flags(MemorySegment struct, int fieldValue) {
        struct.set(xattr_flags$LAYOUT, xattr_flags$OFFSET, fieldValue);
    }

    private static final long msg_ring_flags$OFFSET = 28;
    private static final OfInt msg_ring_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("msg_ring_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 msg_ring_flags
     * }
     */
    public static int msg_ring_flags(MemorySegment struct) {
        return struct.get(msg_ring_flags$LAYOUT, msg_ring_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 msg_ring_flags
     * }
     */
    public static void msg_ring_flags(MemorySegment struct, int fieldValue) {
        struct.set(msg_ring_flags$LAYOUT, msg_ring_flags$OFFSET, fieldValue);
    }

    private static final long uring_cmd_flags$OFFSET = 28;
    private static final OfInt uring_cmd_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$49:2"), groupElement("uring_cmd_flags"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 uring_cmd_flags
     * }
     */
    public static int uring_cmd_flags(MemorySegment struct) {
        return struct.get(uring_cmd_flags$LAYOUT, uring_cmd_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 uring_cmd_flags
     * }
     */
    public static void uring_cmd_flags(MemorySegment struct, int fieldValue) {
        struct.set(uring_cmd_flags$LAYOUT, uring_cmd_flags$OFFSET, fieldValue);
    }

    private static final long user_data$OFFSET = 32;
    private static final OfLong user_data$LAYOUT = (OfLong)$LAYOUT.select(groupElement("user_data"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 user_data
     * }
     */
    public static long user_data(MemorySegment struct) {
        return struct.get(user_data$LAYOUT, user_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 user_data
     * }
     */
    public static void user_data(MemorySegment struct, long fieldValue) {
        struct.set(user_data$LAYOUT, user_data$OFFSET, fieldValue);
    }

    private static final long buf_index$OFFSET = 40;
    private static final OfShort buf_index$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$72:2"), groupElement("buf_index"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 buf_index
     * }
     */
    public static short buf_index(MemorySegment struct) {
        return struct.get(buf_index$LAYOUT, buf_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 buf_index
     * }
     */
    public static void buf_index(MemorySegment struct, short fieldValue) {
        struct.set(buf_index$LAYOUT, buf_index$OFFSET, fieldValue);
    }

    private static final long buf_group$OFFSET = 40;
    private static final OfShort buf_group$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$72:2"), groupElement("buf_group"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 buf_group
     * }
     */
    public static short buf_group(MemorySegment struct) {
        return struct.get(buf_group$LAYOUT, buf_group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 buf_group
     * }
     */
    public static void buf_group(MemorySegment struct, short fieldValue) {
        struct.set(buf_group$LAYOUT, buf_group$OFFSET, fieldValue);
    }

    private static final long personality$OFFSET = 42;
    private static final OfShort personality$LAYOUT = (OfShort)$LAYOUT.select(groupElement("personality"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 personality
     * }
     */
    public static short personality(MemorySegment struct) {
        return struct.get(personality$LAYOUT, personality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 personality
     * }
     */
    public static void personality(MemorySegment struct, short fieldValue) {
        struct.set(personality$LAYOUT, personality$OFFSET, fieldValue);
    }

    private static final long splice_fd_in$OFFSET = 44;
    private static final OfInt splice_fd_in$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$80:2"), groupElement("splice_fd_in"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s32 splice_fd_in
     * }
     */
    public static int splice_fd_in(MemorySegment struct) {
        return struct.get(splice_fd_in$LAYOUT, splice_fd_in$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s32 splice_fd_in
     * }
     */
    public static void splice_fd_in(MemorySegment struct, int fieldValue) {
        struct.set(splice_fd_in$LAYOUT, splice_fd_in$OFFSET, fieldValue);
    }

    private static final long file_index$OFFSET = 44;
    private static final OfInt file_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$80:2"), groupElement("file_index"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 file_index
     * }
     */
    public static int file_index(MemorySegment struct) {
        return struct.get(file_index$LAYOUT, file_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 file_index
     * }
     */
    public static void file_index(MemorySegment struct, int fieldValue) {
        struct.set(file_index$LAYOUT, file_index$OFFSET, fieldValue);
    }

    private static final long addr_len$OFFSET = 44;
    private static final OfShort addr_len$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$80:2"), groupElement("$anon$83:3"), groupElement("addr_len"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 addr_len
     * }
     */
    public static short addr_len(MemorySegment struct) {
        return struct.get(addr_len$LAYOUT, addr_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 addr_len
     * }
     */
    public static void addr_len(MemorySegment struct, short fieldValue) {
        struct.set(addr_len$LAYOUT, addr_len$OFFSET, fieldValue);
    }

    private static final long __pad3$OFFSET = 46;
    private static final long __pad3$SIZE = 2;

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 __pad3[1]
     * }
     */
    public static MemorySegment __pad3(MemorySegment struct) {
        return struct.asSlice(__pad3$OFFSET, __pad3$SIZE);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 __pad3[1]
     * }
     */
    public static void __pad3(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __pad3$OFFSET, __pad3$SIZE);
    }

    private static final long addr3$OFFSET = 48;
    private static final OfLong addr3$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$88:2"), groupElement("$anon$89:3"), groupElement("addr3"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 addr3
     * }
     */
    public static long addr3(MemorySegment struct) {
        return struct.get(addr3$LAYOUT, addr3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 addr3
     * }
     */
    public static void addr3(MemorySegment struct, long fieldValue) {
        struct.set(addr3$LAYOUT, addr3$OFFSET, fieldValue);
    }

    private static final long __pad2$OFFSET = 56;
    private static final long __pad2$SIZE = 8;

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 __pad2[1]
     * }
     */
    public static MemorySegment __pad2(MemorySegment struct) {
        return struct.asSlice(__pad2$OFFSET, __pad2$SIZE);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 __pad2[1]
     * }
     */
    public static void __pad2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __pad2$OFFSET, __pad2$SIZE);
    }

    private static final long cmd$OFFSET = 48;
    private static final long cmd$SIZE = 0;

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 cmd[0]
     * }
     */
    public static MemorySegment cmd(MemorySegment struct) {
        return struct.asSlice(cmd$OFFSET, cmd$SIZE);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 cmd[0]
     * }
     */
    public static void cmd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cmd$OFFSET, cmd$SIZE);
    }

    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice($LAYOUT().byteSize() * index);
    }

    public static long sizeof() { return $LAYOUT().byteSize(); }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, $LAYOUT()));
    }

    public static MemorySegment reinterpret(MemorySegment addr, Arena scope, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, scope, cleanup);
    }

    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena scope, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret($LAYOUT().byteSize() * elementCount, scope, cleanup);
    }
}

