#
# Copyright (c) 2012, 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

main.usage.summary=Verwendung: {0} <Optionen> <Pfad ...>]\nmit --help k\u00F6nnen Sie eine Liste der m\u00F6glichen Optionen aufrufen

main.usage=Verwendung: {0} <Optionen> <Pfad ...>]\n<Pfad> kann ein Pfad zu einer Klassendatei, einem Verzeichnis oder einer JAR-Datei sein.\n\nM\u00F6gliche Optionen:

error.prefix=Fehler:
warn.prefix=Warnung:

main.opt.h=\  -h -? --help                  Gibt diese Hilfemeldung aus

main.opt.version=\  -version --version            Versionsinformationen

main.opt.v=\  -v       -verbose             Gibt alle Abh\u00E4ngigkeiten auf Klassenebene aus\n                                \u00C4quivalent zu -verbose:class -filter:none.\n  -verbose:package              Gibt standardm\u00E4\u00DFig Abh\u00E4ngigkeiten auf Packageebene, ausgenommen\n                                Abh\u00E4ngigkeiten innerhalb eines Packages, aus\n  -verbose:class                Gib standardm\u00E4\u00DFig Abh\u00E4ngigkeiten auf Klassenebene, ausgenommen\n                                Abh\u00E4ngigkeiten innerhalb einer Klasse, aus

main.opt.s=\  -s       -summary             Gibt nur die Abh\u00E4ngigkeits\u00FCbersicht aus.

main.opt.f=\  -f <Regex> -filter <Regex>    Filtert Abh\u00E4ngigkeiten nach dem angegebenen\n                                Muster. Bei Angabe mehrerer Muster wird das\n                                letzte Muster verwendet.\n  -filter:package               Filtert Abh\u00E4ngigkeiten innerhalb eines Packages.\n                                Dies ist die Standardoption.\n  -filter:archive               Filtert Abh\u00E4ngigkeiten innerhalb eines Archivs.\n  -filter:module                Filtert Abh\u00E4ngigkeiten innerhalb eines Moduls.\n  -filter:none                  Kein Filtern nach -filter:package oder -filter:archive\n                                Die mit der Option -filter angegebene Filterung\n                                wird jedoch angewendet.\n
main.opt.p=\nOptionen zum Filtern von Abh\u00E4ngigkeiten:\n  -p <Pkg>\n  -package <Pkg>\n  --package <Pkg>               Findet Abh\u00E4ngigkeiten, die mit dem angegebenen\n                                Packagenamen \u00FCbereinstimmen (kann mehrfach angegeben werden).

main.opt.e=\  -e <Regex>\n  -regex <Regex>\n  --regex <Regex>               Findet Abh\u00E4ngigkeiten, die dem angegebenen Muster entsprechen.

main.opt.require=\  --require <Modulname>       Findet Abh\u00E4ngigkeiten, die dem angegebenen Modulnamen\n                                entsprechen (kann mehrfach angegeben werden). --package,\n                                --regex, --require schlie\u00DFen sich gegenseitig aus.

main.opt.missing-deps=\  --missing-deps                Findet fehlende Abh\u00E4ngigkeiten. Diese Option\n                                kann nicht mit den Optionen -p, -e und -s verwendet werden.

main.opt.ignore-missing-deps=\  --ignore-missing-deps         Ignoriert fehlende Abh\u00E4ngigkeiten.

main.opt.include=\nOptionen zum Filtern der zu analysierenden Klassen:\n  -include <Regex>              Beschr\u00E4nkt die Analyse auf Klassen, die dem Muster entsprechen\n                                Diese Option filtert die Liste der zu analysierenden\n                                Klassen. Sie kann zusammen mit -p und -e verwendet\n                                werden, die das Muster auf die Abh\u00E4ngigkeiten anwenden

main.opt.P=\  -P       -profile             Zeigt das Profil, das ein Package enth\u00E4lt

main.opt.cp=\  -cp <Pfad>\n  -classpath <Pfad>\n  --class-path <Pfad>           Gibt an, wo sich die Klassendateien befinden

main.opt.module-path=\  --module-path <Modulpfad>   Gibt den Modulpfad an

main.opt.upgrade-module-path=\  --upgrade-module-path <Modulpfad>  Gibt den Upgrademodulpfad an

main.opt.system=\  --system <Java-Home>          Gibt einen alternativen Systemmodulpfad an

main.opt.add-modules=\  --add-modules <Modulname>[,<Modulname>...]\n                                F\u00FCgt dem Root-Set Module zur Analyse hinzu

main.opt.R=\  -R\n  --recursive                   Traversiert rekursiv alle Laufzeitabh\u00E4ngigkeiten.\n                                Die Option -R impliziert -filter:none. Falls eine Option -p,\n                                -e, -f angegeben ist, werden nur die \u00FCbereinstimmenden\n                                Abh\u00E4ngigkeiten analysiert.

main.opt.no-recursive=\  --no-recursive                Kein rekursives Traversieren von Abh\u00E4ngigkeiten.

main.opt.I=\  -I\n  --inverse                     Analysiert die Abh\u00E4ngigkeiten gem\u00E4\u00DF den anderen angegebenen\n                                Optionen und findet alle Artefakte, die direkt und\n                                indirekt von den \u00FCbereinstimmenden Knoten abh\u00E4ngen.\n                                Dies entspricht der Umkehrung der\n                                Analyse der Kompilierungszeitansicht und gibt die\n                                Abh\u00E4ngigkeits\u00FCbersicht aus. Diese Option muss mit der Option\n                                --require, --package oder --regex verwendet werden.

main.opt.compile-time=\  --compile-time                Kompilierungszeitansicht transitiver Abh\u00E4ngigkeiten,\n                                d.h. Kompilierungszeitansicht der Option -R.\n                                Analysiert die Abh\u00E4ngigkeiten gem\u00E4\u00DF den anderen angegebenen Optionen\n                                Wird eine Abh\u00E4ngigkeit von einem Verzeichnis,\n                                einer JAR-Datei oder einem Modul gefunden, werden alle Klassen im \n                                entsprechenden beinhaltenden Archiv analysiert.

main.opt.apionly=\  -apionly\n  --api-only                    Beschr\u00E4nkt die Analyse auf APIs, d.h. Abh\u00E4ngigkeiten\n                                von der Signatur \u00F6ffentlicher und gesch\u00FCtzter\n                                Mitglieder von \u00F6ffentlichen Klassen, einschlie\u00DFlich von\n                                Feldtyp, Methodenparametertypen, R\u00FCckgabetyp,\n                                aktivierten Ausnahmetypen usw.

main.opt.m=\nOptionen f\u00FCr die Modulabh\u00E4ngigkeitsanalyse:\n  -m <Modulname>\n  --module <Modulname>        Gibt das Root-Modul f\u00FCr die Analyse an

main.opt.generate-module-info=\  --generate-module-info <Verzeichnis>  Generiert module-info.java im angegebenen\n                                Verzeichnis. Die angegebenen JAR-Dateien werden\n                                analysiert. Diese Option kann nicht zusammen mit\n                                --dot-output oder --class-path verwendet werden. Verwenden Sie\n                                f\u00FCr offene Module die Option --generate-open-module.

main.opt.generate-open-module=\  --generate-open-module <Verzeichnis>  Generiert module-info.java f\u00FCr die angegebenen\n                                JAR-Dateien im angegebenen Verzeichnis als\n                                offene Module. Diese Option kann nicht mit\n                                --dot-output oder --class-path verwendet werden.

main.opt.check=\  --check <Modulname>[,<Modulname>...\n                                Analysiert die Abh\u00E4ngigkeit der angegebenen Module\n                                Gibt den Moduldeskriptor, die aus der Analyse resultierenden\n                                Modulabh\u00E4ngigkeiten und das Diagramm nach\n                                der \u00DCbergangsreduktion aus. Identifiziert auch\n                                nicht verwendete qualifizierte Exporte.

main.opt.dotoutput=\  -dotoutput <Verzeichnis>\n  --dot-output <Verzeichnis>            Zielverzeichnis f\u00FCr DOT-Dateiausgabe

main.opt.jdkinternals=\  -jdkinternals\n  --jdk-internals               Findet Abh\u00E4ngigkeiten auf Klassenebene auf JDK-internen\n                                APIs. Analysiert standardm\u00E4\u00DFig alle Klassen\n                                in --class-path und Eingabedateien, es sei denn, die Option\n                                -include ist angegeben. Diese Option kann nicht mit\n                                den Optionen -p, -e und -s verwendet werden.\n                                WARNUNG: Auf JDK-interne APIs besteht kein Zugriff.

main.opt.list-deps=\  --list-deps                   Listet die Modulabh\u00E4ngigkeiten auf. Gibt auch\n                                interne API-Packages aus, falls referenziert.\n                                Diese Option analysiert transitiv die Librarys im\n                                Classpath und im Modulpfad, falls referenziert.\n                                Verwenden Sie die Option --no-recursive f\u00FCr eine\n                                nicht transitive Abh\u00E4ngigkeitsanalyse.

main.opt.list-reduced-deps=\  --list-reduced-deps           Gleich wie --list-deps, listet jedoch die Kanten f\u00FCr die\n                                implizierten Lesevorg\u00E4nge aus dem Moduldiagramm nicht auf.\n                                Wenn Modul M1 M2 liest und M2 \u00FCber M3\n                                transitiv sein muss, dann wird impliziert, dass M1 M3 liest,\n                                und dies wird im Diagramm nicht angezeigt.

main.opt.print-module-deps=\  --print-module-deps           Gleich wie --list-reduced-deps, und es wird\n                                eine kommagetrennte Liste von Modulabh\u00E4ngigkeiten ausgegeben.\n                                Dies Ausgabe kann von der jlink-Option --add-modules\n                                verwendet werden, um ein benutzerdefiniertes Image zu erstellen,\n                                das diese Module und ihre transitiven Abh\u00E4ngigkeiten enth\u00E4lt.

main.opt.depth=\  -depth=<Tiefe>                Gibt die Tiefe der transitiven\n                                Abh\u00E4ngigkeitsanalyse an

main.opt.q=\  -q       -quiet               Unterdr\u00FCckt Warnmeldungen

main.opt.multi-release=\  --multi-release <Version>     Gibt bei Verarbeitung von Multi-Release-JAR-Dateien\n                                die Version an. <Version> muss eine\n                                Ganzzahl >= 9 oder ein Basiswert sein.

err.command.set=Die Optionen {0} und {1} werden angegeben.
err.unknown.option=unbekannte Option: {0}
err.missing.arg=kein Wert angegeben f\u00FCr {0}
err.invalid.arg.for.option=ung\u00FCltiges Argument f\u00FCr Option: {0}
err.option.after.class=Option muss angegeben werden vor den Klassen: {0}
err.genmoduleinfo.not.jarfile={0} ist eine modulare JAR-Datei, die nicht mit der Option --generate-module-info angegeben werden kann
err.genmoduleinfo.unnamed.package={0} enth\u00E4lt ein unbenanntes Package, das in einem Modul nicht zul\u00E4ssig ist
err.profiles.msg=Keine Profilinformationen
err.exception.message={0}
err.invalid.path=ung\u00FCltiger Pfad: {0}
err.invalid.options={0} kann nicht mit der Option {1} verwendet werden
err.module.not.found=Modul nicht gefunden: {0}
err.root.module.not.set=Root-Modulset leer
err.option.already.specified=Option {0} wurde mehrmals angegeben.
err.filter.not.specified=Die Optionen --package (-p), --regex (-e), --require m\u00FCssen angegeben werden
err.invalid.filters=Nur eine der Optionen --package (-p), --regex (-e), --require darf angegeben werden
err.multirelease.option.exists={0} ist keine Multi-Release-JAR-Datei, aber die Option --multi-release ist festgelegt
err.multirelease.option.notfound={0} ist eine Multi-Release-JAR-Datei, aber die Option --multi-release ist nicht festgelegt
err.multirelease.version.associated=Klasse {0} ist bereits mit Version {1} verkn\u00FCpft, und es wird versucht, Version {2} hinzuzuf\u00FCgen
err.multirelease.jar.malformed=nicht wohlgeformte Multi-Release-JAR, {0}, ung\u00FCltiger Eintrag: {1}
err.missing.dependences=Fehlende Abh\u00E4ngigkeiten: Klassen wurden im Modulpfad und Klassenpfad nicht gefunden.\nUm diesen Fehler zu unterdr\u00FCcken und fortzufahren, verwenden Sie --ignore-missing-deps.

warn.invalid.arg=Pfad ist nicht vorhanden: {0}
warn.skipped.entry={0}
warn.split.package=geteiltes Package: {0} {1}
warn.replace.useJDKInternals=JDK-interne APIs werden nicht unterst\u00FCtzt und sind privat f\u00FCr JDK-Implementierungen.\nSie k\u00F6nnten ohne Ber\u00FCcksichtigung der Kompatibilit\u00E4t ge\u00E4ndert oder entfernt werden und die Anwendung besch\u00E4digen.\n\u00C4ndern Sie den Code, um Abh\u00E4ngigkeiten von JDK-internen APIs zu beseitigen.\nDie neuesten Informationen zu JDK-internen API-Ersetzungen finden Sie hier:\n{0}

inverse.transitive.dependencies.on=Inverse transitive Abh\u00E4ngigkeiten von {0}
inverse.transitive.dependencies.matching=Inverse transitive Abh\u00E4ngigkeiten, die \u00FCbereinstimmen mit {0}
internal.api.column.header=JDK-interne API
public.api.replacement.column.header=Vorgeschlagene Ersetzung
artifact.not.found=nicht gefunden
jdeps.wiki.url=https://wiki.openjdk.org/display/JDK8/Java+Dependency+Analysis+Tool
